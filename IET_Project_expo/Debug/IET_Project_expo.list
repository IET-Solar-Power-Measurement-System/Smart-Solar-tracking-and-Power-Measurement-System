
IET_Project_expo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000516c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  080052fc  080052fc  000062fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800536c  0800536c  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  0800536c  0800536c  0000636c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005374  08005374  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005374  08005374  00006374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005378  08005378  00006378  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  0800537c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000705c  2**0
                  CONTENTS
 10 .bss          00000278  2000005c  2000005c  0000705c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002d4  200002d4  0000705c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cc2e  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001cbb  00000000  00000000  00013cba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000dc0  00000000  00000000  00015978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ac5  00000000  00000000  00016738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000228e2  00000000  00000000  000171fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010b38  00000000  00000000  00039adf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d84bd  00000000  00000000  0004a617  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00122ad4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000041a0  00000000  00000000  00122b18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  00126cb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080052e4 	.word	0x080052e4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	080052e4 	.word	0x080052e4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2f>:
 8000b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b24:	bf24      	itt	cs
 8000b26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b2e:	d90d      	bls.n	8000b4c <__aeabi_d2f+0x30>
 8000b30:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b3c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b44:	bf08      	it	eq
 8000b46:	f020 0001 	biceq.w	r0, r0, #1
 8000b4a:	4770      	bx	lr
 8000b4c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b50:	d121      	bne.n	8000b96 <__aeabi_d2f+0x7a>
 8000b52:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b56:	bfbc      	itt	lt
 8000b58:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	4770      	bxlt	lr
 8000b5e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b66:	f1c2 0218 	rsb	r2, r2, #24
 8000b6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b72:	fa20 f002 	lsr.w	r0, r0, r2
 8000b76:	bf18      	it	ne
 8000b78:	f040 0001 	orrne.w	r0, r0, #1
 8000b7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b88:	ea40 000c 	orr.w	r0, r0, ip
 8000b8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b94:	e7cc      	b.n	8000b30 <__aeabi_d2f+0x14>
 8000b96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b9a:	d107      	bne.n	8000bac <__aeabi_d2f+0x90>
 8000b9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ba0:	bf1e      	ittt	ne
 8000ba2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ba6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000baa:	4770      	bxne	lr
 8000bac:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bb0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bb4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <__aeabi_uldivmod>:
 8000bbc:	b953      	cbnz	r3, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bbe:	b94a      	cbnz	r2, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bc0:	2900      	cmp	r1, #0
 8000bc2:	bf08      	it	eq
 8000bc4:	2800      	cmpeq	r0, #0
 8000bc6:	bf1c      	itt	ne
 8000bc8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bcc:	f04f 30ff 	movne.w	r0, #4294967295
 8000bd0:	f000 b96a 	b.w	8000ea8 <__aeabi_idiv0>
 8000bd4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bdc:	f000 f806 	bl	8000bec <__udivmoddi4>
 8000be0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be8:	b004      	add	sp, #16
 8000bea:	4770      	bx	lr

08000bec <__udivmoddi4>:
 8000bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bf0:	9d08      	ldr	r5, [sp, #32]
 8000bf2:	460c      	mov	r4, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14e      	bne.n	8000c96 <__udivmoddi4+0xaa>
 8000bf8:	4694      	mov	ip, r2
 8000bfa:	458c      	cmp	ip, r1
 8000bfc:	4686      	mov	lr, r0
 8000bfe:	fab2 f282 	clz	r2, r2
 8000c02:	d962      	bls.n	8000cca <__udivmoddi4+0xde>
 8000c04:	b14a      	cbz	r2, 8000c1a <__udivmoddi4+0x2e>
 8000c06:	f1c2 0320 	rsb	r3, r2, #32
 8000c0a:	4091      	lsls	r1, r2
 8000c0c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c10:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c14:	4319      	orrs	r1, r3
 8000c16:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1e:	fa1f f68c 	uxth.w	r6, ip
 8000c22:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c26:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c2a:	fb07 1114 	mls	r1, r7, r4, r1
 8000c2e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c32:	fb04 f106 	mul.w	r1, r4, r6
 8000c36:	4299      	cmp	r1, r3
 8000c38:	d90a      	bls.n	8000c50 <__udivmoddi4+0x64>
 8000c3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c42:	f080 8112 	bcs.w	8000e6a <__udivmoddi4+0x27e>
 8000c46:	4299      	cmp	r1, r3
 8000c48:	f240 810f 	bls.w	8000e6a <__udivmoddi4+0x27e>
 8000c4c:	3c02      	subs	r4, #2
 8000c4e:	4463      	add	r3, ip
 8000c50:	1a59      	subs	r1, r3, r1
 8000c52:	fa1f f38e 	uxth.w	r3, lr
 8000c56:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c5a:	fb07 1110 	mls	r1, r7, r0, r1
 8000c5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c62:	fb00 f606 	mul.w	r6, r0, r6
 8000c66:	429e      	cmp	r6, r3
 8000c68:	d90a      	bls.n	8000c80 <__udivmoddi4+0x94>
 8000c6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c72:	f080 80fc 	bcs.w	8000e6e <__udivmoddi4+0x282>
 8000c76:	429e      	cmp	r6, r3
 8000c78:	f240 80f9 	bls.w	8000e6e <__udivmoddi4+0x282>
 8000c7c:	4463      	add	r3, ip
 8000c7e:	3802      	subs	r0, #2
 8000c80:	1b9b      	subs	r3, r3, r6
 8000c82:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c86:	2100      	movs	r1, #0
 8000c88:	b11d      	cbz	r5, 8000c92 <__udivmoddi4+0xa6>
 8000c8a:	40d3      	lsrs	r3, r2
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	e9c5 3200 	strd	r3, r2, [r5]
 8000c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c96:	428b      	cmp	r3, r1
 8000c98:	d905      	bls.n	8000ca6 <__udivmoddi4+0xba>
 8000c9a:	b10d      	cbz	r5, 8000ca0 <__udivmoddi4+0xb4>
 8000c9c:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	4608      	mov	r0, r1
 8000ca4:	e7f5      	b.n	8000c92 <__udivmoddi4+0xa6>
 8000ca6:	fab3 f183 	clz	r1, r3
 8000caa:	2900      	cmp	r1, #0
 8000cac:	d146      	bne.n	8000d3c <__udivmoddi4+0x150>
 8000cae:	42a3      	cmp	r3, r4
 8000cb0:	d302      	bcc.n	8000cb8 <__udivmoddi4+0xcc>
 8000cb2:	4290      	cmp	r0, r2
 8000cb4:	f0c0 80f0 	bcc.w	8000e98 <__udivmoddi4+0x2ac>
 8000cb8:	1a86      	subs	r6, r0, r2
 8000cba:	eb64 0303 	sbc.w	r3, r4, r3
 8000cbe:	2001      	movs	r0, #1
 8000cc0:	2d00      	cmp	r5, #0
 8000cc2:	d0e6      	beq.n	8000c92 <__udivmoddi4+0xa6>
 8000cc4:	e9c5 6300 	strd	r6, r3, [r5]
 8000cc8:	e7e3      	b.n	8000c92 <__udivmoddi4+0xa6>
 8000cca:	2a00      	cmp	r2, #0
 8000ccc:	f040 8090 	bne.w	8000df0 <__udivmoddi4+0x204>
 8000cd0:	eba1 040c 	sub.w	r4, r1, ip
 8000cd4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd8:	fa1f f78c 	uxth.w	r7, ip
 8000cdc:	2101      	movs	r1, #1
 8000cde:	fbb4 f6f8 	udiv	r6, r4, r8
 8000ce2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ce6:	fb08 4416 	mls	r4, r8, r6, r4
 8000cea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cee:	fb07 f006 	mul.w	r0, r7, r6
 8000cf2:	4298      	cmp	r0, r3
 8000cf4:	d908      	bls.n	8000d08 <__udivmoddi4+0x11c>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cfe:	d202      	bcs.n	8000d06 <__udivmoddi4+0x11a>
 8000d00:	4298      	cmp	r0, r3
 8000d02:	f200 80cd 	bhi.w	8000ea0 <__udivmoddi4+0x2b4>
 8000d06:	4626      	mov	r6, r4
 8000d08:	1a1c      	subs	r4, r3, r0
 8000d0a:	fa1f f38e 	uxth.w	r3, lr
 8000d0e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d12:	fb08 4410 	mls	r4, r8, r0, r4
 8000d16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d1a:	fb00 f707 	mul.w	r7, r0, r7
 8000d1e:	429f      	cmp	r7, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x148>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x146>
 8000d2c:	429f      	cmp	r7, r3
 8000d2e:	f200 80b0 	bhi.w	8000e92 <__udivmoddi4+0x2a6>
 8000d32:	4620      	mov	r0, r4
 8000d34:	1bdb      	subs	r3, r3, r7
 8000d36:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d3a:	e7a5      	b.n	8000c88 <__udivmoddi4+0x9c>
 8000d3c:	f1c1 0620 	rsb	r6, r1, #32
 8000d40:	408b      	lsls	r3, r1
 8000d42:	fa22 f706 	lsr.w	r7, r2, r6
 8000d46:	431f      	orrs	r7, r3
 8000d48:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d4c:	fa04 f301 	lsl.w	r3, r4, r1
 8000d50:	ea43 030c 	orr.w	r3, r3, ip
 8000d54:	40f4      	lsrs	r4, r6
 8000d56:	fa00 f801 	lsl.w	r8, r0, r1
 8000d5a:	0c38      	lsrs	r0, r7, #16
 8000d5c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d60:	fbb4 fef0 	udiv	lr, r4, r0
 8000d64:	fa1f fc87 	uxth.w	ip, r7
 8000d68:	fb00 441e 	mls	r4, r0, lr, r4
 8000d6c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d70:	fb0e f90c 	mul.w	r9, lr, ip
 8000d74:	45a1      	cmp	r9, r4
 8000d76:	fa02 f201 	lsl.w	r2, r2, r1
 8000d7a:	d90a      	bls.n	8000d92 <__udivmoddi4+0x1a6>
 8000d7c:	193c      	adds	r4, r7, r4
 8000d7e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d82:	f080 8084 	bcs.w	8000e8e <__udivmoddi4+0x2a2>
 8000d86:	45a1      	cmp	r9, r4
 8000d88:	f240 8081 	bls.w	8000e8e <__udivmoddi4+0x2a2>
 8000d8c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d90:	443c      	add	r4, r7
 8000d92:	eba4 0409 	sub.w	r4, r4, r9
 8000d96:	fa1f f983 	uxth.w	r9, r3
 8000d9a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d9e:	fb00 4413 	mls	r4, r0, r3, r4
 8000da2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000da6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000daa:	45a4      	cmp	ip, r4
 8000dac:	d907      	bls.n	8000dbe <__udivmoddi4+0x1d2>
 8000dae:	193c      	adds	r4, r7, r4
 8000db0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000db4:	d267      	bcs.n	8000e86 <__udivmoddi4+0x29a>
 8000db6:	45a4      	cmp	ip, r4
 8000db8:	d965      	bls.n	8000e86 <__udivmoddi4+0x29a>
 8000dba:	3b02      	subs	r3, #2
 8000dbc:	443c      	add	r4, r7
 8000dbe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dc2:	fba0 9302 	umull	r9, r3, r0, r2
 8000dc6:	eba4 040c 	sub.w	r4, r4, ip
 8000dca:	429c      	cmp	r4, r3
 8000dcc:	46ce      	mov	lr, r9
 8000dce:	469c      	mov	ip, r3
 8000dd0:	d351      	bcc.n	8000e76 <__udivmoddi4+0x28a>
 8000dd2:	d04e      	beq.n	8000e72 <__udivmoddi4+0x286>
 8000dd4:	b155      	cbz	r5, 8000dec <__udivmoddi4+0x200>
 8000dd6:	ebb8 030e 	subs.w	r3, r8, lr
 8000dda:	eb64 040c 	sbc.w	r4, r4, ip
 8000dde:	fa04 f606 	lsl.w	r6, r4, r6
 8000de2:	40cb      	lsrs	r3, r1
 8000de4:	431e      	orrs	r6, r3
 8000de6:	40cc      	lsrs	r4, r1
 8000de8:	e9c5 6400 	strd	r6, r4, [r5]
 8000dec:	2100      	movs	r1, #0
 8000dee:	e750      	b.n	8000c92 <__udivmoddi4+0xa6>
 8000df0:	f1c2 0320 	rsb	r3, r2, #32
 8000df4:	fa20 f103 	lsr.w	r1, r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa24 f303 	lsr.w	r3, r4, r3
 8000e00:	4094      	lsls	r4, r2
 8000e02:	430c      	orrs	r4, r1
 8000e04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e08:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e0c:	fa1f f78c 	uxth.w	r7, ip
 8000e10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e14:	fb08 3110 	mls	r1, r8, r0, r3
 8000e18:	0c23      	lsrs	r3, r4, #16
 8000e1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e1e:	fb00 f107 	mul.w	r1, r0, r7
 8000e22:	4299      	cmp	r1, r3
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x24c>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e2e:	d22c      	bcs.n	8000e8a <__udivmoddi4+0x29e>
 8000e30:	4299      	cmp	r1, r3
 8000e32:	d92a      	bls.n	8000e8a <__udivmoddi4+0x29e>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1a5b      	subs	r3, r3, r1
 8000e3a:	b2a4      	uxth	r4, r4
 8000e3c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e40:	fb08 3311 	mls	r3, r8, r1, r3
 8000e44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e48:	fb01 f307 	mul.w	r3, r1, r7
 8000e4c:	42a3      	cmp	r3, r4
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x276>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e58:	d213      	bcs.n	8000e82 <__udivmoddi4+0x296>
 8000e5a:	42a3      	cmp	r3, r4
 8000e5c:	d911      	bls.n	8000e82 <__udivmoddi4+0x296>
 8000e5e:	3902      	subs	r1, #2
 8000e60:	4464      	add	r4, ip
 8000e62:	1ae4      	subs	r4, r4, r3
 8000e64:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e68:	e739      	b.n	8000cde <__udivmoddi4+0xf2>
 8000e6a:	4604      	mov	r4, r0
 8000e6c:	e6f0      	b.n	8000c50 <__udivmoddi4+0x64>
 8000e6e:	4608      	mov	r0, r1
 8000e70:	e706      	b.n	8000c80 <__udivmoddi4+0x94>
 8000e72:	45c8      	cmp	r8, r9
 8000e74:	d2ae      	bcs.n	8000dd4 <__udivmoddi4+0x1e8>
 8000e76:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e7a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e7e:	3801      	subs	r0, #1
 8000e80:	e7a8      	b.n	8000dd4 <__udivmoddi4+0x1e8>
 8000e82:	4631      	mov	r1, r6
 8000e84:	e7ed      	b.n	8000e62 <__udivmoddi4+0x276>
 8000e86:	4603      	mov	r3, r0
 8000e88:	e799      	b.n	8000dbe <__udivmoddi4+0x1d2>
 8000e8a:	4630      	mov	r0, r6
 8000e8c:	e7d4      	b.n	8000e38 <__udivmoddi4+0x24c>
 8000e8e:	46d6      	mov	lr, sl
 8000e90:	e77f      	b.n	8000d92 <__udivmoddi4+0x1a6>
 8000e92:	4463      	add	r3, ip
 8000e94:	3802      	subs	r0, #2
 8000e96:	e74d      	b.n	8000d34 <__udivmoddi4+0x148>
 8000e98:	4606      	mov	r6, r0
 8000e9a:	4623      	mov	r3, r4
 8000e9c:	4608      	mov	r0, r1
 8000e9e:	e70f      	b.n	8000cc0 <__udivmoddi4+0xd4>
 8000ea0:	3e02      	subs	r6, #2
 8000ea2:	4463      	add	r3, ip
 8000ea4:	e730      	b.n	8000d08 <__udivmoddi4+0x11c>
 8000ea6:	bf00      	nop

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <LCD_Send>:

// Store the I2C handle
static I2C_HandleTypeDef *lcd_i2c;

// Send data to LCD (Command or Data)
void LCD_Send(uint8_t data, uint8_t mode) {
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b086      	sub	sp, #24
 8000eb0:	af02      	add	r7, sp, #8
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	460a      	mov	r2, r1
 8000eb6:	71fb      	strb	r3, [r7, #7]
 8000eb8:	4613      	mov	r3, r2
 8000eba:	71bb      	strb	r3, [r7, #6]
    uint8_t high_nibble = (data & 0xF0) | mode | 0x08;  // Backlight ON
 8000ebc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec0:	f023 030f 	bic.w	r3, r3, #15
 8000ec4:	b25a      	sxtb	r2, r3
 8000ec6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	b25b      	sxtb	r3, r3
 8000ece:	f043 0308 	orr.w	r3, r3, #8
 8000ed2:	b25b      	sxtb	r3, r3
 8000ed4:	73fb      	strb	r3, [r7, #15]
    uint8_t low_nibble = ((data << 4) & 0xF0) | mode | 0x08;
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
 8000ed8:	011b      	lsls	r3, r3, #4
 8000eda:	b25a      	sxtb	r2, r3
 8000edc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	b25b      	sxtb	r3, r3
 8000ee4:	f043 0308 	orr.w	r3, r3, #8
 8000ee8:	b25b      	sxtb	r3, r3
 8000eea:	73bb      	strb	r3, [r7, #14]
    
    uint8_t data_buffer[4] = { high_nibble | 0x04, high_nibble, low_nibble | 0x04, low_nibble };
 8000eec:	7bfb      	ldrb	r3, [r7, #15]
 8000eee:	f043 0304 	orr.w	r3, r3, #4
 8000ef2:	b2db      	uxtb	r3, r3
 8000ef4:	723b      	strb	r3, [r7, #8]
 8000ef6:	7bfb      	ldrb	r3, [r7, #15]
 8000ef8:	727b      	strb	r3, [r7, #9]
 8000efa:	7bbb      	ldrb	r3, [r7, #14]
 8000efc:	f043 0304 	orr.w	r3, r3, #4
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	72bb      	strb	r3, [r7, #10]
 8000f04:	7bbb      	ldrb	r3, [r7, #14]
 8000f06:	72fb      	strb	r3, [r7, #11]
    HAL_I2C_Master_Transmit(lcd_i2c, LCD_I2C_ADDR, data_buffer, 4, HAL_MAX_DELAY);
 8000f08:	4b08      	ldr	r3, [pc, #32]	@ (8000f2c <LCD_Send+0x80>)
 8000f0a:	6818      	ldr	r0, [r3, #0]
 8000f0c:	f107 0208 	add.w	r2, r7, #8
 8000f10:	f04f 33ff 	mov.w	r3, #4294967295
 8000f14:	9300      	str	r3, [sp, #0]
 8000f16:	2304      	movs	r3, #4
 8000f18:	214e      	movs	r1, #78	@ 0x4e
 8000f1a:	f001 fec1 	bl	8002ca0 <HAL_I2C_Master_Transmit>
    HAL_Delay(1);
 8000f1e:	2001      	movs	r0, #1
 8000f20:	f000 fed4 	bl	8001ccc <HAL_Delay>
}
 8000f24:	bf00      	nop
 8000f26:	3710      	adds	r7, #16
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	20000078 	.word	0x20000078

08000f30 <LCD_SendCommand>:

// Send a command to LCD
void LCD_SendCommand(uint8_t cmd) {
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	71fb      	strb	r3, [r7, #7]
    LCD_Send(cmd, 0x00);
 8000f3a:	79fb      	ldrb	r3, [r7, #7]
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f7ff ffb4 	bl	8000eac <LCD_Send>
}
 8000f44:	bf00      	nop
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <LCD_SendChar>:

// Send a character to LCD
void LCD_SendChar(char data) {
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	4603      	mov	r3, r0
 8000f54:	71fb      	strb	r3, [r7, #7]
    LCD_Send(data, 0x01);
 8000f56:	79fb      	ldrb	r3, [r7, #7]
 8000f58:	2101      	movs	r1, #1
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f7ff ffa6 	bl	8000eac <LCD_Send>
}
 8000f60:	bf00      	nop
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <LCD_SendString>:

// Send a string to LCD
void LCD_SendString(char *str) {
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
    while (*str) {
 8000f70:	e006      	b.n	8000f80 <LCD_SendString+0x18>
        LCD_SendChar(*str++);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	1c5a      	adds	r2, r3, #1
 8000f76:	607a      	str	r2, [r7, #4]
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f7ff ffe6 	bl	8000f4c <LCD_SendChar>
    while (*str) {
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d1f4      	bne.n	8000f72 <LCD_SendString+0xa>
    }
}
 8000f88:	bf00      	nop
 8000f8a:	bf00      	nop
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <LCD_Clear>:

// Clear LCD
void LCD_Clear() {
 8000f92:	b580      	push	{r7, lr}
 8000f94:	af00      	add	r7, sp, #0
    LCD_SendCommand(LCD_CMD_CLEAR_DISPLAY);
 8000f96:	2001      	movs	r0, #1
 8000f98:	f7ff ffca 	bl	8000f30 <LCD_SendCommand>
    HAL_Delay(2);
 8000f9c:	2002      	movs	r0, #2
 8000f9e:	f000 fe95 	bl	8001ccc <HAL_Delay>
}
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <LCD_SetCursor>:

// Set cursor position
void LCD_SetCursor(uint8_t row, uint8_t col) {
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b084      	sub	sp, #16
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	4603      	mov	r3, r0
 8000fae:	460a      	mov	r2, r1
 8000fb0:	71fb      	strb	r3, [r7, #7]
 8000fb2:	4613      	mov	r3, r2
 8000fb4:	71bb      	strb	r3, [r7, #6]
    uint8_t addr = (row == 0) ? (0x80 + col) : (0xC0 + col);
 8000fb6:	79fb      	ldrb	r3, [r7, #7]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d103      	bne.n	8000fc4 <LCD_SetCursor+0x1e>
 8000fbc:	79bb      	ldrb	r3, [r7, #6]
 8000fbe:	3b80      	subs	r3, #128	@ 0x80
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	e002      	b.n	8000fca <LCD_SetCursor+0x24>
 8000fc4:	79bb      	ldrb	r3, [r7, #6]
 8000fc6:	3b40      	subs	r3, #64	@ 0x40
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	73fb      	strb	r3, [r7, #15]
    LCD_SendCommand(addr);
 8000fcc:	7bfb      	ldrb	r3, [r7, #15]
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f7ff ffae 	bl	8000f30 <LCD_SendCommand>
}
 8000fd4:	bf00      	nop
 8000fd6:	3710      	adds	r7, #16
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <LCD_Init>:

// Initialize LCD
void LCD_Init(I2C_HandleTypeDef *hi2c) {
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
    lcd_i2c = hi2c;
 8000fe4:	4a15      	ldr	r2, [pc, #84]	@ (800103c <LCD_Init+0x60>)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6013      	str	r3, [r2, #0]
    
    HAL_Delay(50);
 8000fea:	2032      	movs	r0, #50	@ 0x32
 8000fec:	f000 fe6e 	bl	8001ccc <HAL_Delay>
    LCD_SendCommand(0x03);
 8000ff0:	2003      	movs	r0, #3
 8000ff2:	f7ff ff9d 	bl	8000f30 <LCD_SendCommand>
    HAL_Delay(5);
 8000ff6:	2005      	movs	r0, #5
 8000ff8:	f000 fe68 	bl	8001ccc <HAL_Delay>
    LCD_SendCommand(0x03);
 8000ffc:	2003      	movs	r0, #3
 8000ffe:	f7ff ff97 	bl	8000f30 <LCD_SendCommand>
    HAL_Delay(1);
 8001002:	2001      	movs	r0, #1
 8001004:	f000 fe62 	bl	8001ccc <HAL_Delay>
    LCD_SendCommand(0x03);
 8001008:	2003      	movs	r0, #3
 800100a:	f7ff ff91 	bl	8000f30 <LCD_SendCommand>
    LCD_SendCommand(0x02);
 800100e:	2002      	movs	r0, #2
 8001010:	f7ff ff8e 	bl	8000f30 <LCD_SendCommand>
    
    LCD_SendCommand(LCD_CMD_FUNCTION_SET);
 8001014:	2028      	movs	r0, #40	@ 0x28
 8001016:	f7ff ff8b 	bl	8000f30 <LCD_SendCommand>
    LCD_SendCommand(LCD_CMD_DISPLAY_ON);
 800101a:	200c      	movs	r0, #12
 800101c:	f7ff ff88 	bl	8000f30 <LCD_SendCommand>
    LCD_SendCommand(LCD_CMD_CLEAR_DISPLAY);
 8001020:	2001      	movs	r0, #1
 8001022:	f7ff ff85 	bl	8000f30 <LCD_SendCommand>
    HAL_Delay(2);
 8001026:	2002      	movs	r0, #2
 8001028:	f000 fe50 	bl	8001ccc <HAL_Delay>
    LCD_SendCommand(LCD_CMD_ENTRY_MODE | 0x02);
 800102c:	2006      	movs	r0, #6
 800102e:	f7ff ff7f 	bl	8000f30 <LCD_SendCommand>
}
 8001032:	bf00      	nop
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	20000078 	.word	0x20000078

08001040 <select_ADC_channel2>:
void adjust_tilt(int ldr1, int ldr2,float cur_power);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void select_ADC_channel2(void){
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001046:	463b      	mov	r3, r7
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	605a      	str	r2, [r3, #4]
 800104e:	609a      	str	r2, [r3, #8]
 8001050:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_2;
 8001052:	2302      	movs	r3, #2
 8001054:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 8001056:	2301      	movs	r3, #1
 8001058:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 800105a:	2304      	movs	r3, #4
 800105c:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800105e:	463b      	mov	r3, r7
 8001060:	4619      	mov	r1, r3
 8001062:	4806      	ldr	r0, [pc, #24]	@ (800107c <select_ADC_channel2+0x3c>)
 8001064:	f001 f838 	bl	80020d8 <HAL_ADC_ConfigChannel>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <select_ADC_channel2+0x32>
	  {
	    Error_Handler();
 800106e:	f000 fc03 	bl	8001878 <Error_Handler>

	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */


}
 8001072:	bf00      	nop
 8001074:	3710      	adds	r7, #16
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	2000007c 	.word	0x2000007c

08001080 <select_ADC_channel3>:

void select_ADC_channel3(void){
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001086:	463b      	mov	r3, r7
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	60da      	str	r2, [r3, #12]


	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_3;
 8001092:	2303      	movs	r3, #3
 8001094:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 8001096:	2301      	movs	r3, #1
 8001098:	607b      	str	r3, [r7, #4]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800109a:	463b      	mov	r3, r7
 800109c:	4619      	mov	r1, r3
 800109e:	4806      	ldr	r0, [pc, #24]	@ (80010b8 <select_ADC_channel3+0x38>)
 80010a0:	f001 f81a 	bl	80020d8 <HAL_ADC_ConfigChannel>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <select_ADC_channel3+0x2e>
	  {
	    Error_Handler();
 80010aa:	f000 fbe5 	bl	8001878 <Error_Handler>


	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */

}
 80010ae:	bf00      	nop
 80010b0:	3710      	adds	r7, #16
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	2000007c 	.word	0x2000007c

080010bc <select_channel4>:

void select_channel4(void){
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80010c2:	463b      	mov	r3, r7
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	609a      	str	r2, [r3, #8]
 80010cc:	60da      	str	r2, [r3, #12]

		  sConfig.Channel = ADC_CHANNEL_4;
 80010ce:	2304      	movs	r3, #4
 80010d0:	603b      	str	r3, [r7, #0]
		  sConfig.Rank = 1;
 80010d2:	2301      	movs	r3, #1
 80010d4:	607b      	str	r3, [r7, #4]
		  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010d6:	463b      	mov	r3, r7
 80010d8:	4619      	mov	r1, r3
 80010da:	4806      	ldr	r0, [pc, #24]	@ (80010f4 <select_channel4+0x38>)
 80010dc:	f000 fffc 	bl	80020d8 <HAL_ADC_ConfigChannel>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <select_channel4+0x2e>
		  {
		    Error_Handler();
 80010e6:	f000 fbc7 	bl	8001878 <Error_Handler>
		  }
}
 80010ea:	bf00      	nop
 80010ec:	3710      	adds	r7, #16
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	2000007c 	.word	0x2000007c

080010f8 <select_channel5>:

void select_channel5(void){
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80010fe:	463b      	mov	r3, r7
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	605a      	str	r2, [r3, #4]
 8001106:	609a      	str	r2, [r3, #8]
 8001108:	60da      	str	r2, [r3, #12]

		  sConfig.Channel = ADC_CHANNEL_5;
 800110a:	2305      	movs	r3, #5
 800110c:	603b      	str	r3, [r7, #0]
		  sConfig.Rank = 1;
 800110e:	2301      	movs	r3, #1
 8001110:	607b      	str	r3, [r7, #4]
		  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001112:	463b      	mov	r3, r7
 8001114:	4619      	mov	r1, r3
 8001116:	4806      	ldr	r0, [pc, #24]	@ (8001130 <select_channel5+0x38>)
 8001118:	f000 ffde 	bl	80020d8 <HAL_ADC_ConfigChannel>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <select_channel5+0x2e>
		  {
		    Error_Handler();
 8001122:	f000 fba9 	bl	8001878 <Error_Handler>
		  }
}
 8001126:	bf00      	nop
 8001128:	3710      	adds	r7, #16
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	2000007c 	.word	0x2000007c

08001134 <set_servo_angle>:
//    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
//
//    current_angle = angle;
//}

void set_servo_angle(int angle) {
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
    if (angle < SERVO_MIN_ANGLE) angle = SERVO_MIN_ANGLE;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f113 0f3c 	cmn.w	r3, #60	@ 0x3c
 8001142:	da02      	bge.n	800114a <set_servo_angle+0x16>
 8001144:	f06f 033b 	mvn.w	r3, #59	@ 0x3b
 8001148:	607b      	str	r3, [r7, #4]
    if (angle > SERVO_MAX_ANGLE) angle = SERVO_MAX_ANGLE;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2b3c      	cmp	r3, #60	@ 0x3c
 800114e:	dd01      	ble.n	8001154 <set_servo_angle+0x20>
 8001150:	233c      	movs	r3, #60	@ 0x3c
 8001152:	607b      	str	r3, [r7, #4]

    // Map -60° to 60° range into 0° to 180° for PWM
    int mapped_angle = (angle + 60)*180/120;  // Shift range (-60 to 60) -> (30 to 150)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	333c      	adds	r3, #60	@ 0x3c
 8001158:	22b4      	movs	r2, #180	@ 0xb4
 800115a:	fb02 f303 	mul.w	r3, r2, r3
 800115e:	4a13      	ldr	r2, [pc, #76]	@ (80011ac <set_servo_angle+0x78>)
 8001160:	fb82 1203 	smull	r1, r2, r2, r3
 8001164:	441a      	add	r2, r3
 8001166:	1192      	asrs	r2, r2, #6
 8001168:	17db      	asrs	r3, r3, #31
 800116a:	1ad3      	subs	r3, r2, r3
 800116c:	60fb      	str	r3, [r7, #12]

    // Calculate duty cycle based on mapped angle
    int duty_cycle = ((mapped_angle * (2500 - 500)) / 180) + 500;
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001174:	fb02 f303 	mul.w	r3, r2, r3
 8001178:	4a0d      	ldr	r2, [pc, #52]	@ (80011b0 <set_servo_angle+0x7c>)
 800117a:	fb82 1203 	smull	r1, r2, r2, r3
 800117e:	441a      	add	r2, r3
 8001180:	11d2      	asrs	r2, r2, #7
 8001182:	17db      	asrs	r3, r3, #31
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800118a:	60bb      	str	r3, [r7, #8]
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, duty_cycle);
 800118c:	4b09      	ldr	r3, [pc, #36]	@ (80011b4 <set_servo_angle+0x80>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	68ba      	ldr	r2, [r7, #8]
 8001192:	635a      	str	r2, [r3, #52]	@ 0x34
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001194:	2100      	movs	r1, #0
 8001196:	4807      	ldr	r0, [pc, #28]	@ (80011b4 <set_servo_angle+0x80>)
 8001198:	f002 fdc8 	bl	8003d2c <HAL_TIM_PWM_Start>

    current_angle = angle;
 800119c:	4a06      	ldr	r2, [pc, #24]	@ (80011b8 <set_servo_angle+0x84>)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6013      	str	r3, [r2, #0]
}
 80011a2:	bf00      	nop
 80011a4:	3710      	adds	r7, #16
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	88888889 	.word	0x88888889
 80011b0:	b60b60b7 	.word	0xb60b60b7
 80011b4:	20000118 	.word	0x20000118
 80011b8:	20000170 	.word	0x20000170

080011bc <adjust_tilt>:


void adjust_tilt(int ldr1,int ldr2, float cur_power) {
 80011bc:	b5b0      	push	{r4, r5, r7, lr}
 80011be:	b086      	sub	sp, #24
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	60f8      	str	r0, [r7, #12]
 80011c4:	60b9      	str	r1, [r7, #8]
 80011c6:	ed87 0a01 	vstr	s0, [r7, #4]
//    if (fabs(cur_power - prev_power) < POWER_THRESHOLD) {
//        return;
//    }

	int ldr_diff = (ldr1 - ldr2);
 80011ca:	68fa      	ldr	r2, [r7, #12]
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	1ad3      	subs	r3, r2, r3
 80011d0:	617b      	str	r3, [r7, #20]

    if (fabs(ldr_diff) < LDR_THRESHOLD) {
 80011d2:	6978      	ldr	r0, [r7, #20]
 80011d4:	f7ff f99e 	bl	8000514 <__aeabi_i2d>
 80011d8:	4602      	mov	r2, r0
 80011da:	460b      	mov	r3, r1
 80011dc:	4614      	mov	r4, r2
 80011de:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 80011e2:	f04f 0200 	mov.w	r2, #0
 80011e6:	4b16      	ldr	r3, [pc, #88]	@ (8001240 <adjust_tilt+0x84>)
 80011e8:	4620      	mov	r0, r4
 80011ea:	4629      	mov	r1, r5
 80011ec:	f7ff fc6e 	bl	8000acc <__aeabi_dcmplt>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d11f      	bne.n	8001236 <adjust_tilt+0x7a>
        return;
    }

    if (ldr_diff > 0 && current_angle < SERVO_MAX_ANGLE) {
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	dd0a      	ble.n	8001212 <adjust_tilt+0x56>
 80011fc:	4b11      	ldr	r3, [pc, #68]	@ (8001244 <adjust_tilt+0x88>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	2b3b      	cmp	r3, #59	@ 0x3b
 8001202:	dc06      	bgt.n	8001212 <adjust_tilt+0x56>
        set_servo_angle(current_angle + SERVO_STEP);
 8001204:	4b0f      	ldr	r3, [pc, #60]	@ (8001244 <adjust_tilt+0x88>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	330a      	adds	r3, #10
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff ff92 	bl	8001134 <set_servo_angle>
 8001210:	e00d      	b.n	800122e <adjust_tilt+0x72>
    } else if (ldr_diff < 0 && current_angle > SERVO_MIN_ANGLE) {
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	2b00      	cmp	r3, #0
 8001216:	da0a      	bge.n	800122e <adjust_tilt+0x72>
 8001218:	4b0a      	ldr	r3, [pc, #40]	@ (8001244 <adjust_tilt+0x88>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f113 0f3b 	cmn.w	r3, #59	@ 0x3b
 8001220:	db05      	blt.n	800122e <adjust_tilt+0x72>
        set_servo_angle(current_angle - SERVO_STEP);
 8001222:	4b08      	ldr	r3, [pc, #32]	@ (8001244 <adjust_tilt+0x88>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	3b0a      	subs	r3, #10
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff ff83 	bl	8001134 <set_servo_angle>
    }

    prev_power = cur_power;
 800122e:	4a06      	ldr	r2, [pc, #24]	@ (8001248 <adjust_tilt+0x8c>)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6013      	str	r3, [r2, #0]
 8001234:	e000      	b.n	8001238 <adjust_tilt+0x7c>
        return;
 8001236:	bf00      	nop

}
 8001238:	3718      	adds	r7, #24
 800123a:	46bd      	mov	sp, r7
 800123c:	bdb0      	pop	{r4, r5, r7, pc}
 800123e:	bf00      	nop
 8001240:	40240000 	.word	0x40240000
 8001244:	20000170 	.word	0x20000170
 8001248:	20000174 	.word	0x20000174
 800124c:	00000000 	.word	0x00000000

08001250 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b08c      	sub	sp, #48	@ 0x30
 8001254:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001256:	f000 fcc7 	bl	8001be8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800125a:	f000 f967 	bl	800152c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800125e:	f000 fad5 	bl	800180c <MX_GPIO_Init>
  MX_ADC1_Init();
 8001262:	f000 f9c1 	bl	80015e8 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001266:	f000 fa01 	bl	800166c <MX_I2C1_Init>
  MX_TIM1_Init();
 800126a:	f000 fa2d 	bl	80016c8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  LCD_Init(&hi2c1);
 800126e:	489e      	ldr	r0, [pc, #632]	@ (80014e8 <main+0x298>)
 8001270:	f7ff feb4 	bl	8000fdc <LCD_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  select_ADC_channel2();
 8001274:	f7ff fee4 	bl	8001040 <select_ADC_channel2>
	  	  HAL_ADC_Start(&hadc1);
 8001278:	489c      	ldr	r0, [pc, #624]	@ (80014ec <main+0x29c>)
 800127a:	f000 fd8f 	bl	8001d9c <HAL_ADC_Start>
	  	  HAL_ADC_PollForConversion(&hadc1, 1000);
 800127e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001282:	489a      	ldr	r0, [pc, #616]	@ (80014ec <main+0x29c>)
 8001284:	f000 fe8f 	bl	8001fa6 <HAL_ADC_PollForConversion>
	  	  ldr1 = HAL_ADC_GetValue(&hadc1);
 8001288:	4898      	ldr	r0, [pc, #608]	@ (80014ec <main+0x29c>)
 800128a:	f000 ff17 	bl	80020bc <HAL_ADC_GetValue>
 800128e:	4603      	mov	r3, r0
 8001290:	461a      	mov	r2, r3
 8001292:	4b97      	ldr	r3, [pc, #604]	@ (80014f0 <main+0x2a0>)
 8001294:	601a      	str	r2, [r3, #0]
	  	  HAL_ADC_Stop(&hadc1);
 8001296:	4895      	ldr	r0, [pc, #596]	@ (80014ec <main+0x29c>)
 8001298:	f000 fe52 	bl	8001f40 <HAL_ADC_Stop>

	  	  select_ADC_channel3();
 800129c:	f7ff fef0 	bl	8001080 <select_ADC_channel3>
	  	  HAL_ADC_Start(&hadc1);
 80012a0:	4892      	ldr	r0, [pc, #584]	@ (80014ec <main+0x29c>)
 80012a2:	f000 fd7b 	bl	8001d9c <HAL_ADC_Start>
	  	  HAL_ADC_PollForConversion(&hadc1, 1000);
 80012a6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80012aa:	4890      	ldr	r0, [pc, #576]	@ (80014ec <main+0x29c>)
 80012ac:	f000 fe7b 	bl	8001fa6 <HAL_ADC_PollForConversion>
	  	  ldr2 = HAL_ADC_GetValue(&hadc1);
 80012b0:	488e      	ldr	r0, [pc, #568]	@ (80014ec <main+0x29c>)
 80012b2:	f000 ff03 	bl	80020bc <HAL_ADC_GetValue>
 80012b6:	4603      	mov	r3, r0
 80012b8:	461a      	mov	r2, r3
 80012ba:	4b8e      	ldr	r3, [pc, #568]	@ (80014f4 <main+0x2a4>)
 80012bc:	601a      	str	r2, [r3, #0]
	  	  HAL_ADC_Stop(&hadc1);
 80012be:	488b      	ldr	r0, [pc, #556]	@ (80014ec <main+0x29c>)
 80012c0:	f000 fe3e 	bl	8001f40 <HAL_ADC_Stop>

	  	  select_channel4();
 80012c4:	f7ff fefa 	bl	80010bc <select_channel4>
	  	  HAL_ADC_Start(&hadc1);
 80012c8:	4888      	ldr	r0, [pc, #544]	@ (80014ec <main+0x29c>)
 80012ca:	f000 fd67 	bl	8001d9c <HAL_ADC_Start>
	  	  HAL_ADC_PollForConversion(&hadc1, 1000);
 80012ce:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80012d2:	4886      	ldr	r0, [pc, #536]	@ (80014ec <main+0x29c>)
 80012d4:	f000 fe67 	bl	8001fa6 <HAL_ADC_PollForConversion>
	  	  voltage = HAL_ADC_GetValue(&hadc1);
 80012d8:	4884      	ldr	r0, [pc, #528]	@ (80014ec <main+0x29c>)
 80012da:	f000 feef 	bl	80020bc <HAL_ADC_GetValue>
 80012de:	4603      	mov	r3, r0
 80012e0:	461a      	mov	r2, r3
 80012e2:	4b85      	ldr	r3, [pc, #532]	@ (80014f8 <main+0x2a8>)
 80012e4:	601a      	str	r2, [r3, #0]
	  	  HAL_ADC_Stop(&hadc1);
 80012e6:	4881      	ldr	r0, [pc, #516]	@ (80014ec <main+0x29c>)
 80012e8:	f000 fe2a 	bl	8001f40 <HAL_ADC_Stop>

	  	  select_channel5();
 80012ec:	f7ff ff04 	bl	80010f8 <select_channel5>
	  	  HAL_ADC_Start(&hadc1);
 80012f0:	487e      	ldr	r0, [pc, #504]	@ (80014ec <main+0x29c>)
 80012f2:	f000 fd53 	bl	8001d9c <HAL_ADC_Start>
	  	  HAL_ADC_PollForConversion(&hadc1, 1000);
 80012f6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80012fa:	487c      	ldr	r0, [pc, #496]	@ (80014ec <main+0x29c>)
 80012fc:	f000 fe53 	bl	8001fa6 <HAL_ADC_PollForConversion>
	  	  current = HAL_ADC_GetValue(&hadc1);
 8001300:	487a      	ldr	r0, [pc, #488]	@ (80014ec <main+0x29c>)
 8001302:	f000 fedb 	bl	80020bc <HAL_ADC_GetValue>
 8001306:	4603      	mov	r3, r0
 8001308:	461a      	mov	r2, r3
 800130a:	4b7c      	ldr	r3, [pc, #496]	@ (80014fc <main+0x2ac>)
 800130c:	601a      	str	r2, [r3, #0]
	  	  HAL_ADC_Stop(&hadc1);
 800130e:	4877      	ldr	r0, [pc, #476]	@ (80014ec <main+0x29c>)
 8001310:	f000 fe16 	bl	8001f40 <HAL_ADC_Stop>




//	  	  float cur_power=voltage*current;
	  	 actual_voltage = (voltage / (float)ADC_MAX) * V_REF*  2.5;
 8001314:	4b78      	ldr	r3, [pc, #480]	@ (80014f8 <main+0x2a8>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	ee07 3a90 	vmov	s15, r3
 800131c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001320:	ed9f 7a77 	vldr	s14, [pc, #476]	@ 8001500 <main+0x2b0>
 8001324:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001328:	ee16 0a90 	vmov	r0, s13
 800132c:	f7ff f904 	bl	8000538 <__aeabi_f2d>
 8001330:	a369      	add	r3, pc, #420	@ (adr r3, 80014d8 <main+0x288>)
 8001332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001336:	f7ff f957 	bl	80005e8 <__aeabi_dmul>
 800133a:	4602      	mov	r2, r0
 800133c:	460b      	mov	r3, r1
 800133e:	4610      	mov	r0, r2
 8001340:	4619      	mov	r1, r3
 8001342:	f04f 0200 	mov.w	r2, #0
 8001346:	4b6f      	ldr	r3, [pc, #444]	@ (8001504 <main+0x2b4>)
 8001348:	f7ff f94e 	bl	80005e8 <__aeabi_dmul>
 800134c:	4602      	mov	r2, r0
 800134e:	460b      	mov	r3, r1
 8001350:	4610      	mov	r0, r2
 8001352:	4619      	mov	r1, r3
 8001354:	f7ff fbe2 	bl	8000b1c <__aeabi_d2f>
 8001358:	4603      	mov	r3, r0
 800135a:	4a6b      	ldr	r2, [pc, #428]	@ (8001508 <main+0x2b8>)
 800135c:	6013      	str	r3, [r2, #0]
	  	  float curr = (current / (float)ADC_MAX) * V_REF;
 800135e:	4b67      	ldr	r3, [pc, #412]	@ (80014fc <main+0x2ac>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	ee07 3a90 	vmov	s15, r3
 8001366:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800136a:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 8001500 <main+0x2b0>
 800136e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001372:	ee16 0a90 	vmov	r0, s13
 8001376:	f7ff f8df 	bl	8000538 <__aeabi_f2d>
 800137a:	a357      	add	r3, pc, #348	@ (adr r3, 80014d8 <main+0x288>)
 800137c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001380:	f7ff f932 	bl	80005e8 <__aeabi_dmul>
 8001384:	4602      	mov	r2, r0
 8001386:	460b      	mov	r3, r1
 8001388:	4610      	mov	r0, r2
 800138a:	4619      	mov	r1, r3
 800138c:	f7ff fbc6 	bl	8000b1c <__aeabi_d2f>
 8001390:	4603      	mov	r3, r0
 8001392:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  	     actual_current = (curr - 2.5) /0.185;
 8001394:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001396:	f7ff f8cf 	bl	8000538 <__aeabi_f2d>
 800139a:	f04f 0200 	mov.w	r2, #0
 800139e:	4b59      	ldr	r3, [pc, #356]	@ (8001504 <main+0x2b4>)
 80013a0:	f7fe ff6a 	bl	8000278 <__aeabi_dsub>
 80013a4:	4602      	mov	r2, r0
 80013a6:	460b      	mov	r3, r1
 80013a8:	4610      	mov	r0, r2
 80013aa:	4619      	mov	r1, r3
 80013ac:	a34c      	add	r3, pc, #304	@ (adr r3, 80014e0 <main+0x290>)
 80013ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b2:	f7ff fa43 	bl	800083c <__aeabi_ddiv>
 80013b6:	4602      	mov	r2, r0
 80013b8:	460b      	mov	r3, r1
 80013ba:	4610      	mov	r0, r2
 80013bc:	4619      	mov	r1, r3
 80013be:	f7ff fbad 	bl	8000b1c <__aeabi_d2f>
 80013c2:	4603      	mov	r3, r0
 80013c4:	4a51      	ldr	r2, [pc, #324]	@ (800150c <main+0x2bc>)
 80013c6:	6013      	str	r3, [r2, #0]
	  	     cur_power = actual_voltage * actual_current;
 80013c8:	4b4f      	ldr	r3, [pc, #316]	@ (8001508 <main+0x2b8>)
 80013ca:	ed93 7a00 	vldr	s14, [r3]
 80013ce:	4b4f      	ldr	r3, [pc, #316]	@ (800150c <main+0x2bc>)
 80013d0:	edd3 7a00 	vldr	s15, [r3]
 80013d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013d8:	4b4d      	ldr	r3, [pc, #308]	@ (8001510 <main+0x2c0>)
 80013da:	edc3 7a00 	vstr	s15, [r3]
//	  	   char volt_char[10];
//	  	   sprintf(volt_char, "%.2f", actual_voltage);  // FIXED
//
//	  	   LCD_SendString("Voltage: ");
//	  	   LCD_SendString(volt_char);
	  	   LCD_Clear();
 80013de:	f7ff fdd8 	bl	8000f92 <LCD_Clear>
	  	   LCD_SetCursor(0, 0);
 80013e2:	2100      	movs	r1, #0
 80013e4:	2000      	movs	r0, #0
 80013e6:	f7ff fdde 	bl	8000fa6 <LCD_SetCursor>

	  	   char power_char[10];
	  	   int power_int = (int) cur_power;               // Integer part
 80013ea:	4b49      	ldr	r3, [pc, #292]	@ (8001510 <main+0x2c0>)
 80013ec:	edd3 7a00 	vldr	s15, [r3]
 80013f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013f4:	ee17 3a90 	vmov	r3, s15
 80013f8:	62bb      	str	r3, [r7, #40]	@ 0x28
	  	   int power_dec = (int)((cur_power - power_int) * 100); // Decimal part
 80013fa:	4b45      	ldr	r3, [pc, #276]	@ (8001510 <main+0x2c0>)
 80013fc:	ed93 7a00 	vldr	s14, [r3]
 8001400:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001402:	ee07 3a90 	vmov	s15, r3
 8001406:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800140a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800140e:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 8001514 <main+0x2c4>
 8001412:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001416:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800141a:	ee17 3a90 	vmov	r3, s15
 800141e:	627b      	str	r3, [r7, #36]	@ 0x24

	  	   sprintf(power_char, "%d.%02d", power_int, abs(power_dec));  // Manually format float
 8001420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001422:	2b00      	cmp	r3, #0
 8001424:	bfb8      	it	lt
 8001426:	425b      	neglt	r3, r3
 8001428:	f107 0010 	add.w	r0, r7, #16
 800142c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800142e:	493a      	ldr	r1, [pc, #232]	@ (8001518 <main+0x2c8>)
 8001430:	f003 fab8 	bl	80049a4 <siprintf>
	  	   LCD_SendString("Power: ");
 8001434:	4839      	ldr	r0, [pc, #228]	@ (800151c <main+0x2cc>)
 8001436:	f7ff fd97 	bl	8000f68 <LCD_SendString>
	  	   LCD_SendString(power_char);
 800143a:	f107 0310 	add.w	r3, r7, #16
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff fd92 	bl	8000f68 <LCD_SendString>
	  	   LCD_SendString("W");
 8001444:	4836      	ldr	r0, [pc, #216]	@ (8001520 <main+0x2d0>)
 8001446:	f7ff fd8f 	bl	8000f68 <LCD_SendString>


	  	   LCD_SetCursor(1, 0);
 800144a:	2100      	movs	r1, #0
 800144c:	2001      	movs	r0, #1
 800144e:	f7ff fdaa 	bl	8000fa6 <LCD_SetCursor>

	  	   char volt_char[10];
	  	   int volt_int = (int) actual_voltage;
 8001452:	4b2d      	ldr	r3, [pc, #180]	@ (8001508 <main+0x2b8>)
 8001454:	edd3 7a00 	vldr	s15, [r3]
 8001458:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800145c:	ee17 3a90 	vmov	r3, s15
 8001460:	623b      	str	r3, [r7, #32]
	  	   int volt_dec = (int)((actual_voltage - volt_int) * 100);
 8001462:	4b29      	ldr	r3, [pc, #164]	@ (8001508 <main+0x2b8>)
 8001464:	ed93 7a00 	vldr	s14, [r3]
 8001468:	6a3b      	ldr	r3, [r7, #32]
 800146a:	ee07 3a90 	vmov	s15, r3
 800146e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001472:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001476:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8001514 <main+0x2c4>
 800147a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800147e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001482:	ee17 3a90 	vmov	r3, s15
 8001486:	61fb      	str	r3, [r7, #28]

	  	   sprintf(volt_char, "%d.%02d", volt_int, abs(volt_dec));
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	2b00      	cmp	r3, #0
 800148c:	bfb8      	it	lt
 800148e:	425b      	neglt	r3, r3
 8001490:	1d38      	adds	r0, r7, #4
 8001492:	6a3a      	ldr	r2, [r7, #32]
 8001494:	4920      	ldr	r1, [pc, #128]	@ (8001518 <main+0x2c8>)
 8001496:	f003 fa85 	bl	80049a4 <siprintf>
	  	   LCD_SendString("Voltage: ");
 800149a:	4822      	ldr	r0, [pc, #136]	@ (8001524 <main+0x2d4>)
 800149c:	f7ff fd64 	bl	8000f68 <LCD_SendString>
	  	   LCD_SendString(volt_char);
 80014a0:	1d3b      	adds	r3, r7, #4
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7ff fd60 	bl	8000f68 <LCD_SendString>
	  	   LCD_SendString("V");
 80014a8:	481f      	ldr	r0, [pc, #124]	@ (8001528 <main+0x2d8>)
 80014aa:	f7ff fd5d 	bl	8000f68 <LCD_SendString>





	  	  adjust_tilt(ldr1, ldr2,cur_power);
 80014ae:	4b10      	ldr	r3, [pc, #64]	@ (80014f0 <main+0x2a0>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a10      	ldr	r2, [pc, #64]	@ (80014f4 <main+0x2a4>)
 80014b4:	6812      	ldr	r2, [r2, #0]
 80014b6:	4916      	ldr	r1, [pc, #88]	@ (8001510 <main+0x2c0>)
 80014b8:	edd1 7a00 	vldr	s15, [r1]
 80014bc:	eeb0 0a67 	vmov.f32	s0, s15
 80014c0:	4611      	mov	r1, r2
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7ff fe7a 	bl	80011bc <adjust_tilt>

	  	  HAL_Delay(800);
 80014c8:	f44f 7048 	mov.w	r0, #800	@ 0x320
 80014cc:	f000 fbfe 	bl	8001ccc <HAL_Delay>
  {
 80014d0:	bf00      	nop
 80014d2:	e6cf      	b.n	8001274 <main+0x24>
 80014d4:	f3af 8000 	nop.w
 80014d8:	66666666 	.word	0x66666666
 80014dc:	400a6666 	.word	0x400a6666
 80014e0:	7ae147ae 	.word	0x7ae147ae
 80014e4:	3fc7ae14 	.word	0x3fc7ae14
 80014e8:	200000c4 	.word	0x200000c4
 80014ec:	2000007c 	.word	0x2000007c
 80014f0:	20000160 	.word	0x20000160
 80014f4:	20000164 	.word	0x20000164
 80014f8:	20000168 	.word	0x20000168
 80014fc:	2000016c 	.word	0x2000016c
 8001500:	457ff000 	.word	0x457ff000
 8001504:	40040000 	.word	0x40040000
 8001508:	20000180 	.word	0x20000180
 800150c:	2000017c 	.word	0x2000017c
 8001510:	20000178 	.word	0x20000178
 8001514:	42c80000 	.word	0x42c80000
 8001518:	080052fc 	.word	0x080052fc
 800151c:	08005304 	.word	0x08005304
 8001520:	0800530c 	.word	0x0800530c
 8001524:	08005310 	.word	0x08005310
 8001528:	0800531c 	.word	0x0800531c

0800152c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b094      	sub	sp, #80	@ 0x50
 8001530:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001532:	f107 0320 	add.w	r3, r7, #32
 8001536:	2230      	movs	r2, #48	@ 0x30
 8001538:	2100      	movs	r1, #0
 800153a:	4618      	mov	r0, r3
 800153c:	f003 fa52 	bl	80049e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001540:	f107 030c 	add.w	r3, r7, #12
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	605a      	str	r2, [r3, #4]
 800154a:	609a      	str	r2, [r3, #8]
 800154c:	60da      	str	r2, [r3, #12]
 800154e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001550:	2300      	movs	r3, #0
 8001552:	60bb      	str	r3, [r7, #8]
 8001554:	4b22      	ldr	r3, [pc, #136]	@ (80015e0 <SystemClock_Config+0xb4>)
 8001556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001558:	4a21      	ldr	r2, [pc, #132]	@ (80015e0 <SystemClock_Config+0xb4>)
 800155a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800155e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001560:	4b1f      	ldr	r3, [pc, #124]	@ (80015e0 <SystemClock_Config+0xb4>)
 8001562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001564:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001568:	60bb      	str	r3, [r7, #8]
 800156a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800156c:	2300      	movs	r3, #0
 800156e:	607b      	str	r3, [r7, #4]
 8001570:	4b1c      	ldr	r3, [pc, #112]	@ (80015e4 <SystemClock_Config+0xb8>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a1b      	ldr	r2, [pc, #108]	@ (80015e4 <SystemClock_Config+0xb8>)
 8001576:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800157a:	6013      	str	r3, [r2, #0]
 800157c:	4b19      	ldr	r3, [pc, #100]	@ (80015e4 <SystemClock_Config+0xb8>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001584:	607b      	str	r3, [r7, #4]
 8001586:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001588:	2302      	movs	r3, #2
 800158a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800158c:	2301      	movs	r3, #1
 800158e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001590:	2310      	movs	r3, #16
 8001592:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001594:	2300      	movs	r3, #0
 8001596:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001598:	f107 0320 	add.w	r3, r7, #32
 800159c:	4618      	mov	r0, r3
 800159e:	f001 fed9 	bl	8003354 <HAL_RCC_OscConfig>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <SystemClock_Config+0x80>
  {
    Error_Handler();
 80015a8:	f000 f966 	bl	8001878 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015ac:	230f      	movs	r3, #15
 80015ae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80015b0:	2300      	movs	r3, #0
 80015b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015b4:	2300      	movs	r3, #0
 80015b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015b8:	2300      	movs	r3, #0
 80015ba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015bc:	2300      	movs	r3, #0
 80015be:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80015c0:	f107 030c 	add.w	r3, r7, #12
 80015c4:	2100      	movs	r1, #0
 80015c6:	4618      	mov	r0, r3
 80015c8:	f002 f93c 	bl	8003844 <HAL_RCC_ClockConfig>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80015d2:	f000 f951 	bl	8001878 <Error_Handler>
  }
}
 80015d6:	bf00      	nop
 80015d8:	3750      	adds	r7, #80	@ 0x50
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	40023800 	.word	0x40023800
 80015e4:	40007000 	.word	0x40007000

080015e8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80015ee:	463b      	mov	r3, r7
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	605a      	str	r2, [r3, #4]
 80015f6:	609a      	str	r2, [r3, #8]
 80015f8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80015fa:	4b19      	ldr	r3, [pc, #100]	@ (8001660 <MX_ADC1_Init+0x78>)
 80015fc:	4a19      	ldr	r2, [pc, #100]	@ (8001664 <MX_ADC1_Init+0x7c>)
 80015fe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001600:	4b17      	ldr	r3, [pc, #92]	@ (8001660 <MX_ADC1_Init+0x78>)
 8001602:	2200      	movs	r2, #0
 8001604:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001606:	4b16      	ldr	r3, [pc, #88]	@ (8001660 <MX_ADC1_Init+0x78>)
 8001608:	2200      	movs	r2, #0
 800160a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800160c:	4b14      	ldr	r3, [pc, #80]	@ (8001660 <MX_ADC1_Init+0x78>)
 800160e:	2201      	movs	r2, #1
 8001610:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001612:	4b13      	ldr	r3, [pc, #76]	@ (8001660 <MX_ADC1_Init+0x78>)
 8001614:	2201      	movs	r2, #1
 8001616:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001618:	4b11      	ldr	r3, [pc, #68]	@ (8001660 <MX_ADC1_Init+0x78>)
 800161a:	2200      	movs	r2, #0
 800161c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001620:	4b0f      	ldr	r3, [pc, #60]	@ (8001660 <MX_ADC1_Init+0x78>)
 8001622:	2200      	movs	r2, #0
 8001624:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001626:	4b0e      	ldr	r3, [pc, #56]	@ (8001660 <MX_ADC1_Init+0x78>)
 8001628:	4a0f      	ldr	r2, [pc, #60]	@ (8001668 <MX_ADC1_Init+0x80>)
 800162a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800162c:	4b0c      	ldr	r3, [pc, #48]	@ (8001660 <MX_ADC1_Init+0x78>)
 800162e:	2200      	movs	r2, #0
 8001630:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8001632:	4b0b      	ldr	r3, [pc, #44]	@ (8001660 <MX_ADC1_Init+0x78>)
 8001634:	2204      	movs	r2, #4
 8001636:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001638:	4b09      	ldr	r3, [pc, #36]	@ (8001660 <MX_ADC1_Init+0x78>)
 800163a:	2200      	movs	r2, #0
 800163c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001640:	4b07      	ldr	r3, [pc, #28]	@ (8001660 <MX_ADC1_Init+0x78>)
 8001642:	2201      	movs	r2, #1
 8001644:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001646:	4806      	ldr	r0, [pc, #24]	@ (8001660 <MX_ADC1_Init+0x78>)
 8001648:	f000 fb64 	bl	8001d14 <HAL_ADC_Init>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001652:	f000 f911 	bl	8001878 <Error_Handler>
//  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001656:	bf00      	nop
 8001658:	3710      	adds	r7, #16
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	2000007c 	.word	0x2000007c
 8001664:	40012000 	.word	0x40012000
 8001668:	0f000001 	.word	0x0f000001

0800166c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001670:	4b12      	ldr	r3, [pc, #72]	@ (80016bc <MX_I2C1_Init+0x50>)
 8001672:	4a13      	ldr	r2, [pc, #76]	@ (80016c0 <MX_I2C1_Init+0x54>)
 8001674:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001676:	4b11      	ldr	r3, [pc, #68]	@ (80016bc <MX_I2C1_Init+0x50>)
 8001678:	4a12      	ldr	r2, [pc, #72]	@ (80016c4 <MX_I2C1_Init+0x58>)
 800167a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800167c:	4b0f      	ldr	r3, [pc, #60]	@ (80016bc <MX_I2C1_Init+0x50>)
 800167e:	2200      	movs	r2, #0
 8001680:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001682:	4b0e      	ldr	r3, [pc, #56]	@ (80016bc <MX_I2C1_Init+0x50>)
 8001684:	2200      	movs	r2, #0
 8001686:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001688:	4b0c      	ldr	r3, [pc, #48]	@ (80016bc <MX_I2C1_Init+0x50>)
 800168a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800168e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001690:	4b0a      	ldr	r3, [pc, #40]	@ (80016bc <MX_I2C1_Init+0x50>)
 8001692:	2200      	movs	r2, #0
 8001694:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001696:	4b09      	ldr	r3, [pc, #36]	@ (80016bc <MX_I2C1_Init+0x50>)
 8001698:	2200      	movs	r2, #0
 800169a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800169c:	4b07      	ldr	r3, [pc, #28]	@ (80016bc <MX_I2C1_Init+0x50>)
 800169e:	2200      	movs	r2, #0
 80016a0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016a2:	4b06      	ldr	r3, [pc, #24]	@ (80016bc <MX_I2C1_Init+0x50>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016a8:	4804      	ldr	r0, [pc, #16]	@ (80016bc <MX_I2C1_Init+0x50>)
 80016aa:	f001 f9b5 	bl	8002a18 <HAL_I2C_Init>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80016b4:	f000 f8e0 	bl	8001878 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016b8:	bf00      	nop
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	200000c4 	.word	0x200000c4
 80016c0:	40005400 	.word	0x40005400
 80016c4:	000186a0 	.word	0x000186a0

080016c8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b096      	sub	sp, #88	@ 0x58
 80016cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016ce:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80016d2:	2200      	movs	r2, #0
 80016d4:	601a      	str	r2, [r3, #0]
 80016d6:	605a      	str	r2, [r3, #4]
 80016d8:	609a      	str	r2, [r3, #8]
 80016da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016dc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80016e0:	2200      	movs	r2, #0
 80016e2:	601a      	str	r2, [r3, #0]
 80016e4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016ea:	2200      	movs	r2, #0
 80016ec:	601a      	str	r2, [r3, #0]
 80016ee:	605a      	str	r2, [r3, #4]
 80016f0:	609a      	str	r2, [r3, #8]
 80016f2:	60da      	str	r2, [r3, #12]
 80016f4:	611a      	str	r2, [r3, #16]
 80016f6:	615a      	str	r2, [r3, #20]
 80016f8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80016fa:	1d3b      	adds	r3, r7, #4
 80016fc:	2220      	movs	r2, #32
 80016fe:	2100      	movs	r1, #0
 8001700:	4618      	mov	r0, r3
 8001702:	f003 f96f 	bl	80049e4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001706:	4b3f      	ldr	r3, [pc, #252]	@ (8001804 <MX_TIM1_Init+0x13c>)
 8001708:	4a3f      	ldr	r2, [pc, #252]	@ (8001808 <MX_TIM1_Init+0x140>)
 800170a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15;
 800170c:	4b3d      	ldr	r3, [pc, #244]	@ (8001804 <MX_TIM1_Init+0x13c>)
 800170e:	220f      	movs	r2, #15
 8001710:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001712:	4b3c      	ldr	r3, [pc, #240]	@ (8001804 <MX_TIM1_Init+0x13c>)
 8001714:	2200      	movs	r2, #0
 8001716:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 8001718:	4b3a      	ldr	r3, [pc, #232]	@ (8001804 <MX_TIM1_Init+0x13c>)
 800171a:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800171e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001720:	4b38      	ldr	r3, [pc, #224]	@ (8001804 <MX_TIM1_Init+0x13c>)
 8001722:	2200      	movs	r2, #0
 8001724:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001726:	4b37      	ldr	r3, [pc, #220]	@ (8001804 <MX_TIM1_Init+0x13c>)
 8001728:	2200      	movs	r2, #0
 800172a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800172c:	4b35      	ldr	r3, [pc, #212]	@ (8001804 <MX_TIM1_Init+0x13c>)
 800172e:	2200      	movs	r2, #0
 8001730:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001732:	4834      	ldr	r0, [pc, #208]	@ (8001804 <MX_TIM1_Init+0x13c>)
 8001734:	f002 fa52 	bl	8003bdc <HAL_TIM_Base_Init>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800173e:	f000 f89b 	bl	8001878 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001742:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001746:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001748:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800174c:	4619      	mov	r1, r3
 800174e:	482d      	ldr	r0, [pc, #180]	@ (8001804 <MX_TIM1_Init+0x13c>)
 8001750:	f002 fc76 	bl	8004040 <HAL_TIM_ConfigClockSource>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800175a:	f000 f88d 	bl	8001878 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800175e:	4829      	ldr	r0, [pc, #164]	@ (8001804 <MX_TIM1_Init+0x13c>)
 8001760:	f002 fa8b 	bl	8003c7a <HAL_TIM_PWM_Init>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800176a:	f000 f885 	bl	8001878 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800176e:	2300      	movs	r3, #0
 8001770:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001772:	2300      	movs	r3, #0
 8001774:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001776:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800177a:	4619      	mov	r1, r3
 800177c:	4821      	ldr	r0, [pc, #132]	@ (8001804 <MX_TIM1_Init+0x13c>)
 800177e:	f003 f843 	bl	8004808 <HAL_TIMEx_MasterConfigSynchronization>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001788:	f000 f876 	bl	8001878 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800178c:	2360      	movs	r3, #96	@ 0x60
 800178e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 1500;
 8001790:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8001794:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001796:	2300      	movs	r3, #0
 8001798:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800179a:	2300      	movs	r3, #0
 800179c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800179e:	2300      	movs	r3, #0
 80017a0:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80017a2:	2300      	movs	r3, #0
 80017a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80017a6:	2300      	movs	r3, #0
 80017a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017ae:	2200      	movs	r2, #0
 80017b0:	4619      	mov	r1, r3
 80017b2:	4814      	ldr	r0, [pc, #80]	@ (8001804 <MX_TIM1_Init+0x13c>)
 80017b4:	f002 fb82 	bl	8003ebc <HAL_TIM_PWM_ConfigChannel>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 80017be:	f000 f85b 	bl	8001878 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80017c2:	2300      	movs	r3, #0
 80017c4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80017c6:	2300      	movs	r3, #0
 80017c8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80017ca:	2300      	movs	r3, #0
 80017cc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80017ce:	2300      	movs	r3, #0
 80017d0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80017d2:	2300      	movs	r3, #0
 80017d4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80017d6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017da:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80017dc:	2300      	movs	r3, #0
 80017de:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80017e0:	1d3b      	adds	r3, r7, #4
 80017e2:	4619      	mov	r1, r3
 80017e4:	4807      	ldr	r0, [pc, #28]	@ (8001804 <MX_TIM1_Init+0x13c>)
 80017e6:	f003 f88b 	bl	8004900 <HAL_TIMEx_ConfigBreakDeadTime>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 80017f0:	f000 f842 	bl	8001878 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80017f4:	4803      	ldr	r0, [pc, #12]	@ (8001804 <MX_TIM1_Init+0x13c>)
 80017f6:	f000 f91b 	bl	8001a30 <HAL_TIM_MspPostInit>

}
 80017fa:	bf00      	nop
 80017fc:	3758      	adds	r7, #88	@ 0x58
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	20000118 	.word	0x20000118
 8001808:	40010000 	.word	0x40010000

0800180c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800180c:	b480      	push	{r7}
 800180e:	b085      	sub	sp, #20
 8001810:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001812:	2300      	movs	r3, #0
 8001814:	60fb      	str	r3, [r7, #12]
 8001816:	4b17      	ldr	r3, [pc, #92]	@ (8001874 <MX_GPIO_Init+0x68>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800181a:	4a16      	ldr	r2, [pc, #88]	@ (8001874 <MX_GPIO_Init+0x68>)
 800181c:	f043 0301 	orr.w	r3, r3, #1
 8001820:	6313      	str	r3, [r2, #48]	@ 0x30
 8001822:	4b14      	ldr	r3, [pc, #80]	@ (8001874 <MX_GPIO_Init+0x68>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001826:	f003 0301 	and.w	r3, r3, #1
 800182a:	60fb      	str	r3, [r7, #12]
 800182c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800182e:	2300      	movs	r3, #0
 8001830:	60bb      	str	r3, [r7, #8]
 8001832:	4b10      	ldr	r3, [pc, #64]	@ (8001874 <MX_GPIO_Init+0x68>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001836:	4a0f      	ldr	r2, [pc, #60]	@ (8001874 <MX_GPIO_Init+0x68>)
 8001838:	f043 0310 	orr.w	r3, r3, #16
 800183c:	6313      	str	r3, [r2, #48]	@ 0x30
 800183e:	4b0d      	ldr	r3, [pc, #52]	@ (8001874 <MX_GPIO_Init+0x68>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001842:	f003 0310 	and.w	r3, r3, #16
 8001846:	60bb      	str	r3, [r7, #8]
 8001848:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800184a:	2300      	movs	r3, #0
 800184c:	607b      	str	r3, [r7, #4]
 800184e:	4b09      	ldr	r3, [pc, #36]	@ (8001874 <MX_GPIO_Init+0x68>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001852:	4a08      	ldr	r2, [pc, #32]	@ (8001874 <MX_GPIO_Init+0x68>)
 8001854:	f043 0302 	orr.w	r3, r3, #2
 8001858:	6313      	str	r3, [r2, #48]	@ 0x30
 800185a:	4b06      	ldr	r3, [pc, #24]	@ (8001874 <MX_GPIO_Init+0x68>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800185e:	f003 0302 	and.w	r3, r3, #2
 8001862:	607b      	str	r3, [r7, #4]
 8001864:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001866:	bf00      	nop
 8001868:	3714      	adds	r7, #20
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	40023800 	.word	0x40023800

08001878 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800187c:	b672      	cpsid	i
}
 800187e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001880:	bf00      	nop
 8001882:	e7fd      	b.n	8001880 <Error_Handler+0x8>

08001884 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800188a:	2300      	movs	r3, #0
 800188c:	607b      	str	r3, [r7, #4]
 800188e:	4b10      	ldr	r3, [pc, #64]	@ (80018d0 <HAL_MspInit+0x4c>)
 8001890:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001892:	4a0f      	ldr	r2, [pc, #60]	@ (80018d0 <HAL_MspInit+0x4c>)
 8001894:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001898:	6453      	str	r3, [r2, #68]	@ 0x44
 800189a:	4b0d      	ldr	r3, [pc, #52]	@ (80018d0 <HAL_MspInit+0x4c>)
 800189c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800189e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018a2:	607b      	str	r3, [r7, #4]
 80018a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018a6:	2300      	movs	r3, #0
 80018a8:	603b      	str	r3, [r7, #0]
 80018aa:	4b09      	ldr	r3, [pc, #36]	@ (80018d0 <HAL_MspInit+0x4c>)
 80018ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ae:	4a08      	ldr	r2, [pc, #32]	@ (80018d0 <HAL_MspInit+0x4c>)
 80018b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80018b6:	4b06      	ldr	r3, [pc, #24]	@ (80018d0 <HAL_MspInit+0x4c>)
 80018b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018be:	603b      	str	r3, [r7, #0]
 80018c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018c2:	bf00      	nop
 80018c4:	370c      	adds	r7, #12
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	40023800 	.word	0x40023800

080018d4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b08a      	sub	sp, #40	@ 0x28
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018dc:	f107 0314 	add.w	r3, r7, #20
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]
 80018e4:	605a      	str	r2, [r3, #4]
 80018e6:	609a      	str	r2, [r3, #8]
 80018e8:	60da      	str	r2, [r3, #12]
 80018ea:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a17      	ldr	r2, [pc, #92]	@ (8001950 <HAL_ADC_MspInit+0x7c>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d127      	bne.n	8001946 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80018f6:	2300      	movs	r3, #0
 80018f8:	613b      	str	r3, [r7, #16]
 80018fa:	4b16      	ldr	r3, [pc, #88]	@ (8001954 <HAL_ADC_MspInit+0x80>)
 80018fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018fe:	4a15      	ldr	r2, [pc, #84]	@ (8001954 <HAL_ADC_MspInit+0x80>)
 8001900:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001904:	6453      	str	r3, [r2, #68]	@ 0x44
 8001906:	4b13      	ldr	r3, [pc, #76]	@ (8001954 <HAL_ADC_MspInit+0x80>)
 8001908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800190a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800190e:	613b      	str	r3, [r7, #16]
 8001910:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001912:	2300      	movs	r3, #0
 8001914:	60fb      	str	r3, [r7, #12]
 8001916:	4b0f      	ldr	r3, [pc, #60]	@ (8001954 <HAL_ADC_MspInit+0x80>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800191a:	4a0e      	ldr	r2, [pc, #56]	@ (8001954 <HAL_ADC_MspInit+0x80>)
 800191c:	f043 0301 	orr.w	r3, r3, #1
 8001920:	6313      	str	r3, [r2, #48]	@ 0x30
 8001922:	4b0c      	ldr	r3, [pc, #48]	@ (8001954 <HAL_ADC_MspInit+0x80>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001926:	f003 0301 	and.w	r3, r3, #1
 800192a:	60fb      	str	r3, [r7, #12]
 800192c:	68fb      	ldr	r3, [r7, #12]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800192e:	233c      	movs	r3, #60	@ 0x3c
 8001930:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001932:	2303      	movs	r3, #3
 8001934:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001936:	2300      	movs	r3, #0
 8001938:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800193a:	f107 0314 	add.w	r3, r7, #20
 800193e:	4619      	mov	r1, r3
 8001940:	4805      	ldr	r0, [pc, #20]	@ (8001958 <HAL_ADC_MspInit+0x84>)
 8001942:	f000 fecd 	bl	80026e0 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001946:	bf00      	nop
 8001948:	3728      	adds	r7, #40	@ 0x28
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	40012000 	.word	0x40012000
 8001954:	40023800 	.word	0x40023800
 8001958:	40020000 	.word	0x40020000

0800195c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b08a      	sub	sp, #40	@ 0x28
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001964:	f107 0314 	add.w	r3, r7, #20
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]
 800196c:	605a      	str	r2, [r3, #4]
 800196e:	609a      	str	r2, [r3, #8]
 8001970:	60da      	str	r2, [r3, #12]
 8001972:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a19      	ldr	r2, [pc, #100]	@ (80019e0 <HAL_I2C_MspInit+0x84>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d12b      	bne.n	80019d6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800197e:	2300      	movs	r3, #0
 8001980:	613b      	str	r3, [r7, #16]
 8001982:	4b18      	ldr	r3, [pc, #96]	@ (80019e4 <HAL_I2C_MspInit+0x88>)
 8001984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001986:	4a17      	ldr	r2, [pc, #92]	@ (80019e4 <HAL_I2C_MspInit+0x88>)
 8001988:	f043 0302 	orr.w	r3, r3, #2
 800198c:	6313      	str	r3, [r2, #48]	@ 0x30
 800198e:	4b15      	ldr	r3, [pc, #84]	@ (80019e4 <HAL_I2C_MspInit+0x88>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001992:	f003 0302 	and.w	r3, r3, #2
 8001996:	613b      	str	r3, [r7, #16]
 8001998:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800199a:	23c0      	movs	r3, #192	@ 0xc0
 800199c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800199e:	2312      	movs	r3, #18
 80019a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a2:	2300      	movs	r3, #0
 80019a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019a6:	2303      	movs	r3, #3
 80019a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80019aa:	2304      	movs	r3, #4
 80019ac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ae:	f107 0314 	add.w	r3, r7, #20
 80019b2:	4619      	mov	r1, r3
 80019b4:	480c      	ldr	r0, [pc, #48]	@ (80019e8 <HAL_I2C_MspInit+0x8c>)
 80019b6:	f000 fe93 	bl	80026e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019ba:	2300      	movs	r3, #0
 80019bc:	60fb      	str	r3, [r7, #12]
 80019be:	4b09      	ldr	r3, [pc, #36]	@ (80019e4 <HAL_I2C_MspInit+0x88>)
 80019c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c2:	4a08      	ldr	r2, [pc, #32]	@ (80019e4 <HAL_I2C_MspInit+0x88>)
 80019c4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80019c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80019ca:	4b06      	ldr	r3, [pc, #24]	@ (80019e4 <HAL_I2C_MspInit+0x88>)
 80019cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019d2:	60fb      	str	r3, [r7, #12]
 80019d4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80019d6:	bf00      	nop
 80019d8:	3728      	adds	r7, #40	@ 0x28
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	40005400 	.word	0x40005400
 80019e4:	40023800 	.word	0x40023800
 80019e8:	40020400 	.word	0x40020400

080019ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b085      	sub	sp, #20
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a0b      	ldr	r2, [pc, #44]	@ (8001a28 <HAL_TIM_Base_MspInit+0x3c>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d10d      	bne.n	8001a1a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80019fe:	2300      	movs	r3, #0
 8001a00:	60fb      	str	r3, [r7, #12]
 8001a02:	4b0a      	ldr	r3, [pc, #40]	@ (8001a2c <HAL_TIM_Base_MspInit+0x40>)
 8001a04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a06:	4a09      	ldr	r2, [pc, #36]	@ (8001a2c <HAL_TIM_Base_MspInit+0x40>)
 8001a08:	f043 0301 	orr.w	r3, r3, #1
 8001a0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a0e:	4b07      	ldr	r3, [pc, #28]	@ (8001a2c <HAL_TIM_Base_MspInit+0x40>)
 8001a10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a12:	f003 0301 	and.w	r3, r3, #1
 8001a16:	60fb      	str	r3, [r7, #12]
 8001a18:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001a1a:	bf00      	nop
 8001a1c:	3714      	adds	r7, #20
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	40010000 	.word	0x40010000
 8001a2c:	40023800 	.word	0x40023800

08001a30 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b088      	sub	sp, #32
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a38:	f107 030c 	add.w	r3, r7, #12
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	605a      	str	r2, [r3, #4]
 8001a42:	609a      	str	r2, [r3, #8]
 8001a44:	60da      	str	r2, [r3, #12]
 8001a46:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a12      	ldr	r2, [pc, #72]	@ (8001a98 <HAL_TIM_MspPostInit+0x68>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d11e      	bne.n	8001a90 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a52:	2300      	movs	r3, #0
 8001a54:	60bb      	str	r3, [r7, #8]
 8001a56:	4b11      	ldr	r3, [pc, #68]	@ (8001a9c <HAL_TIM_MspPostInit+0x6c>)
 8001a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a5a:	4a10      	ldr	r2, [pc, #64]	@ (8001a9c <HAL_TIM_MspPostInit+0x6c>)
 8001a5c:	f043 0310 	orr.w	r3, r3, #16
 8001a60:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a62:	4b0e      	ldr	r3, [pc, #56]	@ (8001a9c <HAL_TIM_MspPostInit+0x6c>)
 8001a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a66:	f003 0310 	and.w	r3, r3, #16
 8001a6a:	60bb      	str	r3, [r7, #8]
 8001a6c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001a6e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a72:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a74:	2302      	movs	r3, #2
 8001a76:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001a80:	2301      	movs	r3, #1
 8001a82:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a84:	f107 030c 	add.w	r3, r7, #12
 8001a88:	4619      	mov	r1, r3
 8001a8a:	4805      	ldr	r0, [pc, #20]	@ (8001aa0 <HAL_TIM_MspPostInit+0x70>)
 8001a8c:	f000 fe28 	bl	80026e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001a90:	bf00      	nop
 8001a92:	3720      	adds	r7, #32
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	40010000 	.word	0x40010000
 8001a9c:	40023800 	.word	0x40023800
 8001aa0:	40021000 	.word	0x40021000

08001aa4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001aa8:	bf00      	nop
 8001aaa:	e7fd      	b.n	8001aa8 <NMI_Handler+0x4>

08001aac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ab0:	bf00      	nop
 8001ab2:	e7fd      	b.n	8001ab0 <HardFault_Handler+0x4>

08001ab4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ab8:	bf00      	nop
 8001aba:	e7fd      	b.n	8001ab8 <MemManage_Handler+0x4>

08001abc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ac0:	bf00      	nop
 8001ac2:	e7fd      	b.n	8001ac0 <BusFault_Handler+0x4>

08001ac4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ac8:	bf00      	nop
 8001aca:	e7fd      	b.n	8001ac8 <UsageFault_Handler+0x4>

08001acc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ad0:	bf00      	nop
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr

08001ada <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ada:	b480      	push	{r7}
 8001adc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ade:	bf00      	nop
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001aec:	bf00      	nop
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr

08001af6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001af6:	b580      	push	{r7, lr}
 8001af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001afa:	f000 f8c7 	bl	8001c8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001afe:	bf00      	nop
 8001b00:	bd80      	pop	{r7, pc}
	...

08001b04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b086      	sub	sp, #24
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b0c:	4a14      	ldr	r2, [pc, #80]	@ (8001b60 <_sbrk+0x5c>)
 8001b0e:	4b15      	ldr	r3, [pc, #84]	@ (8001b64 <_sbrk+0x60>)
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b18:	4b13      	ldr	r3, [pc, #76]	@ (8001b68 <_sbrk+0x64>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d102      	bne.n	8001b26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b20:	4b11      	ldr	r3, [pc, #68]	@ (8001b68 <_sbrk+0x64>)
 8001b22:	4a12      	ldr	r2, [pc, #72]	@ (8001b6c <_sbrk+0x68>)
 8001b24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b26:	4b10      	ldr	r3, [pc, #64]	@ (8001b68 <_sbrk+0x64>)
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4413      	add	r3, r2
 8001b2e:	693a      	ldr	r2, [r7, #16]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d207      	bcs.n	8001b44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b34:	f002 ff5e 	bl	80049f4 <__errno>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	220c      	movs	r2, #12
 8001b3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b42:	e009      	b.n	8001b58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b44:	4b08      	ldr	r3, [pc, #32]	@ (8001b68 <_sbrk+0x64>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b4a:	4b07      	ldr	r3, [pc, #28]	@ (8001b68 <_sbrk+0x64>)
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4413      	add	r3, r2
 8001b52:	4a05      	ldr	r2, [pc, #20]	@ (8001b68 <_sbrk+0x64>)
 8001b54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b56:	68fb      	ldr	r3, [r7, #12]
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3718      	adds	r7, #24
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	20020000 	.word	0x20020000
 8001b64:	00000400 	.word	0x00000400
 8001b68:	20000184 	.word	0x20000184
 8001b6c:	200002d8 	.word	0x200002d8

08001b70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b74:	4b06      	ldr	r3, [pc, #24]	@ (8001b90 <SystemInit+0x20>)
 8001b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b7a:	4a05      	ldr	r2, [pc, #20]	@ (8001b90 <SystemInit+0x20>)
 8001b7c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b80:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b84:	bf00      	nop
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	e000ed00 	.word	0xe000ed00

08001b94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001b94:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001bcc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001b98:	f7ff ffea 	bl	8001b70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b9c:	480c      	ldr	r0, [pc, #48]	@ (8001bd0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b9e:	490d      	ldr	r1, [pc, #52]	@ (8001bd4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ba0:	4a0d      	ldr	r2, [pc, #52]	@ (8001bd8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ba2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ba4:	e002      	b.n	8001bac <LoopCopyDataInit>

08001ba6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ba6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ba8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001baa:	3304      	adds	r3, #4

08001bac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bb0:	d3f9      	bcc.n	8001ba6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bb2:	4a0a      	ldr	r2, [pc, #40]	@ (8001bdc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001bb4:	4c0a      	ldr	r4, [pc, #40]	@ (8001be0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001bb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bb8:	e001      	b.n	8001bbe <LoopFillZerobss>

08001bba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bbc:	3204      	adds	r2, #4

08001bbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bc0:	d3fb      	bcc.n	8001bba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bc2:	f002 ff1d 	bl	8004a00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bc6:	f7ff fb43 	bl	8001250 <main>
  bx  lr    
 8001bca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001bcc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001bd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bd4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001bd8:	0800537c 	.word	0x0800537c
  ldr r2, =_sbss
 8001bdc:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001be0:	200002d4 	.word	0x200002d4

08001be4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001be4:	e7fe      	b.n	8001be4 <ADC_IRQHandler>
	...

08001be8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bec:	4b0e      	ldr	r3, [pc, #56]	@ (8001c28 <HAL_Init+0x40>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a0d      	ldr	r2, [pc, #52]	@ (8001c28 <HAL_Init+0x40>)
 8001bf2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001bf6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bf8:	4b0b      	ldr	r3, [pc, #44]	@ (8001c28 <HAL_Init+0x40>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a0a      	ldr	r2, [pc, #40]	@ (8001c28 <HAL_Init+0x40>)
 8001bfe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c04:	4b08      	ldr	r3, [pc, #32]	@ (8001c28 <HAL_Init+0x40>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a07      	ldr	r2, [pc, #28]	@ (8001c28 <HAL_Init+0x40>)
 8001c0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c10:	2003      	movs	r0, #3
 8001c12:	f000 fd31 	bl	8002678 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c16:	200f      	movs	r0, #15
 8001c18:	f000 f808 	bl	8001c2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c1c:	f7ff fe32 	bl	8001884 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c20:	2300      	movs	r3, #0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	40023c00 	.word	0x40023c00

08001c2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c34:	4b12      	ldr	r3, [pc, #72]	@ (8001c80 <HAL_InitTick+0x54>)
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	4b12      	ldr	r3, [pc, #72]	@ (8001c84 <HAL_InitTick+0x58>)
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c42:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f000 fd3b 	bl	80026c6 <HAL_SYSTICK_Config>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e00e      	b.n	8001c78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2b0f      	cmp	r3, #15
 8001c5e:	d80a      	bhi.n	8001c76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c60:	2200      	movs	r2, #0
 8001c62:	6879      	ldr	r1, [r7, #4]
 8001c64:	f04f 30ff 	mov.w	r0, #4294967295
 8001c68:	f000 fd11 	bl	800268e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c6c:	4a06      	ldr	r2, [pc, #24]	@ (8001c88 <HAL_InitTick+0x5c>)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c72:	2300      	movs	r3, #0
 8001c74:	e000      	b.n	8001c78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3708      	adds	r7, #8
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	20000000 	.word	0x20000000
 8001c84:	20000008 	.word	0x20000008
 8001c88:	20000004 	.word	0x20000004

08001c8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c90:	4b06      	ldr	r3, [pc, #24]	@ (8001cac <HAL_IncTick+0x20>)
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	461a      	mov	r2, r3
 8001c96:	4b06      	ldr	r3, [pc, #24]	@ (8001cb0 <HAL_IncTick+0x24>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4413      	add	r3, r2
 8001c9c:	4a04      	ldr	r2, [pc, #16]	@ (8001cb0 <HAL_IncTick+0x24>)
 8001c9e:	6013      	str	r3, [r2, #0]
}
 8001ca0:	bf00      	nop
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	20000008 	.word	0x20000008
 8001cb0:	20000188 	.word	0x20000188

08001cb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  return uwTick;
 8001cb8:	4b03      	ldr	r3, [pc, #12]	@ (8001cc8 <HAL_GetTick+0x14>)
 8001cba:	681b      	ldr	r3, [r3, #0]
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	20000188 	.word	0x20000188

08001ccc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cd4:	f7ff ffee 	bl	8001cb4 <HAL_GetTick>
 8001cd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ce4:	d005      	beq.n	8001cf2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ce6:	4b0a      	ldr	r3, [pc, #40]	@ (8001d10 <HAL_Delay+0x44>)
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	461a      	mov	r2, r3
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	4413      	add	r3, r2
 8001cf0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001cf2:	bf00      	nop
 8001cf4:	f7ff ffde 	bl	8001cb4 <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	68fa      	ldr	r2, [r7, #12]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d8f7      	bhi.n	8001cf4 <HAL_Delay+0x28>
  {
  }
}
 8001d04:	bf00      	nop
 8001d06:	bf00      	nop
 8001d08:	3710      	adds	r7, #16
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	20000008 	.word	0x20000008

08001d14 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b084      	sub	sp, #16
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d101      	bne.n	8001d2a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e033      	b.n	8001d92 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d109      	bne.n	8001d46 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f7ff fdce 	bl	80018d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2200      	movs	r2, #0
 8001d42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d4a:	f003 0310 	and.w	r3, r3, #16
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d118      	bne.n	8001d84 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d56:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001d5a:	f023 0302 	bic.w	r3, r3, #2
 8001d5e:	f043 0202 	orr.w	r2, r3, #2
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f000 fad8 	bl	800231c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d76:	f023 0303 	bic.w	r3, r3, #3
 8001d7a:	f043 0201 	orr.w	r2, r3, #1
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	641a      	str	r2, [r3, #64]	@ 0x40
 8001d82:	e001      	b.n	8001d88 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001d90:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3710      	adds	r7, #16
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
	...

08001d9c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b085      	sub	sp, #20
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001da4:	2300      	movs	r3, #0
 8001da6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d101      	bne.n	8001db6 <HAL_ADC_Start+0x1a>
 8001db2:	2302      	movs	r3, #2
 8001db4:	e0b2      	b.n	8001f1c <HAL_ADC_Start+0x180>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2201      	movs	r2, #1
 8001dba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	f003 0301 	and.w	r3, r3, #1
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d018      	beq.n	8001dfe <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	689a      	ldr	r2, [r3, #8]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f042 0201 	orr.w	r2, r2, #1
 8001dda:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001ddc:	4b52      	ldr	r3, [pc, #328]	@ (8001f28 <HAL_ADC_Start+0x18c>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a52      	ldr	r2, [pc, #328]	@ (8001f2c <HAL_ADC_Start+0x190>)
 8001de2:	fba2 2303 	umull	r2, r3, r2, r3
 8001de6:	0c9a      	lsrs	r2, r3, #18
 8001de8:	4613      	mov	r3, r2
 8001dea:	005b      	lsls	r3, r3, #1
 8001dec:	4413      	add	r3, r2
 8001dee:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001df0:	e002      	b.n	8001df8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	3b01      	subs	r3, #1
 8001df6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d1f9      	bne.n	8001df2 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	f003 0301 	and.w	r3, r3, #1
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d17a      	bne.n	8001f02 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e10:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001e14:	f023 0301 	bic.w	r3, r3, #1
 8001e18:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d007      	beq.n	8001e3e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e32:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001e36:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e42:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001e4a:	d106      	bne.n	8001e5a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e50:	f023 0206 	bic.w	r2, r3, #6
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	645a      	str	r2, [r3, #68]	@ 0x44
 8001e58:	e002      	b.n	8001e60 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2200      	movs	r2, #0
 8001e64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e68:	4b31      	ldr	r3, [pc, #196]	@ (8001f30 <HAL_ADC_Start+0x194>)
 8001e6a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001e74:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	f003 031f 	and.w	r3, r3, #31
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d12a      	bne.n	8001ed8 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a2b      	ldr	r2, [pc, #172]	@ (8001f34 <HAL_ADC_Start+0x198>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d015      	beq.n	8001eb8 <HAL_ADC_Start+0x11c>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a29      	ldr	r2, [pc, #164]	@ (8001f38 <HAL_ADC_Start+0x19c>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d105      	bne.n	8001ea2 <HAL_ADC_Start+0x106>
 8001e96:	4b26      	ldr	r3, [pc, #152]	@ (8001f30 <HAL_ADC_Start+0x194>)
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f003 031f 	and.w	r3, r3, #31
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d00a      	beq.n	8001eb8 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a25      	ldr	r2, [pc, #148]	@ (8001f3c <HAL_ADC_Start+0x1a0>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d136      	bne.n	8001f1a <HAL_ADC_Start+0x17e>
 8001eac:	4b20      	ldr	r3, [pc, #128]	@ (8001f30 <HAL_ADC_Start+0x194>)
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f003 0310 	and.w	r3, r3, #16
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d130      	bne.n	8001f1a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d129      	bne.n	8001f1a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	689a      	ldr	r2, [r3, #8]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001ed4:	609a      	str	r2, [r3, #8]
 8001ed6:	e020      	b.n	8001f1a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a15      	ldr	r2, [pc, #84]	@ (8001f34 <HAL_ADC_Start+0x198>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d11b      	bne.n	8001f1a <HAL_ADC_Start+0x17e>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d114      	bne.n	8001f1a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	689a      	ldr	r2, [r3, #8]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001efe:	609a      	str	r2, [r3, #8]
 8001f00:	e00b      	b.n	8001f1a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f06:	f043 0210 	orr.w	r2, r3, #16
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f12:	f043 0201 	orr.w	r2, r3, #1
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001f1a:	2300      	movs	r3, #0
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3714      	adds	r7, #20
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr
 8001f28:	20000000 	.word	0x20000000
 8001f2c:	431bde83 	.word	0x431bde83
 8001f30:	40012300 	.word	0x40012300
 8001f34:	40012000 	.word	0x40012000
 8001f38:	40012100 	.word	0x40012100
 8001f3c:	40012200 	.word	0x40012200

08001f40 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d101      	bne.n	8001f56 <HAL_ADC_Stop+0x16>
 8001f52:	2302      	movs	r3, #2
 8001f54:	e021      	b.n	8001f9a <HAL_ADC_Stop+0x5a>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2201      	movs	r2, #1
 8001f5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	689a      	ldr	r2, [r3, #8]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f022 0201 	bic.w	r2, r2, #1
 8001f6c:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	f003 0301 	and.w	r3, r3, #1
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d109      	bne.n	8001f90 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f80:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001f84:	f023 0301 	bic.w	r3, r3, #1
 8001f88:	f043 0201 	orr.w	r2, r3, #1
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2200      	movs	r2, #0
 8001f94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001f98:	2300      	movs	r3, #0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	370c      	adds	r7, #12
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr

08001fa6 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001fa6:	b580      	push	{r7, lr}
 8001fa8:	b084      	sub	sp, #16
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
 8001fae:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001fc2:	d113      	bne.n	8001fec <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001fce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001fd2:	d10b      	bne.n	8001fec <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fd8:	f043 0220 	orr.w	r2, r3, #32
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e063      	b.n	80020b4 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001fec:	f7ff fe62 	bl	8001cb4 <HAL_GetTick>
 8001ff0:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001ff2:	e021      	b.n	8002038 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ffa:	d01d      	beq.n	8002038 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d007      	beq.n	8002012 <HAL_ADC_PollForConversion+0x6c>
 8002002:	f7ff fe57 	bl	8001cb4 <HAL_GetTick>
 8002006:	4602      	mov	r2, r0
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	683a      	ldr	r2, [r7, #0]
 800200e:	429a      	cmp	r2, r3
 8002010:	d212      	bcs.n	8002038 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0302 	and.w	r3, r3, #2
 800201c:	2b02      	cmp	r3, #2
 800201e:	d00b      	beq.n	8002038 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002024:	f043 0204 	orr.w	r2, r3, #4
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2200      	movs	r2, #0
 8002030:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	e03d      	b.n	80020b4 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	2b02      	cmp	r3, #2
 8002044:	d1d6      	bne.n	8001ff4 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f06f 0212 	mvn.w	r2, #18
 800204e:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002054:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d123      	bne.n	80020b2 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800206e:	2b00      	cmp	r3, #0
 8002070:	d11f      	bne.n	80020b2 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002078:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800207c:	2b00      	cmp	r3, #0
 800207e:	d006      	beq.n	800208e <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800208a:	2b00      	cmp	r3, #0
 800208c:	d111      	bne.n	80020b2 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002092:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800209e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d105      	bne.n	80020b2 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020aa:	f043 0201 	orr.w	r2, r3, #1
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80020b2:	2300      	movs	r3, #0
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3710      	adds	r7, #16
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}

080020bc <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	370c      	adds	r7, #12
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
	...

080020d8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80020d8:	b480      	push	{r7}
 80020da:	b085      	sub	sp, #20
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80020e2:	2300      	movs	r3, #0
 80020e4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d101      	bne.n	80020f4 <HAL_ADC_ConfigChannel+0x1c>
 80020f0:	2302      	movs	r3, #2
 80020f2:	e105      	b.n	8002300 <HAL_ADC_ConfigChannel+0x228>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2201      	movs	r2, #1
 80020f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	2b09      	cmp	r3, #9
 8002102:	d925      	bls.n	8002150 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	68d9      	ldr	r1, [r3, #12]
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	b29b      	uxth	r3, r3
 8002110:	461a      	mov	r2, r3
 8002112:	4613      	mov	r3, r2
 8002114:	005b      	lsls	r3, r3, #1
 8002116:	4413      	add	r3, r2
 8002118:	3b1e      	subs	r3, #30
 800211a:	2207      	movs	r2, #7
 800211c:	fa02 f303 	lsl.w	r3, r2, r3
 8002120:	43da      	mvns	r2, r3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	400a      	ands	r2, r1
 8002128:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	68d9      	ldr	r1, [r3, #12]
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	689a      	ldr	r2, [r3, #8]
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	b29b      	uxth	r3, r3
 800213a:	4618      	mov	r0, r3
 800213c:	4603      	mov	r3, r0
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	4403      	add	r3, r0
 8002142:	3b1e      	subs	r3, #30
 8002144:	409a      	lsls	r2, r3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	430a      	orrs	r2, r1
 800214c:	60da      	str	r2, [r3, #12]
 800214e:	e022      	b.n	8002196 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	6919      	ldr	r1, [r3, #16]
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	b29b      	uxth	r3, r3
 800215c:	461a      	mov	r2, r3
 800215e:	4613      	mov	r3, r2
 8002160:	005b      	lsls	r3, r3, #1
 8002162:	4413      	add	r3, r2
 8002164:	2207      	movs	r2, #7
 8002166:	fa02 f303 	lsl.w	r3, r2, r3
 800216a:	43da      	mvns	r2, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	400a      	ands	r2, r1
 8002172:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	6919      	ldr	r1, [r3, #16]
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	689a      	ldr	r2, [r3, #8]
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	b29b      	uxth	r3, r3
 8002184:	4618      	mov	r0, r3
 8002186:	4603      	mov	r3, r0
 8002188:	005b      	lsls	r3, r3, #1
 800218a:	4403      	add	r3, r0
 800218c:	409a      	lsls	r2, r3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	430a      	orrs	r2, r1
 8002194:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	2b06      	cmp	r3, #6
 800219c:	d824      	bhi.n	80021e8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	685a      	ldr	r2, [r3, #4]
 80021a8:	4613      	mov	r3, r2
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	4413      	add	r3, r2
 80021ae:	3b05      	subs	r3, #5
 80021b0:	221f      	movs	r2, #31
 80021b2:	fa02 f303 	lsl.w	r3, r2, r3
 80021b6:	43da      	mvns	r2, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	400a      	ands	r2, r1
 80021be:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	b29b      	uxth	r3, r3
 80021cc:	4618      	mov	r0, r3
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	685a      	ldr	r2, [r3, #4]
 80021d2:	4613      	mov	r3, r2
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	4413      	add	r3, r2
 80021d8:	3b05      	subs	r3, #5
 80021da:	fa00 f203 	lsl.w	r2, r0, r3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	430a      	orrs	r2, r1
 80021e4:	635a      	str	r2, [r3, #52]	@ 0x34
 80021e6:	e04c      	b.n	8002282 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	2b0c      	cmp	r3, #12
 80021ee:	d824      	bhi.n	800223a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	685a      	ldr	r2, [r3, #4]
 80021fa:	4613      	mov	r3, r2
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	4413      	add	r3, r2
 8002200:	3b23      	subs	r3, #35	@ 0x23
 8002202:	221f      	movs	r2, #31
 8002204:	fa02 f303 	lsl.w	r3, r2, r3
 8002208:	43da      	mvns	r2, r3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	400a      	ands	r2, r1
 8002210:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	b29b      	uxth	r3, r3
 800221e:	4618      	mov	r0, r3
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685a      	ldr	r2, [r3, #4]
 8002224:	4613      	mov	r3, r2
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	4413      	add	r3, r2
 800222a:	3b23      	subs	r3, #35	@ 0x23
 800222c:	fa00 f203 	lsl.w	r2, r0, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	430a      	orrs	r2, r1
 8002236:	631a      	str	r2, [r3, #48]	@ 0x30
 8002238:	e023      	b.n	8002282 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685a      	ldr	r2, [r3, #4]
 8002244:	4613      	mov	r3, r2
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	4413      	add	r3, r2
 800224a:	3b41      	subs	r3, #65	@ 0x41
 800224c:	221f      	movs	r2, #31
 800224e:	fa02 f303 	lsl.w	r3, r2, r3
 8002252:	43da      	mvns	r2, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	400a      	ands	r2, r1
 800225a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	b29b      	uxth	r3, r3
 8002268:	4618      	mov	r0, r3
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	685a      	ldr	r2, [r3, #4]
 800226e:	4613      	mov	r3, r2
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	4413      	add	r3, r2
 8002274:	3b41      	subs	r3, #65	@ 0x41
 8002276:	fa00 f203 	lsl.w	r2, r0, r3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	430a      	orrs	r2, r1
 8002280:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002282:	4b22      	ldr	r3, [pc, #136]	@ (800230c <HAL_ADC_ConfigChannel+0x234>)
 8002284:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a21      	ldr	r2, [pc, #132]	@ (8002310 <HAL_ADC_ConfigChannel+0x238>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d109      	bne.n	80022a4 <HAL_ADC_ConfigChannel+0x1cc>
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	2b12      	cmp	r3, #18
 8002296:	d105      	bne.n	80022a4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a19      	ldr	r2, [pc, #100]	@ (8002310 <HAL_ADC_ConfigChannel+0x238>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d123      	bne.n	80022f6 <HAL_ADC_ConfigChannel+0x21e>
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	2b10      	cmp	r3, #16
 80022b4:	d003      	beq.n	80022be <HAL_ADC_ConfigChannel+0x1e6>
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	2b11      	cmp	r3, #17
 80022bc:	d11b      	bne.n	80022f6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	2b10      	cmp	r3, #16
 80022d0:	d111      	bne.n	80022f6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80022d2:	4b10      	ldr	r3, [pc, #64]	@ (8002314 <HAL_ADC_ConfigChannel+0x23c>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a10      	ldr	r2, [pc, #64]	@ (8002318 <HAL_ADC_ConfigChannel+0x240>)
 80022d8:	fba2 2303 	umull	r2, r3, r2, r3
 80022dc:	0c9a      	lsrs	r2, r3, #18
 80022de:	4613      	mov	r3, r2
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	4413      	add	r3, r2
 80022e4:	005b      	lsls	r3, r3, #1
 80022e6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80022e8:	e002      	b.n	80022f0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	3b01      	subs	r3, #1
 80022ee:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d1f9      	bne.n	80022ea <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80022fe:	2300      	movs	r3, #0
}
 8002300:	4618      	mov	r0, r3
 8002302:	3714      	adds	r7, #20
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr
 800230c:	40012300 	.word	0x40012300
 8002310:	40012000 	.word	0x40012000
 8002314:	20000000 	.word	0x20000000
 8002318:	431bde83 	.word	0x431bde83

0800231c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800231c:	b480      	push	{r7}
 800231e:	b085      	sub	sp, #20
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002324:	4b79      	ldr	r3, [pc, #484]	@ (800250c <ADC_Init+0x1f0>)
 8002326:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	685a      	ldr	r2, [r3, #4]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	431a      	orrs	r2, r3
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	685a      	ldr	r2, [r3, #4]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002350:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	6859      	ldr	r1, [r3, #4]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	691b      	ldr	r3, [r3, #16]
 800235c:	021a      	lsls	r2, r3, #8
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	430a      	orrs	r2, r1
 8002364:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	685a      	ldr	r2, [r3, #4]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002374:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	6859      	ldr	r1, [r3, #4]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	689a      	ldr	r2, [r3, #8]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	430a      	orrs	r2, r1
 8002386:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	689a      	ldr	r2, [r3, #8]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002396:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	6899      	ldr	r1, [r3, #8]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	68da      	ldr	r2, [r3, #12]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	430a      	orrs	r2, r1
 80023a8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023ae:	4a58      	ldr	r2, [pc, #352]	@ (8002510 <ADC_Init+0x1f4>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d022      	beq.n	80023fa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	689a      	ldr	r2, [r3, #8]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80023c2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	6899      	ldr	r1, [r3, #8]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	430a      	orrs	r2, r1
 80023d4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	689a      	ldr	r2, [r3, #8]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80023e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	6899      	ldr	r1, [r3, #8]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	430a      	orrs	r2, r1
 80023f6:	609a      	str	r2, [r3, #8]
 80023f8:	e00f      	b.n	800241a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	689a      	ldr	r2, [r3, #8]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002408:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	689a      	ldr	r2, [r3, #8]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002418:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	689a      	ldr	r2, [r3, #8]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f022 0202 	bic.w	r2, r2, #2
 8002428:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	6899      	ldr	r1, [r3, #8]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	7e1b      	ldrb	r3, [r3, #24]
 8002434:	005a      	lsls	r2, r3, #1
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	430a      	orrs	r2, r1
 800243c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d01b      	beq.n	8002480 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	685a      	ldr	r2, [r3, #4]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002456:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	685a      	ldr	r2, [r3, #4]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002466:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	6859      	ldr	r1, [r3, #4]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002472:	3b01      	subs	r3, #1
 8002474:	035a      	lsls	r2, r3, #13
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	430a      	orrs	r2, r1
 800247c:	605a      	str	r2, [r3, #4]
 800247e:	e007      	b.n	8002490 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	685a      	ldr	r2, [r3, #4]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800248e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800249e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	69db      	ldr	r3, [r3, #28]
 80024aa:	3b01      	subs	r3, #1
 80024ac:	051a      	lsls	r2, r3, #20
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	430a      	orrs	r2, r1
 80024b4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	689a      	ldr	r2, [r3, #8]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80024c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	6899      	ldr	r1, [r3, #8]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80024d2:	025a      	lsls	r2, r3, #9
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	430a      	orrs	r2, r1
 80024da:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	689a      	ldr	r2, [r3, #8]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80024ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	6899      	ldr	r1, [r3, #8]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	695b      	ldr	r3, [r3, #20]
 80024f6:	029a      	lsls	r2, r3, #10
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	430a      	orrs	r2, r1
 80024fe:	609a      	str	r2, [r3, #8]
}
 8002500:	bf00      	nop
 8002502:	3714      	adds	r7, #20
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr
 800250c:	40012300 	.word	0x40012300
 8002510:	0f000001 	.word	0x0f000001

08002514 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002514:	b480      	push	{r7}
 8002516:	b085      	sub	sp, #20
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f003 0307 	and.w	r3, r3, #7
 8002522:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002524:	4b0c      	ldr	r3, [pc, #48]	@ (8002558 <__NVIC_SetPriorityGrouping+0x44>)
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800252a:	68ba      	ldr	r2, [r7, #8]
 800252c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002530:	4013      	ands	r3, r2
 8002532:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800253c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002540:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002544:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002546:	4a04      	ldr	r2, [pc, #16]	@ (8002558 <__NVIC_SetPriorityGrouping+0x44>)
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	60d3      	str	r3, [r2, #12]
}
 800254c:	bf00      	nop
 800254e:	3714      	adds	r7, #20
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr
 8002558:	e000ed00 	.word	0xe000ed00

0800255c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002560:	4b04      	ldr	r3, [pc, #16]	@ (8002574 <__NVIC_GetPriorityGrouping+0x18>)
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	0a1b      	lsrs	r3, r3, #8
 8002566:	f003 0307 	and.w	r3, r3, #7
}
 800256a:	4618      	mov	r0, r3
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr
 8002574:	e000ed00 	.word	0xe000ed00

08002578 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	4603      	mov	r3, r0
 8002580:	6039      	str	r1, [r7, #0]
 8002582:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002584:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002588:	2b00      	cmp	r3, #0
 800258a:	db0a      	blt.n	80025a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	b2da      	uxtb	r2, r3
 8002590:	490c      	ldr	r1, [pc, #48]	@ (80025c4 <__NVIC_SetPriority+0x4c>)
 8002592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002596:	0112      	lsls	r2, r2, #4
 8002598:	b2d2      	uxtb	r2, r2
 800259a:	440b      	add	r3, r1
 800259c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025a0:	e00a      	b.n	80025b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	b2da      	uxtb	r2, r3
 80025a6:	4908      	ldr	r1, [pc, #32]	@ (80025c8 <__NVIC_SetPriority+0x50>)
 80025a8:	79fb      	ldrb	r3, [r7, #7]
 80025aa:	f003 030f 	and.w	r3, r3, #15
 80025ae:	3b04      	subs	r3, #4
 80025b0:	0112      	lsls	r2, r2, #4
 80025b2:	b2d2      	uxtb	r2, r2
 80025b4:	440b      	add	r3, r1
 80025b6:	761a      	strb	r2, [r3, #24]
}
 80025b8:	bf00      	nop
 80025ba:	370c      	adds	r7, #12
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr
 80025c4:	e000e100 	.word	0xe000e100
 80025c8:	e000ed00 	.word	0xe000ed00

080025cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b089      	sub	sp, #36	@ 0x24
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	60f8      	str	r0, [r7, #12]
 80025d4:	60b9      	str	r1, [r7, #8]
 80025d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f003 0307 	and.w	r3, r3, #7
 80025de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	f1c3 0307 	rsb	r3, r3, #7
 80025e6:	2b04      	cmp	r3, #4
 80025e8:	bf28      	it	cs
 80025ea:	2304      	movcs	r3, #4
 80025ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	3304      	adds	r3, #4
 80025f2:	2b06      	cmp	r3, #6
 80025f4:	d902      	bls.n	80025fc <NVIC_EncodePriority+0x30>
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	3b03      	subs	r3, #3
 80025fa:	e000      	b.n	80025fe <NVIC_EncodePriority+0x32>
 80025fc:	2300      	movs	r3, #0
 80025fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002600:	f04f 32ff 	mov.w	r2, #4294967295
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	fa02 f303 	lsl.w	r3, r2, r3
 800260a:	43da      	mvns	r2, r3
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	401a      	ands	r2, r3
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002614:	f04f 31ff 	mov.w	r1, #4294967295
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	fa01 f303 	lsl.w	r3, r1, r3
 800261e:	43d9      	mvns	r1, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002624:	4313      	orrs	r3, r2
         );
}
 8002626:	4618      	mov	r0, r3
 8002628:	3724      	adds	r7, #36	@ 0x24
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
	...

08002634 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	3b01      	subs	r3, #1
 8002640:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002644:	d301      	bcc.n	800264a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002646:	2301      	movs	r3, #1
 8002648:	e00f      	b.n	800266a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800264a:	4a0a      	ldr	r2, [pc, #40]	@ (8002674 <SysTick_Config+0x40>)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	3b01      	subs	r3, #1
 8002650:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002652:	210f      	movs	r1, #15
 8002654:	f04f 30ff 	mov.w	r0, #4294967295
 8002658:	f7ff ff8e 	bl	8002578 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800265c:	4b05      	ldr	r3, [pc, #20]	@ (8002674 <SysTick_Config+0x40>)
 800265e:	2200      	movs	r2, #0
 8002660:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002662:	4b04      	ldr	r3, [pc, #16]	@ (8002674 <SysTick_Config+0x40>)
 8002664:	2207      	movs	r2, #7
 8002666:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002668:	2300      	movs	r3, #0
}
 800266a:	4618      	mov	r0, r3
 800266c:	3708      	adds	r7, #8
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	e000e010 	.word	0xe000e010

08002678 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f7ff ff47 	bl	8002514 <__NVIC_SetPriorityGrouping>
}
 8002686:	bf00      	nop
 8002688:	3708      	adds	r7, #8
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}

0800268e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800268e:	b580      	push	{r7, lr}
 8002690:	b086      	sub	sp, #24
 8002692:	af00      	add	r7, sp, #0
 8002694:	4603      	mov	r3, r0
 8002696:	60b9      	str	r1, [r7, #8]
 8002698:	607a      	str	r2, [r7, #4]
 800269a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800269c:	2300      	movs	r3, #0
 800269e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026a0:	f7ff ff5c 	bl	800255c <__NVIC_GetPriorityGrouping>
 80026a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	68b9      	ldr	r1, [r7, #8]
 80026aa:	6978      	ldr	r0, [r7, #20]
 80026ac:	f7ff ff8e 	bl	80025cc <NVIC_EncodePriority>
 80026b0:	4602      	mov	r2, r0
 80026b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026b6:	4611      	mov	r1, r2
 80026b8:	4618      	mov	r0, r3
 80026ba:	f7ff ff5d 	bl	8002578 <__NVIC_SetPriority>
}
 80026be:	bf00      	nop
 80026c0:	3718      	adds	r7, #24
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}

080026c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026c6:	b580      	push	{r7, lr}
 80026c8:	b082      	sub	sp, #8
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f7ff ffb0 	bl	8002634 <SysTick_Config>
 80026d4:	4603      	mov	r3, r0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3708      	adds	r7, #8
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
	...

080026e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b089      	sub	sp, #36	@ 0x24
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026ea:	2300      	movs	r3, #0
 80026ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026ee:	2300      	movs	r3, #0
 80026f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026f2:	2300      	movs	r3, #0
 80026f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026f6:	2300      	movs	r3, #0
 80026f8:	61fb      	str	r3, [r7, #28]
 80026fa:	e16b      	b.n	80029d4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026fc:	2201      	movs	r2, #1
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	fa02 f303 	lsl.w	r3, r2, r3
 8002704:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	697a      	ldr	r2, [r7, #20]
 800270c:	4013      	ands	r3, r2
 800270e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002710:	693a      	ldr	r2, [r7, #16]
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	429a      	cmp	r2, r3
 8002716:	f040 815a 	bne.w	80029ce <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	f003 0303 	and.w	r3, r3, #3
 8002722:	2b01      	cmp	r3, #1
 8002724:	d005      	beq.n	8002732 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800272e:	2b02      	cmp	r3, #2
 8002730:	d130      	bne.n	8002794 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	005b      	lsls	r3, r3, #1
 800273c:	2203      	movs	r2, #3
 800273e:	fa02 f303 	lsl.w	r3, r2, r3
 8002742:	43db      	mvns	r3, r3
 8002744:	69ba      	ldr	r2, [r7, #24]
 8002746:	4013      	ands	r3, r2
 8002748:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	68da      	ldr	r2, [r3, #12]
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	005b      	lsls	r3, r3, #1
 8002752:	fa02 f303 	lsl.w	r3, r2, r3
 8002756:	69ba      	ldr	r2, [r7, #24]
 8002758:	4313      	orrs	r3, r2
 800275a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	69ba      	ldr	r2, [r7, #24]
 8002760:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002768:	2201      	movs	r2, #1
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	fa02 f303 	lsl.w	r3, r2, r3
 8002770:	43db      	mvns	r3, r3
 8002772:	69ba      	ldr	r2, [r7, #24]
 8002774:	4013      	ands	r3, r2
 8002776:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	091b      	lsrs	r3, r3, #4
 800277e:	f003 0201 	and.w	r2, r3, #1
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	fa02 f303 	lsl.w	r3, r2, r3
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	4313      	orrs	r3, r2
 800278c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	69ba      	ldr	r2, [r7, #24]
 8002792:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f003 0303 	and.w	r3, r3, #3
 800279c:	2b03      	cmp	r3, #3
 800279e:	d017      	beq.n	80027d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	005b      	lsls	r3, r3, #1
 80027aa:	2203      	movs	r2, #3
 80027ac:	fa02 f303 	lsl.w	r3, r2, r3
 80027b0:	43db      	mvns	r3, r3
 80027b2:	69ba      	ldr	r2, [r7, #24]
 80027b4:	4013      	ands	r3, r2
 80027b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	689a      	ldr	r2, [r3, #8]
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	005b      	lsls	r3, r3, #1
 80027c0:	fa02 f303 	lsl.w	r3, r2, r3
 80027c4:	69ba      	ldr	r2, [r7, #24]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	69ba      	ldr	r2, [r7, #24]
 80027ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f003 0303 	and.w	r3, r3, #3
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d123      	bne.n	8002824 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	08da      	lsrs	r2, r3, #3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	3208      	adds	r2, #8
 80027e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	f003 0307 	and.w	r3, r3, #7
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	220f      	movs	r2, #15
 80027f4:	fa02 f303 	lsl.w	r3, r2, r3
 80027f8:	43db      	mvns	r3, r3
 80027fa:	69ba      	ldr	r2, [r7, #24]
 80027fc:	4013      	ands	r3, r2
 80027fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	691a      	ldr	r2, [r3, #16]
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	f003 0307 	and.w	r3, r3, #7
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	fa02 f303 	lsl.w	r3, r2, r3
 8002810:	69ba      	ldr	r2, [r7, #24]
 8002812:	4313      	orrs	r3, r2
 8002814:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	08da      	lsrs	r2, r3, #3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	3208      	adds	r2, #8
 800281e:	69b9      	ldr	r1, [r7, #24]
 8002820:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	005b      	lsls	r3, r3, #1
 800282e:	2203      	movs	r2, #3
 8002830:	fa02 f303 	lsl.w	r3, r2, r3
 8002834:	43db      	mvns	r3, r3
 8002836:	69ba      	ldr	r2, [r7, #24]
 8002838:	4013      	ands	r3, r2
 800283a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f003 0203 	and.w	r2, r3, #3
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	005b      	lsls	r3, r3, #1
 8002848:	fa02 f303 	lsl.w	r3, r2, r3
 800284c:	69ba      	ldr	r2, [r7, #24]
 800284e:	4313      	orrs	r3, r2
 8002850:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	69ba      	ldr	r2, [r7, #24]
 8002856:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002860:	2b00      	cmp	r3, #0
 8002862:	f000 80b4 	beq.w	80029ce <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002866:	2300      	movs	r3, #0
 8002868:	60fb      	str	r3, [r7, #12]
 800286a:	4b60      	ldr	r3, [pc, #384]	@ (80029ec <HAL_GPIO_Init+0x30c>)
 800286c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800286e:	4a5f      	ldr	r2, [pc, #380]	@ (80029ec <HAL_GPIO_Init+0x30c>)
 8002870:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002874:	6453      	str	r3, [r2, #68]	@ 0x44
 8002876:	4b5d      	ldr	r3, [pc, #372]	@ (80029ec <HAL_GPIO_Init+0x30c>)
 8002878:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800287a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800287e:	60fb      	str	r3, [r7, #12]
 8002880:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002882:	4a5b      	ldr	r2, [pc, #364]	@ (80029f0 <HAL_GPIO_Init+0x310>)
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	089b      	lsrs	r3, r3, #2
 8002888:	3302      	adds	r3, #2
 800288a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800288e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	f003 0303 	and.w	r3, r3, #3
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	220f      	movs	r2, #15
 800289a:	fa02 f303 	lsl.w	r3, r2, r3
 800289e:	43db      	mvns	r3, r3
 80028a0:	69ba      	ldr	r2, [r7, #24]
 80028a2:	4013      	ands	r3, r2
 80028a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4a52      	ldr	r2, [pc, #328]	@ (80029f4 <HAL_GPIO_Init+0x314>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d02b      	beq.n	8002906 <HAL_GPIO_Init+0x226>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4a51      	ldr	r2, [pc, #324]	@ (80029f8 <HAL_GPIO_Init+0x318>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d025      	beq.n	8002902 <HAL_GPIO_Init+0x222>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4a50      	ldr	r2, [pc, #320]	@ (80029fc <HAL_GPIO_Init+0x31c>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d01f      	beq.n	80028fe <HAL_GPIO_Init+0x21e>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4a4f      	ldr	r2, [pc, #316]	@ (8002a00 <HAL_GPIO_Init+0x320>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d019      	beq.n	80028fa <HAL_GPIO_Init+0x21a>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4a4e      	ldr	r2, [pc, #312]	@ (8002a04 <HAL_GPIO_Init+0x324>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d013      	beq.n	80028f6 <HAL_GPIO_Init+0x216>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4a4d      	ldr	r2, [pc, #308]	@ (8002a08 <HAL_GPIO_Init+0x328>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d00d      	beq.n	80028f2 <HAL_GPIO_Init+0x212>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a4c      	ldr	r2, [pc, #304]	@ (8002a0c <HAL_GPIO_Init+0x32c>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d007      	beq.n	80028ee <HAL_GPIO_Init+0x20e>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4a4b      	ldr	r2, [pc, #300]	@ (8002a10 <HAL_GPIO_Init+0x330>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d101      	bne.n	80028ea <HAL_GPIO_Init+0x20a>
 80028e6:	2307      	movs	r3, #7
 80028e8:	e00e      	b.n	8002908 <HAL_GPIO_Init+0x228>
 80028ea:	2308      	movs	r3, #8
 80028ec:	e00c      	b.n	8002908 <HAL_GPIO_Init+0x228>
 80028ee:	2306      	movs	r3, #6
 80028f0:	e00a      	b.n	8002908 <HAL_GPIO_Init+0x228>
 80028f2:	2305      	movs	r3, #5
 80028f4:	e008      	b.n	8002908 <HAL_GPIO_Init+0x228>
 80028f6:	2304      	movs	r3, #4
 80028f8:	e006      	b.n	8002908 <HAL_GPIO_Init+0x228>
 80028fa:	2303      	movs	r3, #3
 80028fc:	e004      	b.n	8002908 <HAL_GPIO_Init+0x228>
 80028fe:	2302      	movs	r3, #2
 8002900:	e002      	b.n	8002908 <HAL_GPIO_Init+0x228>
 8002902:	2301      	movs	r3, #1
 8002904:	e000      	b.n	8002908 <HAL_GPIO_Init+0x228>
 8002906:	2300      	movs	r3, #0
 8002908:	69fa      	ldr	r2, [r7, #28]
 800290a:	f002 0203 	and.w	r2, r2, #3
 800290e:	0092      	lsls	r2, r2, #2
 8002910:	4093      	lsls	r3, r2
 8002912:	69ba      	ldr	r2, [r7, #24]
 8002914:	4313      	orrs	r3, r2
 8002916:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002918:	4935      	ldr	r1, [pc, #212]	@ (80029f0 <HAL_GPIO_Init+0x310>)
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	089b      	lsrs	r3, r3, #2
 800291e:	3302      	adds	r3, #2
 8002920:	69ba      	ldr	r2, [r7, #24]
 8002922:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002926:	4b3b      	ldr	r3, [pc, #236]	@ (8002a14 <HAL_GPIO_Init+0x334>)
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	43db      	mvns	r3, r3
 8002930:	69ba      	ldr	r2, [r7, #24]
 8002932:	4013      	ands	r3, r2
 8002934:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d003      	beq.n	800294a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002942:	69ba      	ldr	r2, [r7, #24]
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	4313      	orrs	r3, r2
 8002948:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800294a:	4a32      	ldr	r2, [pc, #200]	@ (8002a14 <HAL_GPIO_Init+0x334>)
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002950:	4b30      	ldr	r3, [pc, #192]	@ (8002a14 <HAL_GPIO_Init+0x334>)
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	43db      	mvns	r3, r3
 800295a:	69ba      	ldr	r2, [r7, #24]
 800295c:	4013      	ands	r3, r2
 800295e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d003      	beq.n	8002974 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800296c:	69ba      	ldr	r2, [r7, #24]
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	4313      	orrs	r3, r2
 8002972:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002974:	4a27      	ldr	r2, [pc, #156]	@ (8002a14 <HAL_GPIO_Init+0x334>)
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800297a:	4b26      	ldr	r3, [pc, #152]	@ (8002a14 <HAL_GPIO_Init+0x334>)
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	43db      	mvns	r3, r3
 8002984:	69ba      	ldr	r2, [r7, #24]
 8002986:	4013      	ands	r3, r2
 8002988:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d003      	beq.n	800299e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002996:	69ba      	ldr	r2, [r7, #24]
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	4313      	orrs	r3, r2
 800299c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800299e:	4a1d      	ldr	r2, [pc, #116]	@ (8002a14 <HAL_GPIO_Init+0x334>)
 80029a0:	69bb      	ldr	r3, [r7, #24]
 80029a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029a4:	4b1b      	ldr	r3, [pc, #108]	@ (8002a14 <HAL_GPIO_Init+0x334>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	43db      	mvns	r3, r3
 80029ae:	69ba      	ldr	r2, [r7, #24]
 80029b0:	4013      	ands	r3, r2
 80029b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d003      	beq.n	80029c8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80029c0:	69ba      	ldr	r2, [r7, #24]
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	4313      	orrs	r3, r2
 80029c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029c8:	4a12      	ldr	r2, [pc, #72]	@ (8002a14 <HAL_GPIO_Init+0x334>)
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	3301      	adds	r3, #1
 80029d2:	61fb      	str	r3, [r7, #28]
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	2b0f      	cmp	r3, #15
 80029d8:	f67f ae90 	bls.w	80026fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80029dc:	bf00      	nop
 80029de:	bf00      	nop
 80029e0:	3724      	adds	r7, #36	@ 0x24
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
 80029ea:	bf00      	nop
 80029ec:	40023800 	.word	0x40023800
 80029f0:	40013800 	.word	0x40013800
 80029f4:	40020000 	.word	0x40020000
 80029f8:	40020400 	.word	0x40020400
 80029fc:	40020800 	.word	0x40020800
 8002a00:	40020c00 	.word	0x40020c00
 8002a04:	40021000 	.word	0x40021000
 8002a08:	40021400 	.word	0x40021400
 8002a0c:	40021800 	.word	0x40021800
 8002a10:	40021c00 	.word	0x40021c00
 8002a14:	40013c00 	.word	0x40013c00

08002a18 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d101      	bne.n	8002a2a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e12b      	b.n	8002c82 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d106      	bne.n	8002a44 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f7fe ff8c 	bl	800195c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2224      	movs	r2, #36	@ 0x24
 8002a48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f022 0201 	bic.w	r2, r2, #1
 8002a5a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002a6a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002a7a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002a7c:	f001 f89a 	bl	8003bb4 <HAL_RCC_GetPCLK1Freq>
 8002a80:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	4a81      	ldr	r2, [pc, #516]	@ (8002c8c <HAL_I2C_Init+0x274>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d807      	bhi.n	8002a9c <HAL_I2C_Init+0x84>
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	4a80      	ldr	r2, [pc, #512]	@ (8002c90 <HAL_I2C_Init+0x278>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	bf94      	ite	ls
 8002a94:	2301      	movls	r3, #1
 8002a96:	2300      	movhi	r3, #0
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	e006      	b.n	8002aaa <HAL_I2C_Init+0x92>
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	4a7d      	ldr	r2, [pc, #500]	@ (8002c94 <HAL_I2C_Init+0x27c>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	bf94      	ite	ls
 8002aa4:	2301      	movls	r3, #1
 8002aa6:	2300      	movhi	r3, #0
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d001      	beq.n	8002ab2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e0e7      	b.n	8002c82 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	4a78      	ldr	r2, [pc, #480]	@ (8002c98 <HAL_I2C_Init+0x280>)
 8002ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8002aba:	0c9b      	lsrs	r3, r3, #18
 8002abc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	68ba      	ldr	r2, [r7, #8]
 8002ace:	430a      	orrs	r2, r1
 8002ad0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	6a1b      	ldr	r3, [r3, #32]
 8002ad8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	4a6a      	ldr	r2, [pc, #424]	@ (8002c8c <HAL_I2C_Init+0x274>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d802      	bhi.n	8002aec <HAL_I2C_Init+0xd4>
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	3301      	adds	r3, #1
 8002aea:	e009      	b.n	8002b00 <HAL_I2C_Init+0xe8>
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002af2:	fb02 f303 	mul.w	r3, r2, r3
 8002af6:	4a69      	ldr	r2, [pc, #420]	@ (8002c9c <HAL_I2C_Init+0x284>)
 8002af8:	fba2 2303 	umull	r2, r3, r2, r3
 8002afc:	099b      	lsrs	r3, r3, #6
 8002afe:	3301      	adds	r3, #1
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	6812      	ldr	r2, [r2, #0]
 8002b04:	430b      	orrs	r3, r1
 8002b06:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	69db      	ldr	r3, [r3, #28]
 8002b0e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002b12:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	495c      	ldr	r1, [pc, #368]	@ (8002c8c <HAL_I2C_Init+0x274>)
 8002b1c:	428b      	cmp	r3, r1
 8002b1e:	d819      	bhi.n	8002b54 <HAL_I2C_Init+0x13c>
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	1e59      	subs	r1, r3, #1
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	005b      	lsls	r3, r3, #1
 8002b2a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b2e:	1c59      	adds	r1, r3, #1
 8002b30:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002b34:	400b      	ands	r3, r1
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d00a      	beq.n	8002b50 <HAL_I2C_Init+0x138>
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	1e59      	subs	r1, r3, #1
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	005b      	lsls	r3, r3, #1
 8002b44:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b48:	3301      	adds	r3, #1
 8002b4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b4e:	e051      	b.n	8002bf4 <HAL_I2C_Init+0x1dc>
 8002b50:	2304      	movs	r3, #4
 8002b52:	e04f      	b.n	8002bf4 <HAL_I2C_Init+0x1dc>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d111      	bne.n	8002b80 <HAL_I2C_Init+0x168>
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	1e58      	subs	r0, r3, #1
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6859      	ldr	r1, [r3, #4]
 8002b64:	460b      	mov	r3, r1
 8002b66:	005b      	lsls	r3, r3, #1
 8002b68:	440b      	add	r3, r1
 8002b6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b6e:	3301      	adds	r3, #1
 8002b70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	bf0c      	ite	eq
 8002b78:	2301      	moveq	r3, #1
 8002b7a:	2300      	movne	r3, #0
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	e012      	b.n	8002ba6 <HAL_I2C_Init+0x18e>
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	1e58      	subs	r0, r3, #1
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6859      	ldr	r1, [r3, #4]
 8002b88:	460b      	mov	r3, r1
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	440b      	add	r3, r1
 8002b8e:	0099      	lsls	r1, r3, #2
 8002b90:	440b      	add	r3, r1
 8002b92:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b96:	3301      	adds	r3, #1
 8002b98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	bf0c      	ite	eq
 8002ba0:	2301      	moveq	r3, #1
 8002ba2:	2300      	movne	r3, #0
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d001      	beq.n	8002bae <HAL_I2C_Init+0x196>
 8002baa:	2301      	movs	r3, #1
 8002bac:	e022      	b.n	8002bf4 <HAL_I2C_Init+0x1dc>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d10e      	bne.n	8002bd4 <HAL_I2C_Init+0x1bc>
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	1e58      	subs	r0, r3, #1
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6859      	ldr	r1, [r3, #4]
 8002bbe:	460b      	mov	r3, r1
 8002bc0:	005b      	lsls	r3, r3, #1
 8002bc2:	440b      	add	r3, r1
 8002bc4:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bc8:	3301      	adds	r3, #1
 8002bca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002bd2:	e00f      	b.n	8002bf4 <HAL_I2C_Init+0x1dc>
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	1e58      	subs	r0, r3, #1
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6859      	ldr	r1, [r3, #4]
 8002bdc:	460b      	mov	r3, r1
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	440b      	add	r3, r1
 8002be2:	0099      	lsls	r1, r3, #2
 8002be4:	440b      	add	r3, r1
 8002be6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bea:	3301      	adds	r3, #1
 8002bec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bf0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002bf4:	6879      	ldr	r1, [r7, #4]
 8002bf6:	6809      	ldr	r1, [r1, #0]
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	69da      	ldr	r2, [r3, #28]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6a1b      	ldr	r3, [r3, #32]
 8002c0e:	431a      	orrs	r2, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	430a      	orrs	r2, r1
 8002c16:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002c22:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	6911      	ldr	r1, [r2, #16]
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	68d2      	ldr	r2, [r2, #12]
 8002c2e:	4311      	orrs	r1, r2
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	6812      	ldr	r2, [r2, #0]
 8002c34:	430b      	orrs	r3, r1
 8002c36:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	695a      	ldr	r2, [r3, #20]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	699b      	ldr	r3, [r3, #24]
 8002c4a:	431a      	orrs	r2, r3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	430a      	orrs	r2, r1
 8002c52:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f042 0201 	orr.w	r2, r2, #1
 8002c62:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2200      	movs	r2, #0
 8002c68:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2220      	movs	r2, #32
 8002c6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002c80:	2300      	movs	r3, #0
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3710      	adds	r7, #16
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	000186a0 	.word	0x000186a0
 8002c90:	001e847f 	.word	0x001e847f
 8002c94:	003d08ff 	.word	0x003d08ff
 8002c98:	431bde83 	.word	0x431bde83
 8002c9c:	10624dd3 	.word	0x10624dd3

08002ca0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b088      	sub	sp, #32
 8002ca4:	af02      	add	r7, sp, #8
 8002ca6:	60f8      	str	r0, [r7, #12]
 8002ca8:	607a      	str	r2, [r7, #4]
 8002caa:	461a      	mov	r2, r3
 8002cac:	460b      	mov	r3, r1
 8002cae:	817b      	strh	r3, [r7, #10]
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002cb4:	f7fe fffe 	bl	8001cb4 <HAL_GetTick>
 8002cb8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	2b20      	cmp	r3, #32
 8002cc4:	f040 80e0 	bne.w	8002e88 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	9300      	str	r3, [sp, #0]
 8002ccc:	2319      	movs	r3, #25
 8002cce:	2201      	movs	r2, #1
 8002cd0:	4970      	ldr	r1, [pc, #448]	@ (8002e94 <HAL_I2C_Master_Transmit+0x1f4>)
 8002cd2:	68f8      	ldr	r0, [r7, #12]
 8002cd4:	f000 f964 	bl	8002fa0 <I2C_WaitOnFlagUntilTimeout>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d001      	beq.n	8002ce2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002cde:	2302      	movs	r3, #2
 8002ce0:	e0d3      	b.n	8002e8a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d101      	bne.n	8002cf0 <HAL_I2C_Master_Transmit+0x50>
 8002cec:	2302      	movs	r3, #2
 8002cee:	e0cc      	b.n	8002e8a <HAL_I2C_Master_Transmit+0x1ea>
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0301 	and.w	r3, r3, #1
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d007      	beq.n	8002d16 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f042 0201 	orr.w	r2, r2, #1
 8002d14:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d24:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2221      	movs	r2, #33	@ 0x21
 8002d2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2210      	movs	r2, #16
 8002d32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	893a      	ldrh	r2, [r7, #8]
 8002d46:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d4c:	b29a      	uxth	r2, r3
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	4a50      	ldr	r2, [pc, #320]	@ (8002e98 <HAL_I2C_Master_Transmit+0x1f8>)
 8002d56:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002d58:	8979      	ldrh	r1, [r7, #10]
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	6a3a      	ldr	r2, [r7, #32]
 8002d5e:	68f8      	ldr	r0, [r7, #12]
 8002d60:	f000 f89c 	bl	8002e9c <I2C_MasterRequestWrite>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d001      	beq.n	8002d6e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e08d      	b.n	8002e8a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d6e:	2300      	movs	r3, #0
 8002d70:	613b      	str	r3, [r7, #16]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	695b      	ldr	r3, [r3, #20]
 8002d78:	613b      	str	r3, [r7, #16]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	699b      	ldr	r3, [r3, #24]
 8002d80:	613b      	str	r3, [r7, #16]
 8002d82:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002d84:	e066      	b.n	8002e54 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d86:	697a      	ldr	r2, [r7, #20]
 8002d88:	6a39      	ldr	r1, [r7, #32]
 8002d8a:	68f8      	ldr	r0, [r7, #12]
 8002d8c:	f000 fa22 	bl	80031d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d00d      	beq.n	8002db2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d9a:	2b04      	cmp	r3, #4
 8002d9c:	d107      	bne.n	8002dae <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002dac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e06b      	b.n	8002e8a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002db6:	781a      	ldrb	r2, [r3, #0]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dc2:	1c5a      	adds	r2, r3, #1
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dcc:	b29b      	uxth	r3, r3
 8002dce:	3b01      	subs	r3, #1
 8002dd0:	b29a      	uxth	r2, r3
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dda:	3b01      	subs	r3, #1
 8002ddc:	b29a      	uxth	r2, r3
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	695b      	ldr	r3, [r3, #20]
 8002de8:	f003 0304 	and.w	r3, r3, #4
 8002dec:	2b04      	cmp	r3, #4
 8002dee:	d11b      	bne.n	8002e28 <HAL_I2C_Master_Transmit+0x188>
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d017      	beq.n	8002e28 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dfc:	781a      	ldrb	r2, [r3, #0]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e08:	1c5a      	adds	r2, r3, #1
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	3b01      	subs	r3, #1
 8002e16:	b29a      	uxth	r2, r3
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e20:	3b01      	subs	r3, #1
 8002e22:	b29a      	uxth	r2, r3
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e28:	697a      	ldr	r2, [r7, #20]
 8002e2a:	6a39      	ldr	r1, [r7, #32]
 8002e2c:	68f8      	ldr	r0, [r7, #12]
 8002e2e:	f000 fa19 	bl	8003264 <I2C_WaitOnBTFFlagUntilTimeout>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d00d      	beq.n	8002e54 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e3c:	2b04      	cmp	r3, #4
 8002e3e:	d107      	bne.n	8002e50 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e4e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e01a      	b.n	8002e8a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d194      	bne.n	8002d86 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2220      	movs	r2, #32
 8002e70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002e84:	2300      	movs	r3, #0
 8002e86:	e000      	b.n	8002e8a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002e88:	2302      	movs	r3, #2
  }
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3718      	adds	r7, #24
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	00100002 	.word	0x00100002
 8002e98:	ffff0000 	.word	0xffff0000

08002e9c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b088      	sub	sp, #32
 8002ea0:	af02      	add	r7, sp, #8
 8002ea2:	60f8      	str	r0, [r7, #12]
 8002ea4:	607a      	str	r2, [r7, #4]
 8002ea6:	603b      	str	r3, [r7, #0]
 8002ea8:	460b      	mov	r3, r1
 8002eaa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eb0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	2b08      	cmp	r3, #8
 8002eb6:	d006      	beq.n	8002ec6 <I2C_MasterRequestWrite+0x2a>
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d003      	beq.n	8002ec6 <I2C_MasterRequestWrite+0x2a>
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002ec4:	d108      	bne.n	8002ed8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ed4:	601a      	str	r2, [r3, #0]
 8002ed6:	e00b      	b.n	8002ef0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002edc:	2b12      	cmp	r3, #18
 8002ede:	d107      	bne.n	8002ef0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002eee:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	9300      	str	r3, [sp, #0]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002efc:	68f8      	ldr	r0, [r7, #12]
 8002efe:	f000 f84f 	bl	8002fa0 <I2C_WaitOnFlagUntilTimeout>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d00d      	beq.n	8002f24 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f16:	d103      	bne.n	8002f20 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f1e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002f20:	2303      	movs	r3, #3
 8002f22:	e035      	b.n	8002f90 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	691b      	ldr	r3, [r3, #16]
 8002f28:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002f2c:	d108      	bne.n	8002f40 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f2e:	897b      	ldrh	r3, [r7, #10]
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	461a      	mov	r2, r3
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002f3c:	611a      	str	r2, [r3, #16]
 8002f3e:	e01b      	b.n	8002f78 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002f40:	897b      	ldrh	r3, [r7, #10]
 8002f42:	11db      	asrs	r3, r3, #7
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	f003 0306 	and.w	r3, r3, #6
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	f063 030f 	orn	r3, r3, #15
 8002f50:	b2da      	uxtb	r2, r3
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	490e      	ldr	r1, [pc, #56]	@ (8002f98 <I2C_MasterRequestWrite+0xfc>)
 8002f5e:	68f8      	ldr	r0, [r7, #12]
 8002f60:	f000 f898 	bl	8003094 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d001      	beq.n	8002f6e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e010      	b.n	8002f90 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002f6e:	897b      	ldrh	r3, [r7, #10]
 8002f70:	b2da      	uxtb	r2, r3
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	4907      	ldr	r1, [pc, #28]	@ (8002f9c <I2C_MasterRequestWrite+0x100>)
 8002f7e:	68f8      	ldr	r0, [r7, #12]
 8002f80:	f000 f888 	bl	8003094 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d001      	beq.n	8002f8e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e000      	b.n	8002f90 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002f8e:	2300      	movs	r3, #0
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3718      	adds	r7, #24
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	00010008 	.word	0x00010008
 8002f9c:	00010002 	.word	0x00010002

08002fa0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b084      	sub	sp, #16
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	60f8      	str	r0, [r7, #12]
 8002fa8:	60b9      	str	r1, [r7, #8]
 8002faa:	603b      	str	r3, [r7, #0]
 8002fac:	4613      	mov	r3, r2
 8002fae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fb0:	e048      	b.n	8003044 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fb8:	d044      	beq.n	8003044 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fba:	f7fe fe7b 	bl	8001cb4 <HAL_GetTick>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	69bb      	ldr	r3, [r7, #24]
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	683a      	ldr	r2, [r7, #0]
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d302      	bcc.n	8002fd0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d139      	bne.n	8003044 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	0c1b      	lsrs	r3, r3, #16
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d10d      	bne.n	8002ff6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	695b      	ldr	r3, [r3, #20]
 8002fe0:	43da      	mvns	r2, r3
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	bf0c      	ite	eq
 8002fec:	2301      	moveq	r3, #1
 8002fee:	2300      	movne	r3, #0
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	e00c      	b.n	8003010 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	699b      	ldr	r3, [r3, #24]
 8002ffc:	43da      	mvns	r2, r3
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	4013      	ands	r3, r2
 8003002:	b29b      	uxth	r3, r3
 8003004:	2b00      	cmp	r3, #0
 8003006:	bf0c      	ite	eq
 8003008:	2301      	moveq	r3, #1
 800300a:	2300      	movne	r3, #0
 800300c:	b2db      	uxtb	r3, r3
 800300e:	461a      	mov	r2, r3
 8003010:	79fb      	ldrb	r3, [r7, #7]
 8003012:	429a      	cmp	r2, r3
 8003014:	d116      	bne.n	8003044 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2200      	movs	r2, #0
 800301a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2220      	movs	r2, #32
 8003020:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2200      	movs	r2, #0
 8003028:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003030:	f043 0220 	orr.w	r2, r3, #32
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2200      	movs	r2, #0
 800303c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e023      	b.n	800308c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	0c1b      	lsrs	r3, r3, #16
 8003048:	b2db      	uxtb	r3, r3
 800304a:	2b01      	cmp	r3, #1
 800304c:	d10d      	bne.n	800306a <I2C_WaitOnFlagUntilTimeout+0xca>
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	695b      	ldr	r3, [r3, #20]
 8003054:	43da      	mvns	r2, r3
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	4013      	ands	r3, r2
 800305a:	b29b      	uxth	r3, r3
 800305c:	2b00      	cmp	r3, #0
 800305e:	bf0c      	ite	eq
 8003060:	2301      	moveq	r3, #1
 8003062:	2300      	movne	r3, #0
 8003064:	b2db      	uxtb	r3, r3
 8003066:	461a      	mov	r2, r3
 8003068:	e00c      	b.n	8003084 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	699b      	ldr	r3, [r3, #24]
 8003070:	43da      	mvns	r2, r3
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	4013      	ands	r3, r2
 8003076:	b29b      	uxth	r3, r3
 8003078:	2b00      	cmp	r3, #0
 800307a:	bf0c      	ite	eq
 800307c:	2301      	moveq	r3, #1
 800307e:	2300      	movne	r3, #0
 8003080:	b2db      	uxtb	r3, r3
 8003082:	461a      	mov	r2, r3
 8003084:	79fb      	ldrb	r3, [r7, #7]
 8003086:	429a      	cmp	r2, r3
 8003088:	d093      	beq.n	8002fb2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800308a:	2300      	movs	r3, #0
}
 800308c:	4618      	mov	r0, r3
 800308e:	3710      	adds	r7, #16
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}

08003094 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	af00      	add	r7, sp, #0
 800309a:	60f8      	str	r0, [r7, #12]
 800309c:	60b9      	str	r1, [r7, #8]
 800309e:	607a      	str	r2, [r7, #4]
 80030a0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80030a2:	e071      	b.n	8003188 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	695b      	ldr	r3, [r3, #20]
 80030aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030b2:	d123      	bne.n	80030fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030c2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80030cc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2200      	movs	r2, #0
 80030d2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2220      	movs	r2, #32
 80030d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2200      	movs	r2, #0
 80030e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e8:	f043 0204 	orr.w	r2, r3, #4
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2200      	movs	r2, #0
 80030f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e067      	b.n	80031cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003102:	d041      	beq.n	8003188 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003104:	f7fe fdd6 	bl	8001cb4 <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	429a      	cmp	r2, r3
 8003112:	d302      	bcc.n	800311a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d136      	bne.n	8003188 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	0c1b      	lsrs	r3, r3, #16
 800311e:	b2db      	uxtb	r3, r3
 8003120:	2b01      	cmp	r3, #1
 8003122:	d10c      	bne.n	800313e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	695b      	ldr	r3, [r3, #20]
 800312a:	43da      	mvns	r2, r3
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	4013      	ands	r3, r2
 8003130:	b29b      	uxth	r3, r3
 8003132:	2b00      	cmp	r3, #0
 8003134:	bf14      	ite	ne
 8003136:	2301      	movne	r3, #1
 8003138:	2300      	moveq	r3, #0
 800313a:	b2db      	uxtb	r3, r3
 800313c:	e00b      	b.n	8003156 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	699b      	ldr	r3, [r3, #24]
 8003144:	43da      	mvns	r2, r3
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	4013      	ands	r3, r2
 800314a:	b29b      	uxth	r3, r3
 800314c:	2b00      	cmp	r3, #0
 800314e:	bf14      	ite	ne
 8003150:	2301      	movne	r3, #1
 8003152:	2300      	moveq	r3, #0
 8003154:	b2db      	uxtb	r3, r3
 8003156:	2b00      	cmp	r3, #0
 8003158:	d016      	beq.n	8003188 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2200      	movs	r2, #0
 800315e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2220      	movs	r2, #32
 8003164:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2200      	movs	r2, #0
 800316c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003174:	f043 0220 	orr.w	r2, r3, #32
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2200      	movs	r2, #0
 8003180:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e021      	b.n	80031cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	0c1b      	lsrs	r3, r3, #16
 800318c:	b2db      	uxtb	r3, r3
 800318e:	2b01      	cmp	r3, #1
 8003190:	d10c      	bne.n	80031ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	695b      	ldr	r3, [r3, #20]
 8003198:	43da      	mvns	r2, r3
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	4013      	ands	r3, r2
 800319e:	b29b      	uxth	r3, r3
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	bf14      	ite	ne
 80031a4:	2301      	movne	r3, #1
 80031a6:	2300      	moveq	r3, #0
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	e00b      	b.n	80031c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	699b      	ldr	r3, [r3, #24]
 80031b2:	43da      	mvns	r2, r3
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	4013      	ands	r3, r2
 80031b8:	b29b      	uxth	r3, r3
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	bf14      	ite	ne
 80031be:	2301      	movne	r3, #1
 80031c0:	2300      	moveq	r3, #0
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	f47f af6d 	bne.w	80030a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80031ca:	2300      	movs	r3, #0
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3710      	adds	r7, #16
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}

080031d4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b084      	sub	sp, #16
 80031d8:	af00      	add	r7, sp, #0
 80031da:	60f8      	str	r0, [r7, #12]
 80031dc:	60b9      	str	r1, [r7, #8]
 80031de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031e0:	e034      	b.n	800324c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80031e2:	68f8      	ldr	r0, [r7, #12]
 80031e4:	f000 f886 	bl	80032f4 <I2C_IsAcknowledgeFailed>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d001      	beq.n	80031f2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e034      	b.n	800325c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031f8:	d028      	beq.n	800324c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031fa:	f7fe fd5b 	bl	8001cb4 <HAL_GetTick>
 80031fe:	4602      	mov	r2, r0
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	68ba      	ldr	r2, [r7, #8]
 8003206:	429a      	cmp	r2, r3
 8003208:	d302      	bcc.n	8003210 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d11d      	bne.n	800324c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	695b      	ldr	r3, [r3, #20]
 8003216:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800321a:	2b80      	cmp	r3, #128	@ 0x80
 800321c:	d016      	beq.n	800324c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2200      	movs	r2, #0
 8003222:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2220      	movs	r2, #32
 8003228:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2200      	movs	r2, #0
 8003230:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003238:	f043 0220 	orr.w	r2, r3, #32
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2200      	movs	r2, #0
 8003244:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e007      	b.n	800325c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	695b      	ldr	r3, [r3, #20]
 8003252:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003256:	2b80      	cmp	r3, #128	@ 0x80
 8003258:	d1c3      	bne.n	80031e2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800325a:	2300      	movs	r3, #0
}
 800325c:	4618      	mov	r0, r3
 800325e:	3710      	adds	r7, #16
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}

08003264 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b084      	sub	sp, #16
 8003268:	af00      	add	r7, sp, #0
 800326a:	60f8      	str	r0, [r7, #12]
 800326c:	60b9      	str	r1, [r7, #8]
 800326e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003270:	e034      	b.n	80032dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003272:	68f8      	ldr	r0, [r7, #12]
 8003274:	f000 f83e 	bl	80032f4 <I2C_IsAcknowledgeFailed>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d001      	beq.n	8003282 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e034      	b.n	80032ec <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003288:	d028      	beq.n	80032dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800328a:	f7fe fd13 	bl	8001cb4 <HAL_GetTick>
 800328e:	4602      	mov	r2, r0
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	68ba      	ldr	r2, [r7, #8]
 8003296:	429a      	cmp	r2, r3
 8003298:	d302      	bcc.n	80032a0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d11d      	bne.n	80032dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	695b      	ldr	r3, [r3, #20]
 80032a6:	f003 0304 	and.w	r3, r3, #4
 80032aa:	2b04      	cmp	r3, #4
 80032ac:	d016      	beq.n	80032dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2200      	movs	r2, #0
 80032b2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2220      	movs	r2, #32
 80032b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2200      	movs	r2, #0
 80032c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032c8:	f043 0220 	orr.w	r2, r3, #32
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2200      	movs	r2, #0
 80032d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e007      	b.n	80032ec <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	695b      	ldr	r3, [r3, #20]
 80032e2:	f003 0304 	and.w	r3, r3, #4
 80032e6:	2b04      	cmp	r3, #4
 80032e8:	d1c3      	bne.n	8003272 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80032ea:	2300      	movs	r3, #0
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3710      	adds	r7, #16
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	695b      	ldr	r3, [r3, #20]
 8003302:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003306:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800330a:	d11b      	bne.n	8003344 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003314:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2220      	movs	r2, #32
 8003320:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003330:	f043 0204 	orr.w	r2, r3, #4
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2200      	movs	r2, #0
 800333c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e000      	b.n	8003346 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003344:	2300      	movs	r3, #0
}
 8003346:	4618      	mov	r0, r3
 8003348:	370c      	adds	r7, #12
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr
	...

08003354 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b086      	sub	sp, #24
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d101      	bne.n	8003366 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e267      	b.n	8003836 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0301 	and.w	r3, r3, #1
 800336e:	2b00      	cmp	r3, #0
 8003370:	d075      	beq.n	800345e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003372:	4b88      	ldr	r3, [pc, #544]	@ (8003594 <HAL_RCC_OscConfig+0x240>)
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	f003 030c 	and.w	r3, r3, #12
 800337a:	2b04      	cmp	r3, #4
 800337c:	d00c      	beq.n	8003398 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800337e:	4b85      	ldr	r3, [pc, #532]	@ (8003594 <HAL_RCC_OscConfig+0x240>)
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003386:	2b08      	cmp	r3, #8
 8003388:	d112      	bne.n	80033b0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800338a:	4b82      	ldr	r3, [pc, #520]	@ (8003594 <HAL_RCC_OscConfig+0x240>)
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003392:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003396:	d10b      	bne.n	80033b0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003398:	4b7e      	ldr	r3, [pc, #504]	@ (8003594 <HAL_RCC_OscConfig+0x240>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d05b      	beq.n	800345c <HAL_RCC_OscConfig+0x108>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d157      	bne.n	800345c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e242      	b.n	8003836 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033b8:	d106      	bne.n	80033c8 <HAL_RCC_OscConfig+0x74>
 80033ba:	4b76      	ldr	r3, [pc, #472]	@ (8003594 <HAL_RCC_OscConfig+0x240>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a75      	ldr	r2, [pc, #468]	@ (8003594 <HAL_RCC_OscConfig+0x240>)
 80033c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033c4:	6013      	str	r3, [r2, #0]
 80033c6:	e01d      	b.n	8003404 <HAL_RCC_OscConfig+0xb0>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80033d0:	d10c      	bne.n	80033ec <HAL_RCC_OscConfig+0x98>
 80033d2:	4b70      	ldr	r3, [pc, #448]	@ (8003594 <HAL_RCC_OscConfig+0x240>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a6f      	ldr	r2, [pc, #444]	@ (8003594 <HAL_RCC_OscConfig+0x240>)
 80033d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80033dc:	6013      	str	r3, [r2, #0]
 80033de:	4b6d      	ldr	r3, [pc, #436]	@ (8003594 <HAL_RCC_OscConfig+0x240>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a6c      	ldr	r2, [pc, #432]	@ (8003594 <HAL_RCC_OscConfig+0x240>)
 80033e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033e8:	6013      	str	r3, [r2, #0]
 80033ea:	e00b      	b.n	8003404 <HAL_RCC_OscConfig+0xb0>
 80033ec:	4b69      	ldr	r3, [pc, #420]	@ (8003594 <HAL_RCC_OscConfig+0x240>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a68      	ldr	r2, [pc, #416]	@ (8003594 <HAL_RCC_OscConfig+0x240>)
 80033f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033f6:	6013      	str	r3, [r2, #0]
 80033f8:	4b66      	ldr	r3, [pc, #408]	@ (8003594 <HAL_RCC_OscConfig+0x240>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a65      	ldr	r2, [pc, #404]	@ (8003594 <HAL_RCC_OscConfig+0x240>)
 80033fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003402:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d013      	beq.n	8003434 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800340c:	f7fe fc52 	bl	8001cb4 <HAL_GetTick>
 8003410:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003412:	e008      	b.n	8003426 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003414:	f7fe fc4e 	bl	8001cb4 <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	2b64      	cmp	r3, #100	@ 0x64
 8003420:	d901      	bls.n	8003426 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e207      	b.n	8003836 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003426:	4b5b      	ldr	r3, [pc, #364]	@ (8003594 <HAL_RCC_OscConfig+0x240>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d0f0      	beq.n	8003414 <HAL_RCC_OscConfig+0xc0>
 8003432:	e014      	b.n	800345e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003434:	f7fe fc3e 	bl	8001cb4 <HAL_GetTick>
 8003438:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800343a:	e008      	b.n	800344e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800343c:	f7fe fc3a 	bl	8001cb4 <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	2b64      	cmp	r3, #100	@ 0x64
 8003448:	d901      	bls.n	800344e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e1f3      	b.n	8003836 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800344e:	4b51      	ldr	r3, [pc, #324]	@ (8003594 <HAL_RCC_OscConfig+0x240>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d1f0      	bne.n	800343c <HAL_RCC_OscConfig+0xe8>
 800345a:	e000      	b.n	800345e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800345c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0302 	and.w	r3, r3, #2
 8003466:	2b00      	cmp	r3, #0
 8003468:	d063      	beq.n	8003532 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800346a:	4b4a      	ldr	r3, [pc, #296]	@ (8003594 <HAL_RCC_OscConfig+0x240>)
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	f003 030c 	and.w	r3, r3, #12
 8003472:	2b00      	cmp	r3, #0
 8003474:	d00b      	beq.n	800348e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003476:	4b47      	ldr	r3, [pc, #284]	@ (8003594 <HAL_RCC_OscConfig+0x240>)
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800347e:	2b08      	cmp	r3, #8
 8003480:	d11c      	bne.n	80034bc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003482:	4b44      	ldr	r3, [pc, #272]	@ (8003594 <HAL_RCC_OscConfig+0x240>)
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d116      	bne.n	80034bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800348e:	4b41      	ldr	r3, [pc, #260]	@ (8003594 <HAL_RCC_OscConfig+0x240>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0302 	and.w	r3, r3, #2
 8003496:	2b00      	cmp	r3, #0
 8003498:	d005      	beq.n	80034a6 <HAL_RCC_OscConfig+0x152>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d001      	beq.n	80034a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e1c7      	b.n	8003836 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034a6:	4b3b      	ldr	r3, [pc, #236]	@ (8003594 <HAL_RCC_OscConfig+0x240>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	691b      	ldr	r3, [r3, #16]
 80034b2:	00db      	lsls	r3, r3, #3
 80034b4:	4937      	ldr	r1, [pc, #220]	@ (8003594 <HAL_RCC_OscConfig+0x240>)
 80034b6:	4313      	orrs	r3, r2
 80034b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034ba:	e03a      	b.n	8003532 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d020      	beq.n	8003506 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034c4:	4b34      	ldr	r3, [pc, #208]	@ (8003598 <HAL_RCC_OscConfig+0x244>)
 80034c6:	2201      	movs	r2, #1
 80034c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ca:	f7fe fbf3 	bl	8001cb4 <HAL_GetTick>
 80034ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034d0:	e008      	b.n	80034e4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034d2:	f7fe fbef 	bl	8001cb4 <HAL_GetTick>
 80034d6:	4602      	mov	r2, r0
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	2b02      	cmp	r3, #2
 80034de:	d901      	bls.n	80034e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80034e0:	2303      	movs	r3, #3
 80034e2:	e1a8      	b.n	8003836 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034e4:	4b2b      	ldr	r3, [pc, #172]	@ (8003594 <HAL_RCC_OscConfig+0x240>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0302 	and.w	r3, r3, #2
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d0f0      	beq.n	80034d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034f0:	4b28      	ldr	r3, [pc, #160]	@ (8003594 <HAL_RCC_OscConfig+0x240>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	691b      	ldr	r3, [r3, #16]
 80034fc:	00db      	lsls	r3, r3, #3
 80034fe:	4925      	ldr	r1, [pc, #148]	@ (8003594 <HAL_RCC_OscConfig+0x240>)
 8003500:	4313      	orrs	r3, r2
 8003502:	600b      	str	r3, [r1, #0]
 8003504:	e015      	b.n	8003532 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003506:	4b24      	ldr	r3, [pc, #144]	@ (8003598 <HAL_RCC_OscConfig+0x244>)
 8003508:	2200      	movs	r2, #0
 800350a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800350c:	f7fe fbd2 	bl	8001cb4 <HAL_GetTick>
 8003510:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003512:	e008      	b.n	8003526 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003514:	f7fe fbce 	bl	8001cb4 <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	2b02      	cmp	r3, #2
 8003520:	d901      	bls.n	8003526 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e187      	b.n	8003836 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003526:	4b1b      	ldr	r3, [pc, #108]	@ (8003594 <HAL_RCC_OscConfig+0x240>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0302 	and.w	r3, r3, #2
 800352e:	2b00      	cmp	r3, #0
 8003530:	d1f0      	bne.n	8003514 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0308 	and.w	r3, r3, #8
 800353a:	2b00      	cmp	r3, #0
 800353c:	d036      	beq.n	80035ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	695b      	ldr	r3, [r3, #20]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d016      	beq.n	8003574 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003546:	4b15      	ldr	r3, [pc, #84]	@ (800359c <HAL_RCC_OscConfig+0x248>)
 8003548:	2201      	movs	r2, #1
 800354a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800354c:	f7fe fbb2 	bl	8001cb4 <HAL_GetTick>
 8003550:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003552:	e008      	b.n	8003566 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003554:	f7fe fbae 	bl	8001cb4 <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	2b02      	cmp	r3, #2
 8003560:	d901      	bls.n	8003566 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e167      	b.n	8003836 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003566:	4b0b      	ldr	r3, [pc, #44]	@ (8003594 <HAL_RCC_OscConfig+0x240>)
 8003568:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800356a:	f003 0302 	and.w	r3, r3, #2
 800356e:	2b00      	cmp	r3, #0
 8003570:	d0f0      	beq.n	8003554 <HAL_RCC_OscConfig+0x200>
 8003572:	e01b      	b.n	80035ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003574:	4b09      	ldr	r3, [pc, #36]	@ (800359c <HAL_RCC_OscConfig+0x248>)
 8003576:	2200      	movs	r2, #0
 8003578:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800357a:	f7fe fb9b 	bl	8001cb4 <HAL_GetTick>
 800357e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003580:	e00e      	b.n	80035a0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003582:	f7fe fb97 	bl	8001cb4 <HAL_GetTick>
 8003586:	4602      	mov	r2, r0
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	1ad3      	subs	r3, r2, r3
 800358c:	2b02      	cmp	r3, #2
 800358e:	d907      	bls.n	80035a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003590:	2303      	movs	r3, #3
 8003592:	e150      	b.n	8003836 <HAL_RCC_OscConfig+0x4e2>
 8003594:	40023800 	.word	0x40023800
 8003598:	42470000 	.word	0x42470000
 800359c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035a0:	4b88      	ldr	r3, [pc, #544]	@ (80037c4 <HAL_RCC_OscConfig+0x470>)
 80035a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035a4:	f003 0302 	and.w	r3, r3, #2
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d1ea      	bne.n	8003582 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 0304 	and.w	r3, r3, #4
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	f000 8097 	beq.w	80036e8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035ba:	2300      	movs	r3, #0
 80035bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035be:	4b81      	ldr	r3, [pc, #516]	@ (80037c4 <HAL_RCC_OscConfig+0x470>)
 80035c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d10f      	bne.n	80035ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035ca:	2300      	movs	r3, #0
 80035cc:	60bb      	str	r3, [r7, #8]
 80035ce:	4b7d      	ldr	r3, [pc, #500]	@ (80037c4 <HAL_RCC_OscConfig+0x470>)
 80035d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035d2:	4a7c      	ldr	r2, [pc, #496]	@ (80037c4 <HAL_RCC_OscConfig+0x470>)
 80035d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80035da:	4b7a      	ldr	r3, [pc, #488]	@ (80037c4 <HAL_RCC_OscConfig+0x470>)
 80035dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035e2:	60bb      	str	r3, [r7, #8]
 80035e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035e6:	2301      	movs	r3, #1
 80035e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035ea:	4b77      	ldr	r3, [pc, #476]	@ (80037c8 <HAL_RCC_OscConfig+0x474>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d118      	bne.n	8003628 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035f6:	4b74      	ldr	r3, [pc, #464]	@ (80037c8 <HAL_RCC_OscConfig+0x474>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a73      	ldr	r2, [pc, #460]	@ (80037c8 <HAL_RCC_OscConfig+0x474>)
 80035fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003600:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003602:	f7fe fb57 	bl	8001cb4 <HAL_GetTick>
 8003606:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003608:	e008      	b.n	800361c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800360a:	f7fe fb53 	bl	8001cb4 <HAL_GetTick>
 800360e:	4602      	mov	r2, r0
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	1ad3      	subs	r3, r2, r3
 8003614:	2b02      	cmp	r3, #2
 8003616:	d901      	bls.n	800361c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003618:	2303      	movs	r3, #3
 800361a:	e10c      	b.n	8003836 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800361c:	4b6a      	ldr	r3, [pc, #424]	@ (80037c8 <HAL_RCC_OscConfig+0x474>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003624:	2b00      	cmp	r3, #0
 8003626:	d0f0      	beq.n	800360a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	2b01      	cmp	r3, #1
 800362e:	d106      	bne.n	800363e <HAL_RCC_OscConfig+0x2ea>
 8003630:	4b64      	ldr	r3, [pc, #400]	@ (80037c4 <HAL_RCC_OscConfig+0x470>)
 8003632:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003634:	4a63      	ldr	r2, [pc, #396]	@ (80037c4 <HAL_RCC_OscConfig+0x470>)
 8003636:	f043 0301 	orr.w	r3, r3, #1
 800363a:	6713      	str	r3, [r2, #112]	@ 0x70
 800363c:	e01c      	b.n	8003678 <HAL_RCC_OscConfig+0x324>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	2b05      	cmp	r3, #5
 8003644:	d10c      	bne.n	8003660 <HAL_RCC_OscConfig+0x30c>
 8003646:	4b5f      	ldr	r3, [pc, #380]	@ (80037c4 <HAL_RCC_OscConfig+0x470>)
 8003648:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800364a:	4a5e      	ldr	r2, [pc, #376]	@ (80037c4 <HAL_RCC_OscConfig+0x470>)
 800364c:	f043 0304 	orr.w	r3, r3, #4
 8003650:	6713      	str	r3, [r2, #112]	@ 0x70
 8003652:	4b5c      	ldr	r3, [pc, #368]	@ (80037c4 <HAL_RCC_OscConfig+0x470>)
 8003654:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003656:	4a5b      	ldr	r2, [pc, #364]	@ (80037c4 <HAL_RCC_OscConfig+0x470>)
 8003658:	f043 0301 	orr.w	r3, r3, #1
 800365c:	6713      	str	r3, [r2, #112]	@ 0x70
 800365e:	e00b      	b.n	8003678 <HAL_RCC_OscConfig+0x324>
 8003660:	4b58      	ldr	r3, [pc, #352]	@ (80037c4 <HAL_RCC_OscConfig+0x470>)
 8003662:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003664:	4a57      	ldr	r2, [pc, #348]	@ (80037c4 <HAL_RCC_OscConfig+0x470>)
 8003666:	f023 0301 	bic.w	r3, r3, #1
 800366a:	6713      	str	r3, [r2, #112]	@ 0x70
 800366c:	4b55      	ldr	r3, [pc, #340]	@ (80037c4 <HAL_RCC_OscConfig+0x470>)
 800366e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003670:	4a54      	ldr	r2, [pc, #336]	@ (80037c4 <HAL_RCC_OscConfig+0x470>)
 8003672:	f023 0304 	bic.w	r3, r3, #4
 8003676:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d015      	beq.n	80036ac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003680:	f7fe fb18 	bl	8001cb4 <HAL_GetTick>
 8003684:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003686:	e00a      	b.n	800369e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003688:	f7fe fb14 	bl	8001cb4 <HAL_GetTick>
 800368c:	4602      	mov	r2, r0
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003696:	4293      	cmp	r3, r2
 8003698:	d901      	bls.n	800369e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	e0cb      	b.n	8003836 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800369e:	4b49      	ldr	r3, [pc, #292]	@ (80037c4 <HAL_RCC_OscConfig+0x470>)
 80036a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036a2:	f003 0302 	and.w	r3, r3, #2
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d0ee      	beq.n	8003688 <HAL_RCC_OscConfig+0x334>
 80036aa:	e014      	b.n	80036d6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036ac:	f7fe fb02 	bl	8001cb4 <HAL_GetTick>
 80036b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036b2:	e00a      	b.n	80036ca <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036b4:	f7fe fafe 	bl	8001cb4 <HAL_GetTick>
 80036b8:	4602      	mov	r2, r0
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d901      	bls.n	80036ca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e0b5      	b.n	8003836 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036ca:	4b3e      	ldr	r3, [pc, #248]	@ (80037c4 <HAL_RCC_OscConfig+0x470>)
 80036cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036ce:	f003 0302 	and.w	r3, r3, #2
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d1ee      	bne.n	80036b4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80036d6:	7dfb      	ldrb	r3, [r7, #23]
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d105      	bne.n	80036e8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036dc:	4b39      	ldr	r3, [pc, #228]	@ (80037c4 <HAL_RCC_OscConfig+0x470>)
 80036de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036e0:	4a38      	ldr	r2, [pc, #224]	@ (80037c4 <HAL_RCC_OscConfig+0x470>)
 80036e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80036e6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	699b      	ldr	r3, [r3, #24]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	f000 80a1 	beq.w	8003834 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80036f2:	4b34      	ldr	r3, [pc, #208]	@ (80037c4 <HAL_RCC_OscConfig+0x470>)
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	f003 030c 	and.w	r3, r3, #12
 80036fa:	2b08      	cmp	r3, #8
 80036fc:	d05c      	beq.n	80037b8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	699b      	ldr	r3, [r3, #24]
 8003702:	2b02      	cmp	r3, #2
 8003704:	d141      	bne.n	800378a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003706:	4b31      	ldr	r3, [pc, #196]	@ (80037cc <HAL_RCC_OscConfig+0x478>)
 8003708:	2200      	movs	r2, #0
 800370a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800370c:	f7fe fad2 	bl	8001cb4 <HAL_GetTick>
 8003710:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003712:	e008      	b.n	8003726 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003714:	f7fe face 	bl	8001cb4 <HAL_GetTick>
 8003718:	4602      	mov	r2, r0
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	2b02      	cmp	r3, #2
 8003720:	d901      	bls.n	8003726 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e087      	b.n	8003836 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003726:	4b27      	ldr	r3, [pc, #156]	@ (80037c4 <HAL_RCC_OscConfig+0x470>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d1f0      	bne.n	8003714 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	69da      	ldr	r2, [r3, #28]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a1b      	ldr	r3, [r3, #32]
 800373a:	431a      	orrs	r2, r3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003740:	019b      	lsls	r3, r3, #6
 8003742:	431a      	orrs	r2, r3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003748:	085b      	lsrs	r3, r3, #1
 800374a:	3b01      	subs	r3, #1
 800374c:	041b      	lsls	r3, r3, #16
 800374e:	431a      	orrs	r2, r3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003754:	061b      	lsls	r3, r3, #24
 8003756:	491b      	ldr	r1, [pc, #108]	@ (80037c4 <HAL_RCC_OscConfig+0x470>)
 8003758:	4313      	orrs	r3, r2
 800375a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800375c:	4b1b      	ldr	r3, [pc, #108]	@ (80037cc <HAL_RCC_OscConfig+0x478>)
 800375e:	2201      	movs	r2, #1
 8003760:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003762:	f7fe faa7 	bl	8001cb4 <HAL_GetTick>
 8003766:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003768:	e008      	b.n	800377c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800376a:	f7fe faa3 	bl	8001cb4 <HAL_GetTick>
 800376e:	4602      	mov	r2, r0
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	1ad3      	subs	r3, r2, r3
 8003774:	2b02      	cmp	r3, #2
 8003776:	d901      	bls.n	800377c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003778:	2303      	movs	r3, #3
 800377a:	e05c      	b.n	8003836 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800377c:	4b11      	ldr	r3, [pc, #68]	@ (80037c4 <HAL_RCC_OscConfig+0x470>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003784:	2b00      	cmp	r3, #0
 8003786:	d0f0      	beq.n	800376a <HAL_RCC_OscConfig+0x416>
 8003788:	e054      	b.n	8003834 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800378a:	4b10      	ldr	r3, [pc, #64]	@ (80037cc <HAL_RCC_OscConfig+0x478>)
 800378c:	2200      	movs	r2, #0
 800378e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003790:	f7fe fa90 	bl	8001cb4 <HAL_GetTick>
 8003794:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003796:	e008      	b.n	80037aa <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003798:	f7fe fa8c 	bl	8001cb4 <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d901      	bls.n	80037aa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	e045      	b.n	8003836 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037aa:	4b06      	ldr	r3, [pc, #24]	@ (80037c4 <HAL_RCC_OscConfig+0x470>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d1f0      	bne.n	8003798 <HAL_RCC_OscConfig+0x444>
 80037b6:	e03d      	b.n	8003834 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	699b      	ldr	r3, [r3, #24]
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d107      	bne.n	80037d0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e038      	b.n	8003836 <HAL_RCC_OscConfig+0x4e2>
 80037c4:	40023800 	.word	0x40023800
 80037c8:	40007000 	.word	0x40007000
 80037cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80037d0:	4b1b      	ldr	r3, [pc, #108]	@ (8003840 <HAL_RCC_OscConfig+0x4ec>)
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	699b      	ldr	r3, [r3, #24]
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d028      	beq.n	8003830 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d121      	bne.n	8003830 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d11a      	bne.n	8003830 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037fa:	68fa      	ldr	r2, [r7, #12]
 80037fc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003800:	4013      	ands	r3, r2
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003806:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003808:	4293      	cmp	r3, r2
 800380a:	d111      	bne.n	8003830 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003816:	085b      	lsrs	r3, r3, #1
 8003818:	3b01      	subs	r3, #1
 800381a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800381c:	429a      	cmp	r2, r3
 800381e:	d107      	bne.n	8003830 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800382a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800382c:	429a      	cmp	r2, r3
 800382e:	d001      	beq.n	8003834 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e000      	b.n	8003836 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003834:	2300      	movs	r3, #0
}
 8003836:	4618      	mov	r0, r3
 8003838:	3718      	adds	r7, #24
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	40023800 	.word	0x40023800

08003844 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b084      	sub	sp, #16
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d101      	bne.n	8003858 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e0cc      	b.n	80039f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003858:	4b68      	ldr	r3, [pc, #416]	@ (80039fc <HAL_RCC_ClockConfig+0x1b8>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0307 	and.w	r3, r3, #7
 8003860:	683a      	ldr	r2, [r7, #0]
 8003862:	429a      	cmp	r2, r3
 8003864:	d90c      	bls.n	8003880 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003866:	4b65      	ldr	r3, [pc, #404]	@ (80039fc <HAL_RCC_ClockConfig+0x1b8>)
 8003868:	683a      	ldr	r2, [r7, #0]
 800386a:	b2d2      	uxtb	r2, r2
 800386c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800386e:	4b63      	ldr	r3, [pc, #396]	@ (80039fc <HAL_RCC_ClockConfig+0x1b8>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 0307 	and.w	r3, r3, #7
 8003876:	683a      	ldr	r2, [r7, #0]
 8003878:	429a      	cmp	r2, r3
 800387a:	d001      	beq.n	8003880 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e0b8      	b.n	80039f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 0302 	and.w	r3, r3, #2
 8003888:	2b00      	cmp	r3, #0
 800388a:	d020      	beq.n	80038ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 0304 	and.w	r3, r3, #4
 8003894:	2b00      	cmp	r3, #0
 8003896:	d005      	beq.n	80038a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003898:	4b59      	ldr	r3, [pc, #356]	@ (8003a00 <HAL_RCC_ClockConfig+0x1bc>)
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	4a58      	ldr	r2, [pc, #352]	@ (8003a00 <HAL_RCC_ClockConfig+0x1bc>)
 800389e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80038a2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0308 	and.w	r3, r3, #8
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d005      	beq.n	80038bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038b0:	4b53      	ldr	r3, [pc, #332]	@ (8003a00 <HAL_RCC_ClockConfig+0x1bc>)
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	4a52      	ldr	r2, [pc, #328]	@ (8003a00 <HAL_RCC_ClockConfig+0x1bc>)
 80038b6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80038ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038bc:	4b50      	ldr	r3, [pc, #320]	@ (8003a00 <HAL_RCC_ClockConfig+0x1bc>)
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	494d      	ldr	r1, [pc, #308]	@ (8003a00 <HAL_RCC_ClockConfig+0x1bc>)
 80038ca:	4313      	orrs	r3, r2
 80038cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0301 	and.w	r3, r3, #1
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d044      	beq.n	8003964 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d107      	bne.n	80038f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038e2:	4b47      	ldr	r3, [pc, #284]	@ (8003a00 <HAL_RCC_ClockConfig+0x1bc>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d119      	bne.n	8003922 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e07f      	b.n	80039f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d003      	beq.n	8003902 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038fe:	2b03      	cmp	r3, #3
 8003900:	d107      	bne.n	8003912 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003902:	4b3f      	ldr	r3, [pc, #252]	@ (8003a00 <HAL_RCC_ClockConfig+0x1bc>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d109      	bne.n	8003922 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e06f      	b.n	80039f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003912:	4b3b      	ldr	r3, [pc, #236]	@ (8003a00 <HAL_RCC_ClockConfig+0x1bc>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0302 	and.w	r3, r3, #2
 800391a:	2b00      	cmp	r3, #0
 800391c:	d101      	bne.n	8003922 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e067      	b.n	80039f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003922:	4b37      	ldr	r3, [pc, #220]	@ (8003a00 <HAL_RCC_ClockConfig+0x1bc>)
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	f023 0203 	bic.w	r2, r3, #3
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	4934      	ldr	r1, [pc, #208]	@ (8003a00 <HAL_RCC_ClockConfig+0x1bc>)
 8003930:	4313      	orrs	r3, r2
 8003932:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003934:	f7fe f9be 	bl	8001cb4 <HAL_GetTick>
 8003938:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800393a:	e00a      	b.n	8003952 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800393c:	f7fe f9ba 	bl	8001cb4 <HAL_GetTick>
 8003940:	4602      	mov	r2, r0
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	f241 3288 	movw	r2, #5000	@ 0x1388
 800394a:	4293      	cmp	r3, r2
 800394c:	d901      	bls.n	8003952 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e04f      	b.n	80039f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003952:	4b2b      	ldr	r3, [pc, #172]	@ (8003a00 <HAL_RCC_ClockConfig+0x1bc>)
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	f003 020c 	and.w	r2, r3, #12
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	429a      	cmp	r2, r3
 8003962:	d1eb      	bne.n	800393c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003964:	4b25      	ldr	r3, [pc, #148]	@ (80039fc <HAL_RCC_ClockConfig+0x1b8>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 0307 	and.w	r3, r3, #7
 800396c:	683a      	ldr	r2, [r7, #0]
 800396e:	429a      	cmp	r2, r3
 8003970:	d20c      	bcs.n	800398c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003972:	4b22      	ldr	r3, [pc, #136]	@ (80039fc <HAL_RCC_ClockConfig+0x1b8>)
 8003974:	683a      	ldr	r2, [r7, #0]
 8003976:	b2d2      	uxtb	r2, r2
 8003978:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800397a:	4b20      	ldr	r3, [pc, #128]	@ (80039fc <HAL_RCC_ClockConfig+0x1b8>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0307 	and.w	r3, r3, #7
 8003982:	683a      	ldr	r2, [r7, #0]
 8003984:	429a      	cmp	r2, r3
 8003986:	d001      	beq.n	800398c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e032      	b.n	80039f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 0304 	and.w	r3, r3, #4
 8003994:	2b00      	cmp	r3, #0
 8003996:	d008      	beq.n	80039aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003998:	4b19      	ldr	r3, [pc, #100]	@ (8003a00 <HAL_RCC_ClockConfig+0x1bc>)
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	4916      	ldr	r1, [pc, #88]	@ (8003a00 <HAL_RCC_ClockConfig+0x1bc>)
 80039a6:	4313      	orrs	r3, r2
 80039a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 0308 	and.w	r3, r3, #8
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d009      	beq.n	80039ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039b6:	4b12      	ldr	r3, [pc, #72]	@ (8003a00 <HAL_RCC_ClockConfig+0x1bc>)
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	691b      	ldr	r3, [r3, #16]
 80039c2:	00db      	lsls	r3, r3, #3
 80039c4:	490e      	ldr	r1, [pc, #56]	@ (8003a00 <HAL_RCC_ClockConfig+0x1bc>)
 80039c6:	4313      	orrs	r3, r2
 80039c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80039ca:	f000 f821 	bl	8003a10 <HAL_RCC_GetSysClockFreq>
 80039ce:	4602      	mov	r2, r0
 80039d0:	4b0b      	ldr	r3, [pc, #44]	@ (8003a00 <HAL_RCC_ClockConfig+0x1bc>)
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	091b      	lsrs	r3, r3, #4
 80039d6:	f003 030f 	and.w	r3, r3, #15
 80039da:	490a      	ldr	r1, [pc, #40]	@ (8003a04 <HAL_RCC_ClockConfig+0x1c0>)
 80039dc:	5ccb      	ldrb	r3, [r1, r3]
 80039de:	fa22 f303 	lsr.w	r3, r2, r3
 80039e2:	4a09      	ldr	r2, [pc, #36]	@ (8003a08 <HAL_RCC_ClockConfig+0x1c4>)
 80039e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80039e6:	4b09      	ldr	r3, [pc, #36]	@ (8003a0c <HAL_RCC_ClockConfig+0x1c8>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4618      	mov	r0, r3
 80039ec:	f7fe f91e 	bl	8001c2c <HAL_InitTick>

  return HAL_OK;
 80039f0:	2300      	movs	r3, #0
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3710      	adds	r7, #16
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	40023c00 	.word	0x40023c00
 8003a00:	40023800 	.word	0x40023800
 8003a04:	08005320 	.word	0x08005320
 8003a08:	20000000 	.word	0x20000000
 8003a0c:	20000004 	.word	0x20000004

08003a10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a14:	b090      	sub	sp, #64	@ 0x40
 8003a16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003a20:	2300      	movs	r3, #0
 8003a22:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003a24:	2300      	movs	r3, #0
 8003a26:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a28:	4b59      	ldr	r3, [pc, #356]	@ (8003b90 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	f003 030c 	and.w	r3, r3, #12
 8003a30:	2b08      	cmp	r3, #8
 8003a32:	d00d      	beq.n	8003a50 <HAL_RCC_GetSysClockFreq+0x40>
 8003a34:	2b08      	cmp	r3, #8
 8003a36:	f200 80a1 	bhi.w	8003b7c <HAL_RCC_GetSysClockFreq+0x16c>
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d002      	beq.n	8003a44 <HAL_RCC_GetSysClockFreq+0x34>
 8003a3e:	2b04      	cmp	r3, #4
 8003a40:	d003      	beq.n	8003a4a <HAL_RCC_GetSysClockFreq+0x3a>
 8003a42:	e09b      	b.n	8003b7c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a44:	4b53      	ldr	r3, [pc, #332]	@ (8003b94 <HAL_RCC_GetSysClockFreq+0x184>)
 8003a46:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003a48:	e09b      	b.n	8003b82 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a4a:	4b53      	ldr	r3, [pc, #332]	@ (8003b98 <HAL_RCC_GetSysClockFreq+0x188>)
 8003a4c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003a4e:	e098      	b.n	8003b82 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a50:	4b4f      	ldr	r3, [pc, #316]	@ (8003b90 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003a58:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a5a:	4b4d      	ldr	r3, [pc, #308]	@ (8003b90 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d028      	beq.n	8003ab8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a66:	4b4a      	ldr	r3, [pc, #296]	@ (8003b90 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	099b      	lsrs	r3, r3, #6
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	623b      	str	r3, [r7, #32]
 8003a70:	627a      	str	r2, [r7, #36]	@ 0x24
 8003a72:	6a3b      	ldr	r3, [r7, #32]
 8003a74:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003a78:	2100      	movs	r1, #0
 8003a7a:	4b47      	ldr	r3, [pc, #284]	@ (8003b98 <HAL_RCC_GetSysClockFreq+0x188>)
 8003a7c:	fb03 f201 	mul.w	r2, r3, r1
 8003a80:	2300      	movs	r3, #0
 8003a82:	fb00 f303 	mul.w	r3, r0, r3
 8003a86:	4413      	add	r3, r2
 8003a88:	4a43      	ldr	r2, [pc, #268]	@ (8003b98 <HAL_RCC_GetSysClockFreq+0x188>)
 8003a8a:	fba0 1202 	umull	r1, r2, r0, r2
 8003a8e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003a90:	460a      	mov	r2, r1
 8003a92:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003a94:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a96:	4413      	add	r3, r2
 8003a98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	61bb      	str	r3, [r7, #24]
 8003aa0:	61fa      	str	r2, [r7, #28]
 8003aa2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003aa6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003aaa:	f7fd f887 	bl	8000bbc <__aeabi_uldivmod>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	460b      	mov	r3, r1
 8003ab2:	4613      	mov	r3, r2
 8003ab4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ab6:	e053      	b.n	8003b60 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ab8:	4b35      	ldr	r3, [pc, #212]	@ (8003b90 <HAL_RCC_GetSysClockFreq+0x180>)
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	099b      	lsrs	r3, r3, #6
 8003abe:	2200      	movs	r2, #0
 8003ac0:	613b      	str	r3, [r7, #16]
 8003ac2:	617a      	str	r2, [r7, #20]
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003aca:	f04f 0b00 	mov.w	fp, #0
 8003ace:	4652      	mov	r2, sl
 8003ad0:	465b      	mov	r3, fp
 8003ad2:	f04f 0000 	mov.w	r0, #0
 8003ad6:	f04f 0100 	mov.w	r1, #0
 8003ada:	0159      	lsls	r1, r3, #5
 8003adc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ae0:	0150      	lsls	r0, r2, #5
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	460b      	mov	r3, r1
 8003ae6:	ebb2 080a 	subs.w	r8, r2, sl
 8003aea:	eb63 090b 	sbc.w	r9, r3, fp
 8003aee:	f04f 0200 	mov.w	r2, #0
 8003af2:	f04f 0300 	mov.w	r3, #0
 8003af6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003afa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003afe:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003b02:	ebb2 0408 	subs.w	r4, r2, r8
 8003b06:	eb63 0509 	sbc.w	r5, r3, r9
 8003b0a:	f04f 0200 	mov.w	r2, #0
 8003b0e:	f04f 0300 	mov.w	r3, #0
 8003b12:	00eb      	lsls	r3, r5, #3
 8003b14:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b18:	00e2      	lsls	r2, r4, #3
 8003b1a:	4614      	mov	r4, r2
 8003b1c:	461d      	mov	r5, r3
 8003b1e:	eb14 030a 	adds.w	r3, r4, sl
 8003b22:	603b      	str	r3, [r7, #0]
 8003b24:	eb45 030b 	adc.w	r3, r5, fp
 8003b28:	607b      	str	r3, [r7, #4]
 8003b2a:	f04f 0200 	mov.w	r2, #0
 8003b2e:	f04f 0300 	mov.w	r3, #0
 8003b32:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b36:	4629      	mov	r1, r5
 8003b38:	028b      	lsls	r3, r1, #10
 8003b3a:	4621      	mov	r1, r4
 8003b3c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b40:	4621      	mov	r1, r4
 8003b42:	028a      	lsls	r2, r1, #10
 8003b44:	4610      	mov	r0, r2
 8003b46:	4619      	mov	r1, r3
 8003b48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	60bb      	str	r3, [r7, #8]
 8003b4e:	60fa      	str	r2, [r7, #12]
 8003b50:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b54:	f7fd f832 	bl	8000bbc <__aeabi_uldivmod>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	460b      	mov	r3, r1
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003b60:	4b0b      	ldr	r3, [pc, #44]	@ (8003b90 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	0c1b      	lsrs	r3, r3, #16
 8003b66:	f003 0303 	and.w	r3, r3, #3
 8003b6a:	3301      	adds	r3, #1
 8003b6c:	005b      	lsls	r3, r3, #1
 8003b6e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003b70:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003b72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b74:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b78:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003b7a:	e002      	b.n	8003b82 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b7c:	4b05      	ldr	r3, [pc, #20]	@ (8003b94 <HAL_RCC_GetSysClockFreq+0x184>)
 8003b7e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003b80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3740      	adds	r7, #64	@ 0x40
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b8e:	bf00      	nop
 8003b90:	40023800 	.word	0x40023800
 8003b94:	00f42400 	.word	0x00f42400
 8003b98:	017d7840 	.word	0x017d7840

08003b9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ba0:	4b03      	ldr	r3, [pc, #12]	@ (8003bb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr
 8003bae:	bf00      	nop
 8003bb0:	20000000 	.word	0x20000000

08003bb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003bb8:	f7ff fff0 	bl	8003b9c <HAL_RCC_GetHCLKFreq>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	4b05      	ldr	r3, [pc, #20]	@ (8003bd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	0a9b      	lsrs	r3, r3, #10
 8003bc4:	f003 0307 	and.w	r3, r3, #7
 8003bc8:	4903      	ldr	r1, [pc, #12]	@ (8003bd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bca:	5ccb      	ldrb	r3, [r1, r3]
 8003bcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	40023800 	.word	0x40023800
 8003bd8:	08005330 	.word	0x08005330

08003bdc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b082      	sub	sp, #8
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d101      	bne.n	8003bee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e041      	b.n	8003c72 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d106      	bne.n	8003c08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f7fd fef2 	bl	80019ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2202      	movs	r2, #2
 8003c0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	3304      	adds	r3, #4
 8003c18:	4619      	mov	r1, r3
 8003c1a:	4610      	mov	r0, r2
 8003c1c:	f000 fad8 	bl	80041d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2201      	movs	r2, #1
 8003c34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2201      	movs	r2, #1
 8003c54:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2201      	movs	r2, #1
 8003c64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003c70:	2300      	movs	r3, #0
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3708      	adds	r7, #8
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}

08003c7a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003c7a:	b580      	push	{r7, lr}
 8003c7c:	b082      	sub	sp, #8
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d101      	bne.n	8003c8c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e041      	b.n	8003d10 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d106      	bne.n	8003ca6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	f000 f839 	bl	8003d18 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2202      	movs	r2, #2
 8003caa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	3304      	adds	r3, #4
 8003cb6:	4619      	mov	r1, r3
 8003cb8:	4610      	mov	r0, r2
 8003cba:	f000 fa89 	bl	80041d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2201      	movs	r2, #1
 8003cca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2201      	movs	r2, #1
 8003cda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2201      	movs	r2, #1
 8003cea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2201      	movs	r2, #1
 8003d02:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2201      	movs	r2, #1
 8003d0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003d0e:	2300      	movs	r3, #0
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	3708      	adds	r7, #8
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}

08003d18 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003d20:	bf00      	nop
 8003d22:	370c      	adds	r7, #12
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr

08003d2c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b084      	sub	sp, #16
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d109      	bne.n	8003d50 <HAL_TIM_PWM_Start+0x24>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	bf14      	ite	ne
 8003d48:	2301      	movne	r3, #1
 8003d4a:	2300      	moveq	r3, #0
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	e022      	b.n	8003d96 <HAL_TIM_PWM_Start+0x6a>
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	2b04      	cmp	r3, #4
 8003d54:	d109      	bne.n	8003d6a <HAL_TIM_PWM_Start+0x3e>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	bf14      	ite	ne
 8003d62:	2301      	movne	r3, #1
 8003d64:	2300      	moveq	r3, #0
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	e015      	b.n	8003d96 <HAL_TIM_PWM_Start+0x6a>
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	2b08      	cmp	r3, #8
 8003d6e:	d109      	bne.n	8003d84 <HAL_TIM_PWM_Start+0x58>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	bf14      	ite	ne
 8003d7c:	2301      	movne	r3, #1
 8003d7e:	2300      	moveq	r3, #0
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	e008      	b.n	8003d96 <HAL_TIM_PWM_Start+0x6a>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	bf14      	ite	ne
 8003d90:	2301      	movne	r3, #1
 8003d92:	2300      	moveq	r3, #0
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d001      	beq.n	8003d9e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e07c      	b.n	8003e98 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d104      	bne.n	8003dae <HAL_TIM_PWM_Start+0x82>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2202      	movs	r2, #2
 8003da8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003dac:	e013      	b.n	8003dd6 <HAL_TIM_PWM_Start+0xaa>
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	2b04      	cmp	r3, #4
 8003db2:	d104      	bne.n	8003dbe <HAL_TIM_PWM_Start+0x92>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2202      	movs	r2, #2
 8003db8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003dbc:	e00b      	b.n	8003dd6 <HAL_TIM_PWM_Start+0xaa>
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	2b08      	cmp	r3, #8
 8003dc2:	d104      	bne.n	8003dce <HAL_TIM_PWM_Start+0xa2>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2202      	movs	r2, #2
 8003dc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003dcc:	e003      	b.n	8003dd6 <HAL_TIM_PWM_Start+0xaa>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2202      	movs	r2, #2
 8003dd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	6839      	ldr	r1, [r7, #0]
 8003dde:	4618      	mov	r0, r3
 8003de0:	f000 fcec 	bl	80047bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a2d      	ldr	r2, [pc, #180]	@ (8003ea0 <HAL_TIM_PWM_Start+0x174>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d004      	beq.n	8003df8 <HAL_TIM_PWM_Start+0xcc>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a2c      	ldr	r2, [pc, #176]	@ (8003ea4 <HAL_TIM_PWM_Start+0x178>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d101      	bne.n	8003dfc <HAL_TIM_PWM_Start+0xd0>
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e000      	b.n	8003dfe <HAL_TIM_PWM_Start+0xd2>
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d007      	beq.n	8003e12 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003e10:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a22      	ldr	r2, [pc, #136]	@ (8003ea0 <HAL_TIM_PWM_Start+0x174>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d022      	beq.n	8003e62 <HAL_TIM_PWM_Start+0x136>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e24:	d01d      	beq.n	8003e62 <HAL_TIM_PWM_Start+0x136>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a1f      	ldr	r2, [pc, #124]	@ (8003ea8 <HAL_TIM_PWM_Start+0x17c>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d018      	beq.n	8003e62 <HAL_TIM_PWM_Start+0x136>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a1d      	ldr	r2, [pc, #116]	@ (8003eac <HAL_TIM_PWM_Start+0x180>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d013      	beq.n	8003e62 <HAL_TIM_PWM_Start+0x136>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a1c      	ldr	r2, [pc, #112]	@ (8003eb0 <HAL_TIM_PWM_Start+0x184>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d00e      	beq.n	8003e62 <HAL_TIM_PWM_Start+0x136>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a16      	ldr	r2, [pc, #88]	@ (8003ea4 <HAL_TIM_PWM_Start+0x178>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d009      	beq.n	8003e62 <HAL_TIM_PWM_Start+0x136>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a18      	ldr	r2, [pc, #96]	@ (8003eb4 <HAL_TIM_PWM_Start+0x188>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d004      	beq.n	8003e62 <HAL_TIM_PWM_Start+0x136>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a16      	ldr	r2, [pc, #88]	@ (8003eb8 <HAL_TIM_PWM_Start+0x18c>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d111      	bne.n	8003e86 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	f003 0307 	and.w	r3, r3, #7
 8003e6c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2b06      	cmp	r3, #6
 8003e72:	d010      	beq.n	8003e96 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f042 0201 	orr.w	r2, r2, #1
 8003e82:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e84:	e007      	b.n	8003e96 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f042 0201 	orr.w	r2, r2, #1
 8003e94:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e96:	2300      	movs	r3, #0
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3710      	adds	r7, #16
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}
 8003ea0:	40010000 	.word	0x40010000
 8003ea4:	40010400 	.word	0x40010400
 8003ea8:	40000400 	.word	0x40000400
 8003eac:	40000800 	.word	0x40000800
 8003eb0:	40000c00 	.word	0x40000c00
 8003eb4:	40014000 	.word	0x40014000
 8003eb8:	40001800 	.word	0x40001800

08003ebc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b086      	sub	sp, #24
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	60f8      	str	r0, [r7, #12]
 8003ec4:	60b9      	str	r1, [r7, #8]
 8003ec6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d101      	bne.n	8003eda <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003ed6:	2302      	movs	r3, #2
 8003ed8:	e0ae      	b.n	8004038 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2201      	movs	r2, #1
 8003ede:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2b0c      	cmp	r3, #12
 8003ee6:	f200 809f 	bhi.w	8004028 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003eea:	a201      	add	r2, pc, #4	@ (adr r2, 8003ef0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ef0:	08003f25 	.word	0x08003f25
 8003ef4:	08004029 	.word	0x08004029
 8003ef8:	08004029 	.word	0x08004029
 8003efc:	08004029 	.word	0x08004029
 8003f00:	08003f65 	.word	0x08003f65
 8003f04:	08004029 	.word	0x08004029
 8003f08:	08004029 	.word	0x08004029
 8003f0c:	08004029 	.word	0x08004029
 8003f10:	08003fa7 	.word	0x08003fa7
 8003f14:	08004029 	.word	0x08004029
 8003f18:	08004029 	.word	0x08004029
 8003f1c:	08004029 	.word	0x08004029
 8003f20:	08003fe7 	.word	0x08003fe7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	68b9      	ldr	r1, [r7, #8]
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f000 f9fc 	bl	8004328 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	699a      	ldr	r2, [r3, #24]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f042 0208 	orr.w	r2, r2, #8
 8003f3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	699a      	ldr	r2, [r3, #24]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f022 0204 	bic.w	r2, r2, #4
 8003f4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	6999      	ldr	r1, [r3, #24]
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	691a      	ldr	r2, [r3, #16]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	430a      	orrs	r2, r1
 8003f60:	619a      	str	r2, [r3, #24]
      break;
 8003f62:	e064      	b.n	800402e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	68b9      	ldr	r1, [r7, #8]
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f000 fa4c 	bl	8004408 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	699a      	ldr	r2, [r3, #24]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	699a      	ldr	r2, [r3, #24]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	6999      	ldr	r1, [r3, #24]
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	691b      	ldr	r3, [r3, #16]
 8003f9a:	021a      	lsls	r2, r3, #8
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	430a      	orrs	r2, r1
 8003fa2:	619a      	str	r2, [r3, #24]
      break;
 8003fa4:	e043      	b.n	800402e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	68b9      	ldr	r1, [r7, #8]
 8003fac:	4618      	mov	r0, r3
 8003fae:	f000 faa1 	bl	80044f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	69da      	ldr	r2, [r3, #28]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f042 0208 	orr.w	r2, r2, #8
 8003fc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	69da      	ldr	r2, [r3, #28]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f022 0204 	bic.w	r2, r2, #4
 8003fd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	69d9      	ldr	r1, [r3, #28]
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	691a      	ldr	r2, [r3, #16]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	430a      	orrs	r2, r1
 8003fe2:	61da      	str	r2, [r3, #28]
      break;
 8003fe4:	e023      	b.n	800402e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	68b9      	ldr	r1, [r7, #8]
 8003fec:	4618      	mov	r0, r3
 8003fee:	f000 faf5 	bl	80045dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	69da      	ldr	r2, [r3, #28]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004000:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	69da      	ldr	r2, [r3, #28]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004010:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	69d9      	ldr	r1, [r3, #28]
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	691b      	ldr	r3, [r3, #16]
 800401c:	021a      	lsls	r2, r3, #8
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	430a      	orrs	r2, r1
 8004024:	61da      	str	r2, [r3, #28]
      break;
 8004026:	e002      	b.n	800402e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	75fb      	strb	r3, [r7, #23]
      break;
 800402c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2200      	movs	r2, #0
 8004032:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004036:	7dfb      	ldrb	r3, [r7, #23]
}
 8004038:	4618      	mov	r0, r3
 800403a:	3718      	adds	r7, #24
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}

08004040 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b084      	sub	sp, #16
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800404a:	2300      	movs	r3, #0
 800404c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004054:	2b01      	cmp	r3, #1
 8004056:	d101      	bne.n	800405c <HAL_TIM_ConfigClockSource+0x1c>
 8004058:	2302      	movs	r3, #2
 800405a:	e0b4      	b.n	80041c6 <HAL_TIM_ConfigClockSource+0x186>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2201      	movs	r2, #1
 8004060:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2202      	movs	r2, #2
 8004068:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800407a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004082:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	68ba      	ldr	r2, [r7, #8]
 800408a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004094:	d03e      	beq.n	8004114 <HAL_TIM_ConfigClockSource+0xd4>
 8004096:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800409a:	f200 8087 	bhi.w	80041ac <HAL_TIM_ConfigClockSource+0x16c>
 800409e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040a2:	f000 8086 	beq.w	80041b2 <HAL_TIM_ConfigClockSource+0x172>
 80040a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040aa:	d87f      	bhi.n	80041ac <HAL_TIM_ConfigClockSource+0x16c>
 80040ac:	2b70      	cmp	r3, #112	@ 0x70
 80040ae:	d01a      	beq.n	80040e6 <HAL_TIM_ConfigClockSource+0xa6>
 80040b0:	2b70      	cmp	r3, #112	@ 0x70
 80040b2:	d87b      	bhi.n	80041ac <HAL_TIM_ConfigClockSource+0x16c>
 80040b4:	2b60      	cmp	r3, #96	@ 0x60
 80040b6:	d050      	beq.n	800415a <HAL_TIM_ConfigClockSource+0x11a>
 80040b8:	2b60      	cmp	r3, #96	@ 0x60
 80040ba:	d877      	bhi.n	80041ac <HAL_TIM_ConfigClockSource+0x16c>
 80040bc:	2b50      	cmp	r3, #80	@ 0x50
 80040be:	d03c      	beq.n	800413a <HAL_TIM_ConfigClockSource+0xfa>
 80040c0:	2b50      	cmp	r3, #80	@ 0x50
 80040c2:	d873      	bhi.n	80041ac <HAL_TIM_ConfigClockSource+0x16c>
 80040c4:	2b40      	cmp	r3, #64	@ 0x40
 80040c6:	d058      	beq.n	800417a <HAL_TIM_ConfigClockSource+0x13a>
 80040c8:	2b40      	cmp	r3, #64	@ 0x40
 80040ca:	d86f      	bhi.n	80041ac <HAL_TIM_ConfigClockSource+0x16c>
 80040cc:	2b30      	cmp	r3, #48	@ 0x30
 80040ce:	d064      	beq.n	800419a <HAL_TIM_ConfigClockSource+0x15a>
 80040d0:	2b30      	cmp	r3, #48	@ 0x30
 80040d2:	d86b      	bhi.n	80041ac <HAL_TIM_ConfigClockSource+0x16c>
 80040d4:	2b20      	cmp	r3, #32
 80040d6:	d060      	beq.n	800419a <HAL_TIM_ConfigClockSource+0x15a>
 80040d8:	2b20      	cmp	r3, #32
 80040da:	d867      	bhi.n	80041ac <HAL_TIM_ConfigClockSource+0x16c>
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d05c      	beq.n	800419a <HAL_TIM_ConfigClockSource+0x15a>
 80040e0:	2b10      	cmp	r3, #16
 80040e2:	d05a      	beq.n	800419a <HAL_TIM_ConfigClockSource+0x15a>
 80040e4:	e062      	b.n	80041ac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80040f6:	f000 fb41 	bl	800477c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004108:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	68ba      	ldr	r2, [r7, #8]
 8004110:	609a      	str	r2, [r3, #8]
      break;
 8004112:	e04f      	b.n	80041b4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004124:	f000 fb2a 	bl	800477c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	689a      	ldr	r2, [r3, #8]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004136:	609a      	str	r2, [r3, #8]
      break;
 8004138:	e03c      	b.n	80041b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004146:	461a      	mov	r2, r3
 8004148:	f000 fa9e 	bl	8004688 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	2150      	movs	r1, #80	@ 0x50
 8004152:	4618      	mov	r0, r3
 8004154:	f000 faf7 	bl	8004746 <TIM_ITRx_SetConfig>
      break;
 8004158:	e02c      	b.n	80041b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004166:	461a      	mov	r2, r3
 8004168:	f000 fabd 	bl	80046e6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	2160      	movs	r1, #96	@ 0x60
 8004172:	4618      	mov	r0, r3
 8004174:	f000 fae7 	bl	8004746 <TIM_ITRx_SetConfig>
      break;
 8004178:	e01c      	b.n	80041b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004186:	461a      	mov	r2, r3
 8004188:	f000 fa7e 	bl	8004688 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	2140      	movs	r1, #64	@ 0x40
 8004192:	4618      	mov	r0, r3
 8004194:	f000 fad7 	bl	8004746 <TIM_ITRx_SetConfig>
      break;
 8004198:	e00c      	b.n	80041b4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4619      	mov	r1, r3
 80041a4:	4610      	mov	r0, r2
 80041a6:	f000 face 	bl	8004746 <TIM_ITRx_SetConfig>
      break;
 80041aa:	e003      	b.n	80041b4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	73fb      	strb	r3, [r7, #15]
      break;
 80041b0:	e000      	b.n	80041b4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80041b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2201      	movs	r2, #1
 80041b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2200      	movs	r2, #0
 80041c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80041c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3710      	adds	r7, #16
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
	...

080041d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b085      	sub	sp, #20
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
 80041d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	4a46      	ldr	r2, [pc, #280]	@ (80042fc <TIM_Base_SetConfig+0x12c>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d013      	beq.n	8004210 <TIM_Base_SetConfig+0x40>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041ee:	d00f      	beq.n	8004210 <TIM_Base_SetConfig+0x40>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	4a43      	ldr	r2, [pc, #268]	@ (8004300 <TIM_Base_SetConfig+0x130>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d00b      	beq.n	8004210 <TIM_Base_SetConfig+0x40>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	4a42      	ldr	r2, [pc, #264]	@ (8004304 <TIM_Base_SetConfig+0x134>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d007      	beq.n	8004210 <TIM_Base_SetConfig+0x40>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	4a41      	ldr	r2, [pc, #260]	@ (8004308 <TIM_Base_SetConfig+0x138>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d003      	beq.n	8004210 <TIM_Base_SetConfig+0x40>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	4a40      	ldr	r2, [pc, #256]	@ (800430c <TIM_Base_SetConfig+0x13c>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d108      	bne.n	8004222 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004216:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	68fa      	ldr	r2, [r7, #12]
 800421e:	4313      	orrs	r3, r2
 8004220:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	4a35      	ldr	r2, [pc, #212]	@ (80042fc <TIM_Base_SetConfig+0x12c>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d02b      	beq.n	8004282 <TIM_Base_SetConfig+0xb2>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004230:	d027      	beq.n	8004282 <TIM_Base_SetConfig+0xb2>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	4a32      	ldr	r2, [pc, #200]	@ (8004300 <TIM_Base_SetConfig+0x130>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d023      	beq.n	8004282 <TIM_Base_SetConfig+0xb2>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	4a31      	ldr	r2, [pc, #196]	@ (8004304 <TIM_Base_SetConfig+0x134>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d01f      	beq.n	8004282 <TIM_Base_SetConfig+0xb2>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	4a30      	ldr	r2, [pc, #192]	@ (8004308 <TIM_Base_SetConfig+0x138>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d01b      	beq.n	8004282 <TIM_Base_SetConfig+0xb2>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	4a2f      	ldr	r2, [pc, #188]	@ (800430c <TIM_Base_SetConfig+0x13c>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d017      	beq.n	8004282 <TIM_Base_SetConfig+0xb2>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	4a2e      	ldr	r2, [pc, #184]	@ (8004310 <TIM_Base_SetConfig+0x140>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d013      	beq.n	8004282 <TIM_Base_SetConfig+0xb2>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	4a2d      	ldr	r2, [pc, #180]	@ (8004314 <TIM_Base_SetConfig+0x144>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d00f      	beq.n	8004282 <TIM_Base_SetConfig+0xb2>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	4a2c      	ldr	r2, [pc, #176]	@ (8004318 <TIM_Base_SetConfig+0x148>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d00b      	beq.n	8004282 <TIM_Base_SetConfig+0xb2>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4a2b      	ldr	r2, [pc, #172]	@ (800431c <TIM_Base_SetConfig+0x14c>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d007      	beq.n	8004282 <TIM_Base_SetConfig+0xb2>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4a2a      	ldr	r2, [pc, #168]	@ (8004320 <TIM_Base_SetConfig+0x150>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d003      	beq.n	8004282 <TIM_Base_SetConfig+0xb2>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4a29      	ldr	r2, [pc, #164]	@ (8004324 <TIM_Base_SetConfig+0x154>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d108      	bne.n	8004294 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004288:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	68db      	ldr	r3, [r3, #12]
 800428e:	68fa      	ldr	r2, [r7, #12]
 8004290:	4313      	orrs	r3, r2
 8004292:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	695b      	ldr	r3, [r3, #20]
 800429e:	4313      	orrs	r3, r2
 80042a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	68fa      	ldr	r2, [r7, #12]
 80042a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	689a      	ldr	r2, [r3, #8]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	4a10      	ldr	r2, [pc, #64]	@ (80042fc <TIM_Base_SetConfig+0x12c>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d003      	beq.n	80042c8 <TIM_Base_SetConfig+0xf8>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	4a12      	ldr	r2, [pc, #72]	@ (800430c <TIM_Base_SetConfig+0x13c>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d103      	bne.n	80042d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	691a      	ldr	r2, [r3, #16]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	691b      	ldr	r3, [r3, #16]
 80042da:	f003 0301 	and.w	r3, r3, #1
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d105      	bne.n	80042ee <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	691b      	ldr	r3, [r3, #16]
 80042e6:	f023 0201 	bic.w	r2, r3, #1
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	611a      	str	r2, [r3, #16]
  }
}
 80042ee:	bf00      	nop
 80042f0:	3714      	adds	r7, #20
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr
 80042fa:	bf00      	nop
 80042fc:	40010000 	.word	0x40010000
 8004300:	40000400 	.word	0x40000400
 8004304:	40000800 	.word	0x40000800
 8004308:	40000c00 	.word	0x40000c00
 800430c:	40010400 	.word	0x40010400
 8004310:	40014000 	.word	0x40014000
 8004314:	40014400 	.word	0x40014400
 8004318:	40014800 	.word	0x40014800
 800431c:	40001800 	.word	0x40001800
 8004320:	40001c00 	.word	0x40001c00
 8004324:	40002000 	.word	0x40002000

08004328 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004328:	b480      	push	{r7}
 800432a:	b087      	sub	sp, #28
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6a1b      	ldr	r3, [r3, #32]
 8004336:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6a1b      	ldr	r3, [r3, #32]
 800433c:	f023 0201 	bic.w	r2, r3, #1
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	699b      	ldr	r3, [r3, #24]
 800434e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004356:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f023 0303 	bic.w	r3, r3, #3
 800435e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	68fa      	ldr	r2, [r7, #12]
 8004366:	4313      	orrs	r3, r2
 8004368:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	f023 0302 	bic.w	r3, r3, #2
 8004370:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	697a      	ldr	r2, [r7, #20]
 8004378:	4313      	orrs	r3, r2
 800437a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	4a20      	ldr	r2, [pc, #128]	@ (8004400 <TIM_OC1_SetConfig+0xd8>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d003      	beq.n	800438c <TIM_OC1_SetConfig+0x64>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	4a1f      	ldr	r2, [pc, #124]	@ (8004404 <TIM_OC1_SetConfig+0xdc>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d10c      	bne.n	80043a6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	f023 0308 	bic.w	r3, r3, #8
 8004392:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	697a      	ldr	r2, [r7, #20]
 800439a:	4313      	orrs	r3, r2
 800439c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	f023 0304 	bic.w	r3, r3, #4
 80043a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4a15      	ldr	r2, [pc, #84]	@ (8004400 <TIM_OC1_SetConfig+0xd8>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d003      	beq.n	80043b6 <TIM_OC1_SetConfig+0x8e>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4a14      	ldr	r2, [pc, #80]	@ (8004404 <TIM_OC1_SetConfig+0xdc>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d111      	bne.n	80043da <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80043bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80043c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	695b      	ldr	r3, [r3, #20]
 80043ca:	693a      	ldr	r2, [r7, #16]
 80043cc:	4313      	orrs	r3, r2
 80043ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	699b      	ldr	r3, [r3, #24]
 80043d4:	693a      	ldr	r2, [r7, #16]
 80043d6:	4313      	orrs	r3, r2
 80043d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	693a      	ldr	r2, [r7, #16]
 80043de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	68fa      	ldr	r2, [r7, #12]
 80043e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	685a      	ldr	r2, [r3, #4]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	697a      	ldr	r2, [r7, #20]
 80043f2:	621a      	str	r2, [r3, #32]
}
 80043f4:	bf00      	nop
 80043f6:	371c      	adds	r7, #28
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr
 8004400:	40010000 	.word	0x40010000
 8004404:	40010400 	.word	0x40010400

08004408 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004408:	b480      	push	{r7}
 800440a:	b087      	sub	sp, #28
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6a1b      	ldr	r3, [r3, #32]
 8004416:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6a1b      	ldr	r3, [r3, #32]
 800441c:	f023 0210 	bic.w	r2, r3, #16
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	699b      	ldr	r3, [r3, #24]
 800442e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004436:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800443e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	021b      	lsls	r3, r3, #8
 8004446:	68fa      	ldr	r2, [r7, #12]
 8004448:	4313      	orrs	r3, r2
 800444a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	f023 0320 	bic.w	r3, r3, #32
 8004452:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	011b      	lsls	r3, r3, #4
 800445a:	697a      	ldr	r2, [r7, #20]
 800445c:	4313      	orrs	r3, r2
 800445e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	4a22      	ldr	r2, [pc, #136]	@ (80044ec <TIM_OC2_SetConfig+0xe4>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d003      	beq.n	8004470 <TIM_OC2_SetConfig+0x68>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	4a21      	ldr	r2, [pc, #132]	@ (80044f0 <TIM_OC2_SetConfig+0xe8>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d10d      	bne.n	800448c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004476:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	011b      	lsls	r3, r3, #4
 800447e:	697a      	ldr	r2, [r7, #20]
 8004480:	4313      	orrs	r3, r2
 8004482:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800448a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	4a17      	ldr	r2, [pc, #92]	@ (80044ec <TIM_OC2_SetConfig+0xe4>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d003      	beq.n	800449c <TIM_OC2_SetConfig+0x94>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	4a16      	ldr	r2, [pc, #88]	@ (80044f0 <TIM_OC2_SetConfig+0xe8>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d113      	bne.n	80044c4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80044a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80044aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	695b      	ldr	r3, [r3, #20]
 80044b0:	009b      	lsls	r3, r3, #2
 80044b2:	693a      	ldr	r2, [r7, #16]
 80044b4:	4313      	orrs	r3, r2
 80044b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	699b      	ldr	r3, [r3, #24]
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	693a      	ldr	r2, [r7, #16]
 80044c0:	4313      	orrs	r3, r2
 80044c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	693a      	ldr	r2, [r7, #16]
 80044c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	68fa      	ldr	r2, [r7, #12]
 80044ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	685a      	ldr	r2, [r3, #4]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	697a      	ldr	r2, [r7, #20]
 80044dc:	621a      	str	r2, [r3, #32]
}
 80044de:	bf00      	nop
 80044e0:	371c      	adds	r7, #28
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr
 80044ea:	bf00      	nop
 80044ec:	40010000 	.word	0x40010000
 80044f0:	40010400 	.word	0x40010400

080044f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b087      	sub	sp, #28
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
 80044fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6a1b      	ldr	r3, [r3, #32]
 8004502:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6a1b      	ldr	r3, [r3, #32]
 8004508:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	69db      	ldr	r3, [r3, #28]
 800451a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004522:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f023 0303 	bic.w	r3, r3, #3
 800452a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	68fa      	ldr	r2, [r7, #12]
 8004532:	4313      	orrs	r3, r2
 8004534:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800453c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	021b      	lsls	r3, r3, #8
 8004544:	697a      	ldr	r2, [r7, #20]
 8004546:	4313      	orrs	r3, r2
 8004548:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4a21      	ldr	r2, [pc, #132]	@ (80045d4 <TIM_OC3_SetConfig+0xe0>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d003      	beq.n	800455a <TIM_OC3_SetConfig+0x66>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4a20      	ldr	r2, [pc, #128]	@ (80045d8 <TIM_OC3_SetConfig+0xe4>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d10d      	bne.n	8004576 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004560:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	68db      	ldr	r3, [r3, #12]
 8004566:	021b      	lsls	r3, r3, #8
 8004568:	697a      	ldr	r2, [r7, #20]
 800456a:	4313      	orrs	r3, r2
 800456c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004574:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	4a16      	ldr	r2, [pc, #88]	@ (80045d4 <TIM_OC3_SetConfig+0xe0>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d003      	beq.n	8004586 <TIM_OC3_SetConfig+0x92>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	4a15      	ldr	r2, [pc, #84]	@ (80045d8 <TIM_OC3_SetConfig+0xe4>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d113      	bne.n	80045ae <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800458c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004594:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	695b      	ldr	r3, [r3, #20]
 800459a:	011b      	lsls	r3, r3, #4
 800459c:	693a      	ldr	r2, [r7, #16]
 800459e:	4313      	orrs	r3, r2
 80045a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	699b      	ldr	r3, [r3, #24]
 80045a6:	011b      	lsls	r3, r3, #4
 80045a8:	693a      	ldr	r2, [r7, #16]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	693a      	ldr	r2, [r7, #16]
 80045b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	68fa      	ldr	r2, [r7, #12]
 80045b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	685a      	ldr	r2, [r3, #4]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	697a      	ldr	r2, [r7, #20]
 80045c6:	621a      	str	r2, [r3, #32]
}
 80045c8:	bf00      	nop
 80045ca:	371c      	adds	r7, #28
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr
 80045d4:	40010000 	.word	0x40010000
 80045d8:	40010400 	.word	0x40010400

080045dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80045dc:	b480      	push	{r7}
 80045de:	b087      	sub	sp, #28
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6a1b      	ldr	r3, [r3, #32]
 80045ea:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6a1b      	ldr	r3, [r3, #32]
 80045f0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	69db      	ldr	r3, [r3, #28]
 8004602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800460a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004612:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	021b      	lsls	r3, r3, #8
 800461a:	68fa      	ldr	r2, [r7, #12]
 800461c:	4313      	orrs	r3, r2
 800461e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004626:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	031b      	lsls	r3, r3, #12
 800462e:	693a      	ldr	r2, [r7, #16]
 8004630:	4313      	orrs	r3, r2
 8004632:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	4a12      	ldr	r2, [pc, #72]	@ (8004680 <TIM_OC4_SetConfig+0xa4>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d003      	beq.n	8004644 <TIM_OC4_SetConfig+0x68>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	4a11      	ldr	r2, [pc, #68]	@ (8004684 <TIM_OC4_SetConfig+0xa8>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d109      	bne.n	8004658 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800464a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	695b      	ldr	r3, [r3, #20]
 8004650:	019b      	lsls	r3, r3, #6
 8004652:	697a      	ldr	r2, [r7, #20]
 8004654:	4313      	orrs	r3, r2
 8004656:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	697a      	ldr	r2, [r7, #20]
 800465c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	68fa      	ldr	r2, [r7, #12]
 8004662:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	685a      	ldr	r2, [r3, #4]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	693a      	ldr	r2, [r7, #16]
 8004670:	621a      	str	r2, [r3, #32]
}
 8004672:	bf00      	nop
 8004674:	371c      	adds	r7, #28
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr
 800467e:	bf00      	nop
 8004680:	40010000 	.word	0x40010000
 8004684:	40010400 	.word	0x40010400

08004688 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004688:	b480      	push	{r7}
 800468a:	b087      	sub	sp, #28
 800468c:	af00      	add	r7, sp, #0
 800468e:	60f8      	str	r0, [r7, #12]
 8004690:	60b9      	str	r1, [r7, #8]
 8004692:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6a1b      	ldr	r3, [r3, #32]
 8004698:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	6a1b      	ldr	r3, [r3, #32]
 800469e:	f023 0201 	bic.w	r2, r3, #1
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	699b      	ldr	r3, [r3, #24]
 80046aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80046b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	011b      	lsls	r3, r3, #4
 80046b8:	693a      	ldr	r2, [r7, #16]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	f023 030a 	bic.w	r3, r3, #10
 80046c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80046c6:	697a      	ldr	r2, [r7, #20]
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	693a      	ldr	r2, [r7, #16]
 80046d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	697a      	ldr	r2, [r7, #20]
 80046d8:	621a      	str	r2, [r3, #32]
}
 80046da:	bf00      	nop
 80046dc:	371c      	adds	r7, #28
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr

080046e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046e6:	b480      	push	{r7}
 80046e8:	b087      	sub	sp, #28
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	60f8      	str	r0, [r7, #12]
 80046ee:	60b9      	str	r1, [r7, #8]
 80046f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	6a1b      	ldr	r3, [r3, #32]
 80046f6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	6a1b      	ldr	r3, [r3, #32]
 80046fc:	f023 0210 	bic.w	r2, r3, #16
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	699b      	ldr	r3, [r3, #24]
 8004708:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004710:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	031b      	lsls	r3, r3, #12
 8004716:	693a      	ldr	r2, [r7, #16]
 8004718:	4313      	orrs	r3, r2
 800471a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004722:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	011b      	lsls	r3, r3, #4
 8004728:	697a      	ldr	r2, [r7, #20]
 800472a:	4313      	orrs	r3, r2
 800472c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	693a      	ldr	r2, [r7, #16]
 8004732:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	697a      	ldr	r2, [r7, #20]
 8004738:	621a      	str	r2, [r3, #32]
}
 800473a:	bf00      	nop
 800473c:	371c      	adds	r7, #28
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr

08004746 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004746:	b480      	push	{r7}
 8004748:	b085      	sub	sp, #20
 800474a:	af00      	add	r7, sp, #0
 800474c:	6078      	str	r0, [r7, #4]
 800474e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800475c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800475e:	683a      	ldr	r2, [r7, #0]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	4313      	orrs	r3, r2
 8004764:	f043 0307 	orr.w	r3, r3, #7
 8004768:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	68fa      	ldr	r2, [r7, #12]
 800476e:	609a      	str	r2, [r3, #8]
}
 8004770:	bf00      	nop
 8004772:	3714      	adds	r7, #20
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr

0800477c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800477c:	b480      	push	{r7}
 800477e:	b087      	sub	sp, #28
 8004780:	af00      	add	r7, sp, #0
 8004782:	60f8      	str	r0, [r7, #12]
 8004784:	60b9      	str	r1, [r7, #8]
 8004786:	607a      	str	r2, [r7, #4]
 8004788:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004796:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	021a      	lsls	r2, r3, #8
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	431a      	orrs	r2, r3
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	4313      	orrs	r3, r2
 80047a4:	697a      	ldr	r2, [r7, #20]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	697a      	ldr	r2, [r7, #20]
 80047ae:	609a      	str	r2, [r3, #8]
}
 80047b0:	bf00      	nop
 80047b2:	371c      	adds	r7, #28
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr

080047bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80047bc:	b480      	push	{r7}
 80047be:	b087      	sub	sp, #28
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	60f8      	str	r0, [r7, #12]
 80047c4:	60b9      	str	r1, [r7, #8]
 80047c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	f003 031f 	and.w	r3, r3, #31
 80047ce:	2201      	movs	r2, #1
 80047d0:	fa02 f303 	lsl.w	r3, r2, r3
 80047d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	6a1a      	ldr	r2, [r3, #32]
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	43db      	mvns	r3, r3
 80047de:	401a      	ands	r2, r3
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	6a1a      	ldr	r2, [r3, #32]
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	f003 031f 	and.w	r3, r3, #31
 80047ee:	6879      	ldr	r1, [r7, #4]
 80047f0:	fa01 f303 	lsl.w	r3, r1, r3
 80047f4:	431a      	orrs	r2, r3
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	621a      	str	r2, [r3, #32]
}
 80047fa:	bf00      	nop
 80047fc:	371c      	adds	r7, #28
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr
	...

08004808 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004808:	b480      	push	{r7}
 800480a:	b085      	sub	sp, #20
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004818:	2b01      	cmp	r3, #1
 800481a:	d101      	bne.n	8004820 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800481c:	2302      	movs	r3, #2
 800481e:	e05a      	b.n	80048d6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2201      	movs	r2, #1
 8004824:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2202      	movs	r2, #2
 800482c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004846:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	68fa      	ldr	r2, [r7, #12]
 800484e:	4313      	orrs	r3, r2
 8004850:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	68fa      	ldr	r2, [r7, #12]
 8004858:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a21      	ldr	r2, [pc, #132]	@ (80048e4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d022      	beq.n	80048aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800486c:	d01d      	beq.n	80048aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a1d      	ldr	r2, [pc, #116]	@ (80048e8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d018      	beq.n	80048aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a1b      	ldr	r2, [pc, #108]	@ (80048ec <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d013      	beq.n	80048aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a1a      	ldr	r2, [pc, #104]	@ (80048f0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d00e      	beq.n	80048aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a18      	ldr	r2, [pc, #96]	@ (80048f4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d009      	beq.n	80048aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a17      	ldr	r2, [pc, #92]	@ (80048f8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d004      	beq.n	80048aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a15      	ldr	r2, [pc, #84]	@ (80048fc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d10c      	bne.n	80048c4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80048b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	68ba      	ldr	r2, [r7, #8]
 80048b8:	4313      	orrs	r3, r2
 80048ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	68ba      	ldr	r2, [r7, #8]
 80048c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2201      	movs	r2, #1
 80048c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2200      	movs	r2, #0
 80048d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80048d4:	2300      	movs	r3, #0
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3714      	adds	r7, #20
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr
 80048e2:	bf00      	nop
 80048e4:	40010000 	.word	0x40010000
 80048e8:	40000400 	.word	0x40000400
 80048ec:	40000800 	.word	0x40000800
 80048f0:	40000c00 	.word	0x40000c00
 80048f4:	40010400 	.word	0x40010400
 80048f8:	40014000 	.word	0x40014000
 80048fc:	40001800 	.word	0x40001800

08004900 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004900:	b480      	push	{r7}
 8004902:	b085      	sub	sp, #20
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
 8004908:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800490a:	2300      	movs	r3, #0
 800490c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004914:	2b01      	cmp	r3, #1
 8004916:	d101      	bne.n	800491c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004918:	2302      	movs	r3, #2
 800491a:	e03d      	b.n	8004998 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	68db      	ldr	r3, [r3, #12]
 800492e:	4313      	orrs	r3, r2
 8004930:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	4313      	orrs	r3, r2
 800493e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	4313      	orrs	r3, r2
 800494c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4313      	orrs	r3, r2
 800495a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	691b      	ldr	r3, [r3, #16]
 8004966:	4313      	orrs	r3, r2
 8004968:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	695b      	ldr	r3, [r3, #20]
 8004974:	4313      	orrs	r3, r2
 8004976:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	69db      	ldr	r3, [r3, #28]
 8004982:	4313      	orrs	r3, r2
 8004984:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	68fa      	ldr	r2, [r7, #12]
 800498c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004996:	2300      	movs	r3, #0
}
 8004998:	4618      	mov	r0, r3
 800499a:	3714      	adds	r7, #20
 800499c:	46bd      	mov	sp, r7
 800499e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a2:	4770      	bx	lr

080049a4 <siprintf>:
 80049a4:	b40e      	push	{r1, r2, r3}
 80049a6:	b500      	push	{lr}
 80049a8:	b09c      	sub	sp, #112	@ 0x70
 80049aa:	ab1d      	add	r3, sp, #116	@ 0x74
 80049ac:	9002      	str	r0, [sp, #8]
 80049ae:	9006      	str	r0, [sp, #24]
 80049b0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80049b4:	4809      	ldr	r0, [pc, #36]	@ (80049dc <siprintf+0x38>)
 80049b6:	9107      	str	r1, [sp, #28]
 80049b8:	9104      	str	r1, [sp, #16]
 80049ba:	4909      	ldr	r1, [pc, #36]	@ (80049e0 <siprintf+0x3c>)
 80049bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80049c0:	9105      	str	r1, [sp, #20]
 80049c2:	6800      	ldr	r0, [r0, #0]
 80049c4:	9301      	str	r3, [sp, #4]
 80049c6:	a902      	add	r1, sp, #8
 80049c8:	f000 f994 	bl	8004cf4 <_svfiprintf_r>
 80049cc:	9b02      	ldr	r3, [sp, #8]
 80049ce:	2200      	movs	r2, #0
 80049d0:	701a      	strb	r2, [r3, #0]
 80049d2:	b01c      	add	sp, #112	@ 0x70
 80049d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80049d8:	b003      	add	sp, #12
 80049da:	4770      	bx	lr
 80049dc:	2000000c 	.word	0x2000000c
 80049e0:	ffff0208 	.word	0xffff0208

080049e4 <memset>:
 80049e4:	4402      	add	r2, r0
 80049e6:	4603      	mov	r3, r0
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d100      	bne.n	80049ee <memset+0xa>
 80049ec:	4770      	bx	lr
 80049ee:	f803 1b01 	strb.w	r1, [r3], #1
 80049f2:	e7f9      	b.n	80049e8 <memset+0x4>

080049f4 <__errno>:
 80049f4:	4b01      	ldr	r3, [pc, #4]	@ (80049fc <__errno+0x8>)
 80049f6:	6818      	ldr	r0, [r3, #0]
 80049f8:	4770      	bx	lr
 80049fa:	bf00      	nop
 80049fc:	2000000c 	.word	0x2000000c

08004a00 <__libc_init_array>:
 8004a00:	b570      	push	{r4, r5, r6, lr}
 8004a02:	4d0d      	ldr	r5, [pc, #52]	@ (8004a38 <__libc_init_array+0x38>)
 8004a04:	4c0d      	ldr	r4, [pc, #52]	@ (8004a3c <__libc_init_array+0x3c>)
 8004a06:	1b64      	subs	r4, r4, r5
 8004a08:	10a4      	asrs	r4, r4, #2
 8004a0a:	2600      	movs	r6, #0
 8004a0c:	42a6      	cmp	r6, r4
 8004a0e:	d109      	bne.n	8004a24 <__libc_init_array+0x24>
 8004a10:	4d0b      	ldr	r5, [pc, #44]	@ (8004a40 <__libc_init_array+0x40>)
 8004a12:	4c0c      	ldr	r4, [pc, #48]	@ (8004a44 <__libc_init_array+0x44>)
 8004a14:	f000 fc66 	bl	80052e4 <_init>
 8004a18:	1b64      	subs	r4, r4, r5
 8004a1a:	10a4      	asrs	r4, r4, #2
 8004a1c:	2600      	movs	r6, #0
 8004a1e:	42a6      	cmp	r6, r4
 8004a20:	d105      	bne.n	8004a2e <__libc_init_array+0x2e>
 8004a22:	bd70      	pop	{r4, r5, r6, pc}
 8004a24:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a28:	4798      	blx	r3
 8004a2a:	3601      	adds	r6, #1
 8004a2c:	e7ee      	b.n	8004a0c <__libc_init_array+0xc>
 8004a2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a32:	4798      	blx	r3
 8004a34:	3601      	adds	r6, #1
 8004a36:	e7f2      	b.n	8004a1e <__libc_init_array+0x1e>
 8004a38:	08005374 	.word	0x08005374
 8004a3c:	08005374 	.word	0x08005374
 8004a40:	08005374 	.word	0x08005374
 8004a44:	08005378 	.word	0x08005378

08004a48 <__retarget_lock_acquire_recursive>:
 8004a48:	4770      	bx	lr

08004a4a <__retarget_lock_release_recursive>:
 8004a4a:	4770      	bx	lr

08004a4c <_free_r>:
 8004a4c:	b538      	push	{r3, r4, r5, lr}
 8004a4e:	4605      	mov	r5, r0
 8004a50:	2900      	cmp	r1, #0
 8004a52:	d041      	beq.n	8004ad8 <_free_r+0x8c>
 8004a54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a58:	1f0c      	subs	r4, r1, #4
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	bfb8      	it	lt
 8004a5e:	18e4      	addlt	r4, r4, r3
 8004a60:	f000 f8e0 	bl	8004c24 <__malloc_lock>
 8004a64:	4a1d      	ldr	r2, [pc, #116]	@ (8004adc <_free_r+0x90>)
 8004a66:	6813      	ldr	r3, [r2, #0]
 8004a68:	b933      	cbnz	r3, 8004a78 <_free_r+0x2c>
 8004a6a:	6063      	str	r3, [r4, #4]
 8004a6c:	6014      	str	r4, [r2, #0]
 8004a6e:	4628      	mov	r0, r5
 8004a70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a74:	f000 b8dc 	b.w	8004c30 <__malloc_unlock>
 8004a78:	42a3      	cmp	r3, r4
 8004a7a:	d908      	bls.n	8004a8e <_free_r+0x42>
 8004a7c:	6820      	ldr	r0, [r4, #0]
 8004a7e:	1821      	adds	r1, r4, r0
 8004a80:	428b      	cmp	r3, r1
 8004a82:	bf01      	itttt	eq
 8004a84:	6819      	ldreq	r1, [r3, #0]
 8004a86:	685b      	ldreq	r3, [r3, #4]
 8004a88:	1809      	addeq	r1, r1, r0
 8004a8a:	6021      	streq	r1, [r4, #0]
 8004a8c:	e7ed      	b.n	8004a6a <_free_r+0x1e>
 8004a8e:	461a      	mov	r2, r3
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	b10b      	cbz	r3, 8004a98 <_free_r+0x4c>
 8004a94:	42a3      	cmp	r3, r4
 8004a96:	d9fa      	bls.n	8004a8e <_free_r+0x42>
 8004a98:	6811      	ldr	r1, [r2, #0]
 8004a9a:	1850      	adds	r0, r2, r1
 8004a9c:	42a0      	cmp	r0, r4
 8004a9e:	d10b      	bne.n	8004ab8 <_free_r+0x6c>
 8004aa0:	6820      	ldr	r0, [r4, #0]
 8004aa2:	4401      	add	r1, r0
 8004aa4:	1850      	adds	r0, r2, r1
 8004aa6:	4283      	cmp	r3, r0
 8004aa8:	6011      	str	r1, [r2, #0]
 8004aaa:	d1e0      	bne.n	8004a6e <_free_r+0x22>
 8004aac:	6818      	ldr	r0, [r3, #0]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	6053      	str	r3, [r2, #4]
 8004ab2:	4408      	add	r0, r1
 8004ab4:	6010      	str	r0, [r2, #0]
 8004ab6:	e7da      	b.n	8004a6e <_free_r+0x22>
 8004ab8:	d902      	bls.n	8004ac0 <_free_r+0x74>
 8004aba:	230c      	movs	r3, #12
 8004abc:	602b      	str	r3, [r5, #0]
 8004abe:	e7d6      	b.n	8004a6e <_free_r+0x22>
 8004ac0:	6820      	ldr	r0, [r4, #0]
 8004ac2:	1821      	adds	r1, r4, r0
 8004ac4:	428b      	cmp	r3, r1
 8004ac6:	bf04      	itt	eq
 8004ac8:	6819      	ldreq	r1, [r3, #0]
 8004aca:	685b      	ldreq	r3, [r3, #4]
 8004acc:	6063      	str	r3, [r4, #4]
 8004ace:	bf04      	itt	eq
 8004ad0:	1809      	addeq	r1, r1, r0
 8004ad2:	6021      	streq	r1, [r4, #0]
 8004ad4:	6054      	str	r4, [r2, #4]
 8004ad6:	e7ca      	b.n	8004a6e <_free_r+0x22>
 8004ad8:	bd38      	pop	{r3, r4, r5, pc}
 8004ada:	bf00      	nop
 8004adc:	200002d0 	.word	0x200002d0

08004ae0 <sbrk_aligned>:
 8004ae0:	b570      	push	{r4, r5, r6, lr}
 8004ae2:	4e0f      	ldr	r6, [pc, #60]	@ (8004b20 <sbrk_aligned+0x40>)
 8004ae4:	460c      	mov	r4, r1
 8004ae6:	6831      	ldr	r1, [r6, #0]
 8004ae8:	4605      	mov	r5, r0
 8004aea:	b911      	cbnz	r1, 8004af2 <sbrk_aligned+0x12>
 8004aec:	f000 fba6 	bl	800523c <_sbrk_r>
 8004af0:	6030      	str	r0, [r6, #0]
 8004af2:	4621      	mov	r1, r4
 8004af4:	4628      	mov	r0, r5
 8004af6:	f000 fba1 	bl	800523c <_sbrk_r>
 8004afa:	1c43      	adds	r3, r0, #1
 8004afc:	d103      	bne.n	8004b06 <sbrk_aligned+0x26>
 8004afe:	f04f 34ff 	mov.w	r4, #4294967295
 8004b02:	4620      	mov	r0, r4
 8004b04:	bd70      	pop	{r4, r5, r6, pc}
 8004b06:	1cc4      	adds	r4, r0, #3
 8004b08:	f024 0403 	bic.w	r4, r4, #3
 8004b0c:	42a0      	cmp	r0, r4
 8004b0e:	d0f8      	beq.n	8004b02 <sbrk_aligned+0x22>
 8004b10:	1a21      	subs	r1, r4, r0
 8004b12:	4628      	mov	r0, r5
 8004b14:	f000 fb92 	bl	800523c <_sbrk_r>
 8004b18:	3001      	adds	r0, #1
 8004b1a:	d1f2      	bne.n	8004b02 <sbrk_aligned+0x22>
 8004b1c:	e7ef      	b.n	8004afe <sbrk_aligned+0x1e>
 8004b1e:	bf00      	nop
 8004b20:	200002cc 	.word	0x200002cc

08004b24 <_malloc_r>:
 8004b24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b28:	1ccd      	adds	r5, r1, #3
 8004b2a:	f025 0503 	bic.w	r5, r5, #3
 8004b2e:	3508      	adds	r5, #8
 8004b30:	2d0c      	cmp	r5, #12
 8004b32:	bf38      	it	cc
 8004b34:	250c      	movcc	r5, #12
 8004b36:	2d00      	cmp	r5, #0
 8004b38:	4606      	mov	r6, r0
 8004b3a:	db01      	blt.n	8004b40 <_malloc_r+0x1c>
 8004b3c:	42a9      	cmp	r1, r5
 8004b3e:	d904      	bls.n	8004b4a <_malloc_r+0x26>
 8004b40:	230c      	movs	r3, #12
 8004b42:	6033      	str	r3, [r6, #0]
 8004b44:	2000      	movs	r0, #0
 8004b46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b4a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004c20 <_malloc_r+0xfc>
 8004b4e:	f000 f869 	bl	8004c24 <__malloc_lock>
 8004b52:	f8d8 3000 	ldr.w	r3, [r8]
 8004b56:	461c      	mov	r4, r3
 8004b58:	bb44      	cbnz	r4, 8004bac <_malloc_r+0x88>
 8004b5a:	4629      	mov	r1, r5
 8004b5c:	4630      	mov	r0, r6
 8004b5e:	f7ff ffbf 	bl	8004ae0 <sbrk_aligned>
 8004b62:	1c43      	adds	r3, r0, #1
 8004b64:	4604      	mov	r4, r0
 8004b66:	d158      	bne.n	8004c1a <_malloc_r+0xf6>
 8004b68:	f8d8 4000 	ldr.w	r4, [r8]
 8004b6c:	4627      	mov	r7, r4
 8004b6e:	2f00      	cmp	r7, #0
 8004b70:	d143      	bne.n	8004bfa <_malloc_r+0xd6>
 8004b72:	2c00      	cmp	r4, #0
 8004b74:	d04b      	beq.n	8004c0e <_malloc_r+0xea>
 8004b76:	6823      	ldr	r3, [r4, #0]
 8004b78:	4639      	mov	r1, r7
 8004b7a:	4630      	mov	r0, r6
 8004b7c:	eb04 0903 	add.w	r9, r4, r3
 8004b80:	f000 fb5c 	bl	800523c <_sbrk_r>
 8004b84:	4581      	cmp	r9, r0
 8004b86:	d142      	bne.n	8004c0e <_malloc_r+0xea>
 8004b88:	6821      	ldr	r1, [r4, #0]
 8004b8a:	1a6d      	subs	r5, r5, r1
 8004b8c:	4629      	mov	r1, r5
 8004b8e:	4630      	mov	r0, r6
 8004b90:	f7ff ffa6 	bl	8004ae0 <sbrk_aligned>
 8004b94:	3001      	adds	r0, #1
 8004b96:	d03a      	beq.n	8004c0e <_malloc_r+0xea>
 8004b98:	6823      	ldr	r3, [r4, #0]
 8004b9a:	442b      	add	r3, r5
 8004b9c:	6023      	str	r3, [r4, #0]
 8004b9e:	f8d8 3000 	ldr.w	r3, [r8]
 8004ba2:	685a      	ldr	r2, [r3, #4]
 8004ba4:	bb62      	cbnz	r2, 8004c00 <_malloc_r+0xdc>
 8004ba6:	f8c8 7000 	str.w	r7, [r8]
 8004baa:	e00f      	b.n	8004bcc <_malloc_r+0xa8>
 8004bac:	6822      	ldr	r2, [r4, #0]
 8004bae:	1b52      	subs	r2, r2, r5
 8004bb0:	d420      	bmi.n	8004bf4 <_malloc_r+0xd0>
 8004bb2:	2a0b      	cmp	r2, #11
 8004bb4:	d917      	bls.n	8004be6 <_malloc_r+0xc2>
 8004bb6:	1961      	adds	r1, r4, r5
 8004bb8:	42a3      	cmp	r3, r4
 8004bba:	6025      	str	r5, [r4, #0]
 8004bbc:	bf18      	it	ne
 8004bbe:	6059      	strne	r1, [r3, #4]
 8004bc0:	6863      	ldr	r3, [r4, #4]
 8004bc2:	bf08      	it	eq
 8004bc4:	f8c8 1000 	streq.w	r1, [r8]
 8004bc8:	5162      	str	r2, [r4, r5]
 8004bca:	604b      	str	r3, [r1, #4]
 8004bcc:	4630      	mov	r0, r6
 8004bce:	f000 f82f 	bl	8004c30 <__malloc_unlock>
 8004bd2:	f104 000b 	add.w	r0, r4, #11
 8004bd6:	1d23      	adds	r3, r4, #4
 8004bd8:	f020 0007 	bic.w	r0, r0, #7
 8004bdc:	1ac2      	subs	r2, r0, r3
 8004bde:	bf1c      	itt	ne
 8004be0:	1a1b      	subne	r3, r3, r0
 8004be2:	50a3      	strne	r3, [r4, r2]
 8004be4:	e7af      	b.n	8004b46 <_malloc_r+0x22>
 8004be6:	6862      	ldr	r2, [r4, #4]
 8004be8:	42a3      	cmp	r3, r4
 8004bea:	bf0c      	ite	eq
 8004bec:	f8c8 2000 	streq.w	r2, [r8]
 8004bf0:	605a      	strne	r2, [r3, #4]
 8004bf2:	e7eb      	b.n	8004bcc <_malloc_r+0xa8>
 8004bf4:	4623      	mov	r3, r4
 8004bf6:	6864      	ldr	r4, [r4, #4]
 8004bf8:	e7ae      	b.n	8004b58 <_malloc_r+0x34>
 8004bfa:	463c      	mov	r4, r7
 8004bfc:	687f      	ldr	r7, [r7, #4]
 8004bfe:	e7b6      	b.n	8004b6e <_malloc_r+0x4a>
 8004c00:	461a      	mov	r2, r3
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	42a3      	cmp	r3, r4
 8004c06:	d1fb      	bne.n	8004c00 <_malloc_r+0xdc>
 8004c08:	2300      	movs	r3, #0
 8004c0a:	6053      	str	r3, [r2, #4]
 8004c0c:	e7de      	b.n	8004bcc <_malloc_r+0xa8>
 8004c0e:	230c      	movs	r3, #12
 8004c10:	6033      	str	r3, [r6, #0]
 8004c12:	4630      	mov	r0, r6
 8004c14:	f000 f80c 	bl	8004c30 <__malloc_unlock>
 8004c18:	e794      	b.n	8004b44 <_malloc_r+0x20>
 8004c1a:	6005      	str	r5, [r0, #0]
 8004c1c:	e7d6      	b.n	8004bcc <_malloc_r+0xa8>
 8004c1e:	bf00      	nop
 8004c20:	200002d0 	.word	0x200002d0

08004c24 <__malloc_lock>:
 8004c24:	4801      	ldr	r0, [pc, #4]	@ (8004c2c <__malloc_lock+0x8>)
 8004c26:	f7ff bf0f 	b.w	8004a48 <__retarget_lock_acquire_recursive>
 8004c2a:	bf00      	nop
 8004c2c:	200002c8 	.word	0x200002c8

08004c30 <__malloc_unlock>:
 8004c30:	4801      	ldr	r0, [pc, #4]	@ (8004c38 <__malloc_unlock+0x8>)
 8004c32:	f7ff bf0a 	b.w	8004a4a <__retarget_lock_release_recursive>
 8004c36:	bf00      	nop
 8004c38:	200002c8 	.word	0x200002c8

08004c3c <__ssputs_r>:
 8004c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c40:	688e      	ldr	r6, [r1, #8]
 8004c42:	461f      	mov	r7, r3
 8004c44:	42be      	cmp	r6, r7
 8004c46:	680b      	ldr	r3, [r1, #0]
 8004c48:	4682      	mov	sl, r0
 8004c4a:	460c      	mov	r4, r1
 8004c4c:	4690      	mov	r8, r2
 8004c4e:	d82d      	bhi.n	8004cac <__ssputs_r+0x70>
 8004c50:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004c54:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004c58:	d026      	beq.n	8004ca8 <__ssputs_r+0x6c>
 8004c5a:	6965      	ldr	r5, [r4, #20]
 8004c5c:	6909      	ldr	r1, [r1, #16]
 8004c5e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004c62:	eba3 0901 	sub.w	r9, r3, r1
 8004c66:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004c6a:	1c7b      	adds	r3, r7, #1
 8004c6c:	444b      	add	r3, r9
 8004c6e:	106d      	asrs	r5, r5, #1
 8004c70:	429d      	cmp	r5, r3
 8004c72:	bf38      	it	cc
 8004c74:	461d      	movcc	r5, r3
 8004c76:	0553      	lsls	r3, r2, #21
 8004c78:	d527      	bpl.n	8004cca <__ssputs_r+0x8e>
 8004c7a:	4629      	mov	r1, r5
 8004c7c:	f7ff ff52 	bl	8004b24 <_malloc_r>
 8004c80:	4606      	mov	r6, r0
 8004c82:	b360      	cbz	r0, 8004cde <__ssputs_r+0xa2>
 8004c84:	6921      	ldr	r1, [r4, #16]
 8004c86:	464a      	mov	r2, r9
 8004c88:	f000 fae8 	bl	800525c <memcpy>
 8004c8c:	89a3      	ldrh	r3, [r4, #12]
 8004c8e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004c92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c96:	81a3      	strh	r3, [r4, #12]
 8004c98:	6126      	str	r6, [r4, #16]
 8004c9a:	6165      	str	r5, [r4, #20]
 8004c9c:	444e      	add	r6, r9
 8004c9e:	eba5 0509 	sub.w	r5, r5, r9
 8004ca2:	6026      	str	r6, [r4, #0]
 8004ca4:	60a5      	str	r5, [r4, #8]
 8004ca6:	463e      	mov	r6, r7
 8004ca8:	42be      	cmp	r6, r7
 8004caa:	d900      	bls.n	8004cae <__ssputs_r+0x72>
 8004cac:	463e      	mov	r6, r7
 8004cae:	6820      	ldr	r0, [r4, #0]
 8004cb0:	4632      	mov	r2, r6
 8004cb2:	4641      	mov	r1, r8
 8004cb4:	f000 faa8 	bl	8005208 <memmove>
 8004cb8:	68a3      	ldr	r3, [r4, #8]
 8004cba:	1b9b      	subs	r3, r3, r6
 8004cbc:	60a3      	str	r3, [r4, #8]
 8004cbe:	6823      	ldr	r3, [r4, #0]
 8004cc0:	4433      	add	r3, r6
 8004cc2:	6023      	str	r3, [r4, #0]
 8004cc4:	2000      	movs	r0, #0
 8004cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cca:	462a      	mov	r2, r5
 8004ccc:	f000 fad4 	bl	8005278 <_realloc_r>
 8004cd0:	4606      	mov	r6, r0
 8004cd2:	2800      	cmp	r0, #0
 8004cd4:	d1e0      	bne.n	8004c98 <__ssputs_r+0x5c>
 8004cd6:	6921      	ldr	r1, [r4, #16]
 8004cd8:	4650      	mov	r0, sl
 8004cda:	f7ff feb7 	bl	8004a4c <_free_r>
 8004cde:	230c      	movs	r3, #12
 8004ce0:	f8ca 3000 	str.w	r3, [sl]
 8004ce4:	89a3      	ldrh	r3, [r4, #12]
 8004ce6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004cea:	81a3      	strh	r3, [r4, #12]
 8004cec:	f04f 30ff 	mov.w	r0, #4294967295
 8004cf0:	e7e9      	b.n	8004cc6 <__ssputs_r+0x8a>
	...

08004cf4 <_svfiprintf_r>:
 8004cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cf8:	4698      	mov	r8, r3
 8004cfa:	898b      	ldrh	r3, [r1, #12]
 8004cfc:	061b      	lsls	r3, r3, #24
 8004cfe:	b09d      	sub	sp, #116	@ 0x74
 8004d00:	4607      	mov	r7, r0
 8004d02:	460d      	mov	r5, r1
 8004d04:	4614      	mov	r4, r2
 8004d06:	d510      	bpl.n	8004d2a <_svfiprintf_r+0x36>
 8004d08:	690b      	ldr	r3, [r1, #16]
 8004d0a:	b973      	cbnz	r3, 8004d2a <_svfiprintf_r+0x36>
 8004d0c:	2140      	movs	r1, #64	@ 0x40
 8004d0e:	f7ff ff09 	bl	8004b24 <_malloc_r>
 8004d12:	6028      	str	r0, [r5, #0]
 8004d14:	6128      	str	r0, [r5, #16]
 8004d16:	b930      	cbnz	r0, 8004d26 <_svfiprintf_r+0x32>
 8004d18:	230c      	movs	r3, #12
 8004d1a:	603b      	str	r3, [r7, #0]
 8004d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8004d20:	b01d      	add	sp, #116	@ 0x74
 8004d22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d26:	2340      	movs	r3, #64	@ 0x40
 8004d28:	616b      	str	r3, [r5, #20]
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	9309      	str	r3, [sp, #36]	@ 0x24
 8004d2e:	2320      	movs	r3, #32
 8004d30:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004d34:	f8cd 800c 	str.w	r8, [sp, #12]
 8004d38:	2330      	movs	r3, #48	@ 0x30
 8004d3a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004ed8 <_svfiprintf_r+0x1e4>
 8004d3e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004d42:	f04f 0901 	mov.w	r9, #1
 8004d46:	4623      	mov	r3, r4
 8004d48:	469a      	mov	sl, r3
 8004d4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d4e:	b10a      	cbz	r2, 8004d54 <_svfiprintf_r+0x60>
 8004d50:	2a25      	cmp	r2, #37	@ 0x25
 8004d52:	d1f9      	bne.n	8004d48 <_svfiprintf_r+0x54>
 8004d54:	ebba 0b04 	subs.w	fp, sl, r4
 8004d58:	d00b      	beq.n	8004d72 <_svfiprintf_r+0x7e>
 8004d5a:	465b      	mov	r3, fp
 8004d5c:	4622      	mov	r2, r4
 8004d5e:	4629      	mov	r1, r5
 8004d60:	4638      	mov	r0, r7
 8004d62:	f7ff ff6b 	bl	8004c3c <__ssputs_r>
 8004d66:	3001      	adds	r0, #1
 8004d68:	f000 80a7 	beq.w	8004eba <_svfiprintf_r+0x1c6>
 8004d6c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004d6e:	445a      	add	r2, fp
 8004d70:	9209      	str	r2, [sp, #36]	@ 0x24
 8004d72:	f89a 3000 	ldrb.w	r3, [sl]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	f000 809f 	beq.w	8004eba <_svfiprintf_r+0x1c6>
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	f04f 32ff 	mov.w	r2, #4294967295
 8004d82:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d86:	f10a 0a01 	add.w	sl, sl, #1
 8004d8a:	9304      	str	r3, [sp, #16]
 8004d8c:	9307      	str	r3, [sp, #28]
 8004d8e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004d92:	931a      	str	r3, [sp, #104]	@ 0x68
 8004d94:	4654      	mov	r4, sl
 8004d96:	2205      	movs	r2, #5
 8004d98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d9c:	484e      	ldr	r0, [pc, #312]	@ (8004ed8 <_svfiprintf_r+0x1e4>)
 8004d9e:	f7fb fa17 	bl	80001d0 <memchr>
 8004da2:	9a04      	ldr	r2, [sp, #16]
 8004da4:	b9d8      	cbnz	r0, 8004dde <_svfiprintf_r+0xea>
 8004da6:	06d0      	lsls	r0, r2, #27
 8004da8:	bf44      	itt	mi
 8004daa:	2320      	movmi	r3, #32
 8004dac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004db0:	0711      	lsls	r1, r2, #28
 8004db2:	bf44      	itt	mi
 8004db4:	232b      	movmi	r3, #43	@ 0x2b
 8004db6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004dba:	f89a 3000 	ldrb.w	r3, [sl]
 8004dbe:	2b2a      	cmp	r3, #42	@ 0x2a
 8004dc0:	d015      	beq.n	8004dee <_svfiprintf_r+0xfa>
 8004dc2:	9a07      	ldr	r2, [sp, #28]
 8004dc4:	4654      	mov	r4, sl
 8004dc6:	2000      	movs	r0, #0
 8004dc8:	f04f 0c0a 	mov.w	ip, #10
 8004dcc:	4621      	mov	r1, r4
 8004dce:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004dd2:	3b30      	subs	r3, #48	@ 0x30
 8004dd4:	2b09      	cmp	r3, #9
 8004dd6:	d94b      	bls.n	8004e70 <_svfiprintf_r+0x17c>
 8004dd8:	b1b0      	cbz	r0, 8004e08 <_svfiprintf_r+0x114>
 8004dda:	9207      	str	r2, [sp, #28]
 8004ddc:	e014      	b.n	8004e08 <_svfiprintf_r+0x114>
 8004dde:	eba0 0308 	sub.w	r3, r0, r8
 8004de2:	fa09 f303 	lsl.w	r3, r9, r3
 8004de6:	4313      	orrs	r3, r2
 8004de8:	9304      	str	r3, [sp, #16]
 8004dea:	46a2      	mov	sl, r4
 8004dec:	e7d2      	b.n	8004d94 <_svfiprintf_r+0xa0>
 8004dee:	9b03      	ldr	r3, [sp, #12]
 8004df0:	1d19      	adds	r1, r3, #4
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	9103      	str	r1, [sp, #12]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	bfbb      	ittet	lt
 8004dfa:	425b      	neglt	r3, r3
 8004dfc:	f042 0202 	orrlt.w	r2, r2, #2
 8004e00:	9307      	strge	r3, [sp, #28]
 8004e02:	9307      	strlt	r3, [sp, #28]
 8004e04:	bfb8      	it	lt
 8004e06:	9204      	strlt	r2, [sp, #16]
 8004e08:	7823      	ldrb	r3, [r4, #0]
 8004e0a:	2b2e      	cmp	r3, #46	@ 0x2e
 8004e0c:	d10a      	bne.n	8004e24 <_svfiprintf_r+0x130>
 8004e0e:	7863      	ldrb	r3, [r4, #1]
 8004e10:	2b2a      	cmp	r3, #42	@ 0x2a
 8004e12:	d132      	bne.n	8004e7a <_svfiprintf_r+0x186>
 8004e14:	9b03      	ldr	r3, [sp, #12]
 8004e16:	1d1a      	adds	r2, r3, #4
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	9203      	str	r2, [sp, #12]
 8004e1c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004e20:	3402      	adds	r4, #2
 8004e22:	9305      	str	r3, [sp, #20]
 8004e24:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004ee8 <_svfiprintf_r+0x1f4>
 8004e28:	7821      	ldrb	r1, [r4, #0]
 8004e2a:	2203      	movs	r2, #3
 8004e2c:	4650      	mov	r0, sl
 8004e2e:	f7fb f9cf 	bl	80001d0 <memchr>
 8004e32:	b138      	cbz	r0, 8004e44 <_svfiprintf_r+0x150>
 8004e34:	9b04      	ldr	r3, [sp, #16]
 8004e36:	eba0 000a 	sub.w	r0, r0, sl
 8004e3a:	2240      	movs	r2, #64	@ 0x40
 8004e3c:	4082      	lsls	r2, r0
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	3401      	adds	r4, #1
 8004e42:	9304      	str	r3, [sp, #16]
 8004e44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e48:	4824      	ldr	r0, [pc, #144]	@ (8004edc <_svfiprintf_r+0x1e8>)
 8004e4a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004e4e:	2206      	movs	r2, #6
 8004e50:	f7fb f9be 	bl	80001d0 <memchr>
 8004e54:	2800      	cmp	r0, #0
 8004e56:	d036      	beq.n	8004ec6 <_svfiprintf_r+0x1d2>
 8004e58:	4b21      	ldr	r3, [pc, #132]	@ (8004ee0 <_svfiprintf_r+0x1ec>)
 8004e5a:	bb1b      	cbnz	r3, 8004ea4 <_svfiprintf_r+0x1b0>
 8004e5c:	9b03      	ldr	r3, [sp, #12]
 8004e5e:	3307      	adds	r3, #7
 8004e60:	f023 0307 	bic.w	r3, r3, #7
 8004e64:	3308      	adds	r3, #8
 8004e66:	9303      	str	r3, [sp, #12]
 8004e68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e6a:	4433      	add	r3, r6
 8004e6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8004e6e:	e76a      	b.n	8004d46 <_svfiprintf_r+0x52>
 8004e70:	fb0c 3202 	mla	r2, ip, r2, r3
 8004e74:	460c      	mov	r4, r1
 8004e76:	2001      	movs	r0, #1
 8004e78:	e7a8      	b.n	8004dcc <_svfiprintf_r+0xd8>
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	3401      	adds	r4, #1
 8004e7e:	9305      	str	r3, [sp, #20]
 8004e80:	4619      	mov	r1, r3
 8004e82:	f04f 0c0a 	mov.w	ip, #10
 8004e86:	4620      	mov	r0, r4
 8004e88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e8c:	3a30      	subs	r2, #48	@ 0x30
 8004e8e:	2a09      	cmp	r2, #9
 8004e90:	d903      	bls.n	8004e9a <_svfiprintf_r+0x1a6>
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d0c6      	beq.n	8004e24 <_svfiprintf_r+0x130>
 8004e96:	9105      	str	r1, [sp, #20]
 8004e98:	e7c4      	b.n	8004e24 <_svfiprintf_r+0x130>
 8004e9a:	fb0c 2101 	mla	r1, ip, r1, r2
 8004e9e:	4604      	mov	r4, r0
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e7f0      	b.n	8004e86 <_svfiprintf_r+0x192>
 8004ea4:	ab03      	add	r3, sp, #12
 8004ea6:	9300      	str	r3, [sp, #0]
 8004ea8:	462a      	mov	r2, r5
 8004eaa:	4b0e      	ldr	r3, [pc, #56]	@ (8004ee4 <_svfiprintf_r+0x1f0>)
 8004eac:	a904      	add	r1, sp, #16
 8004eae:	4638      	mov	r0, r7
 8004eb0:	f3af 8000 	nop.w
 8004eb4:	1c42      	adds	r2, r0, #1
 8004eb6:	4606      	mov	r6, r0
 8004eb8:	d1d6      	bne.n	8004e68 <_svfiprintf_r+0x174>
 8004eba:	89ab      	ldrh	r3, [r5, #12]
 8004ebc:	065b      	lsls	r3, r3, #25
 8004ebe:	f53f af2d 	bmi.w	8004d1c <_svfiprintf_r+0x28>
 8004ec2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004ec4:	e72c      	b.n	8004d20 <_svfiprintf_r+0x2c>
 8004ec6:	ab03      	add	r3, sp, #12
 8004ec8:	9300      	str	r3, [sp, #0]
 8004eca:	462a      	mov	r2, r5
 8004ecc:	4b05      	ldr	r3, [pc, #20]	@ (8004ee4 <_svfiprintf_r+0x1f0>)
 8004ece:	a904      	add	r1, sp, #16
 8004ed0:	4638      	mov	r0, r7
 8004ed2:	f000 f879 	bl	8004fc8 <_printf_i>
 8004ed6:	e7ed      	b.n	8004eb4 <_svfiprintf_r+0x1c0>
 8004ed8:	08005338 	.word	0x08005338
 8004edc:	08005342 	.word	0x08005342
 8004ee0:	00000000 	.word	0x00000000
 8004ee4:	08004c3d 	.word	0x08004c3d
 8004ee8:	0800533e 	.word	0x0800533e

08004eec <_printf_common>:
 8004eec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ef0:	4616      	mov	r6, r2
 8004ef2:	4698      	mov	r8, r3
 8004ef4:	688a      	ldr	r2, [r1, #8]
 8004ef6:	690b      	ldr	r3, [r1, #16]
 8004ef8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004efc:	4293      	cmp	r3, r2
 8004efe:	bfb8      	it	lt
 8004f00:	4613      	movlt	r3, r2
 8004f02:	6033      	str	r3, [r6, #0]
 8004f04:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004f08:	4607      	mov	r7, r0
 8004f0a:	460c      	mov	r4, r1
 8004f0c:	b10a      	cbz	r2, 8004f12 <_printf_common+0x26>
 8004f0e:	3301      	adds	r3, #1
 8004f10:	6033      	str	r3, [r6, #0]
 8004f12:	6823      	ldr	r3, [r4, #0]
 8004f14:	0699      	lsls	r1, r3, #26
 8004f16:	bf42      	ittt	mi
 8004f18:	6833      	ldrmi	r3, [r6, #0]
 8004f1a:	3302      	addmi	r3, #2
 8004f1c:	6033      	strmi	r3, [r6, #0]
 8004f1e:	6825      	ldr	r5, [r4, #0]
 8004f20:	f015 0506 	ands.w	r5, r5, #6
 8004f24:	d106      	bne.n	8004f34 <_printf_common+0x48>
 8004f26:	f104 0a19 	add.w	sl, r4, #25
 8004f2a:	68e3      	ldr	r3, [r4, #12]
 8004f2c:	6832      	ldr	r2, [r6, #0]
 8004f2e:	1a9b      	subs	r3, r3, r2
 8004f30:	42ab      	cmp	r3, r5
 8004f32:	dc26      	bgt.n	8004f82 <_printf_common+0x96>
 8004f34:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004f38:	6822      	ldr	r2, [r4, #0]
 8004f3a:	3b00      	subs	r3, #0
 8004f3c:	bf18      	it	ne
 8004f3e:	2301      	movne	r3, #1
 8004f40:	0692      	lsls	r2, r2, #26
 8004f42:	d42b      	bmi.n	8004f9c <_printf_common+0xb0>
 8004f44:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004f48:	4641      	mov	r1, r8
 8004f4a:	4638      	mov	r0, r7
 8004f4c:	47c8      	blx	r9
 8004f4e:	3001      	adds	r0, #1
 8004f50:	d01e      	beq.n	8004f90 <_printf_common+0xa4>
 8004f52:	6823      	ldr	r3, [r4, #0]
 8004f54:	6922      	ldr	r2, [r4, #16]
 8004f56:	f003 0306 	and.w	r3, r3, #6
 8004f5a:	2b04      	cmp	r3, #4
 8004f5c:	bf02      	ittt	eq
 8004f5e:	68e5      	ldreq	r5, [r4, #12]
 8004f60:	6833      	ldreq	r3, [r6, #0]
 8004f62:	1aed      	subeq	r5, r5, r3
 8004f64:	68a3      	ldr	r3, [r4, #8]
 8004f66:	bf0c      	ite	eq
 8004f68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f6c:	2500      	movne	r5, #0
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	bfc4      	itt	gt
 8004f72:	1a9b      	subgt	r3, r3, r2
 8004f74:	18ed      	addgt	r5, r5, r3
 8004f76:	2600      	movs	r6, #0
 8004f78:	341a      	adds	r4, #26
 8004f7a:	42b5      	cmp	r5, r6
 8004f7c:	d11a      	bne.n	8004fb4 <_printf_common+0xc8>
 8004f7e:	2000      	movs	r0, #0
 8004f80:	e008      	b.n	8004f94 <_printf_common+0xa8>
 8004f82:	2301      	movs	r3, #1
 8004f84:	4652      	mov	r2, sl
 8004f86:	4641      	mov	r1, r8
 8004f88:	4638      	mov	r0, r7
 8004f8a:	47c8      	blx	r9
 8004f8c:	3001      	adds	r0, #1
 8004f8e:	d103      	bne.n	8004f98 <_printf_common+0xac>
 8004f90:	f04f 30ff 	mov.w	r0, #4294967295
 8004f94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f98:	3501      	adds	r5, #1
 8004f9a:	e7c6      	b.n	8004f2a <_printf_common+0x3e>
 8004f9c:	18e1      	adds	r1, r4, r3
 8004f9e:	1c5a      	adds	r2, r3, #1
 8004fa0:	2030      	movs	r0, #48	@ 0x30
 8004fa2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004fa6:	4422      	add	r2, r4
 8004fa8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004fac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004fb0:	3302      	adds	r3, #2
 8004fb2:	e7c7      	b.n	8004f44 <_printf_common+0x58>
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	4622      	mov	r2, r4
 8004fb8:	4641      	mov	r1, r8
 8004fba:	4638      	mov	r0, r7
 8004fbc:	47c8      	blx	r9
 8004fbe:	3001      	adds	r0, #1
 8004fc0:	d0e6      	beq.n	8004f90 <_printf_common+0xa4>
 8004fc2:	3601      	adds	r6, #1
 8004fc4:	e7d9      	b.n	8004f7a <_printf_common+0x8e>
	...

08004fc8 <_printf_i>:
 8004fc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004fcc:	7e0f      	ldrb	r7, [r1, #24]
 8004fce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004fd0:	2f78      	cmp	r7, #120	@ 0x78
 8004fd2:	4691      	mov	r9, r2
 8004fd4:	4680      	mov	r8, r0
 8004fd6:	460c      	mov	r4, r1
 8004fd8:	469a      	mov	sl, r3
 8004fda:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004fde:	d807      	bhi.n	8004ff0 <_printf_i+0x28>
 8004fe0:	2f62      	cmp	r7, #98	@ 0x62
 8004fe2:	d80a      	bhi.n	8004ffa <_printf_i+0x32>
 8004fe4:	2f00      	cmp	r7, #0
 8004fe6:	f000 80d2 	beq.w	800518e <_printf_i+0x1c6>
 8004fea:	2f58      	cmp	r7, #88	@ 0x58
 8004fec:	f000 80b9 	beq.w	8005162 <_printf_i+0x19a>
 8004ff0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004ff4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004ff8:	e03a      	b.n	8005070 <_printf_i+0xa8>
 8004ffa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004ffe:	2b15      	cmp	r3, #21
 8005000:	d8f6      	bhi.n	8004ff0 <_printf_i+0x28>
 8005002:	a101      	add	r1, pc, #4	@ (adr r1, 8005008 <_printf_i+0x40>)
 8005004:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005008:	08005061 	.word	0x08005061
 800500c:	08005075 	.word	0x08005075
 8005010:	08004ff1 	.word	0x08004ff1
 8005014:	08004ff1 	.word	0x08004ff1
 8005018:	08004ff1 	.word	0x08004ff1
 800501c:	08004ff1 	.word	0x08004ff1
 8005020:	08005075 	.word	0x08005075
 8005024:	08004ff1 	.word	0x08004ff1
 8005028:	08004ff1 	.word	0x08004ff1
 800502c:	08004ff1 	.word	0x08004ff1
 8005030:	08004ff1 	.word	0x08004ff1
 8005034:	08005175 	.word	0x08005175
 8005038:	0800509f 	.word	0x0800509f
 800503c:	0800512f 	.word	0x0800512f
 8005040:	08004ff1 	.word	0x08004ff1
 8005044:	08004ff1 	.word	0x08004ff1
 8005048:	08005197 	.word	0x08005197
 800504c:	08004ff1 	.word	0x08004ff1
 8005050:	0800509f 	.word	0x0800509f
 8005054:	08004ff1 	.word	0x08004ff1
 8005058:	08004ff1 	.word	0x08004ff1
 800505c:	08005137 	.word	0x08005137
 8005060:	6833      	ldr	r3, [r6, #0]
 8005062:	1d1a      	adds	r2, r3, #4
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	6032      	str	r2, [r6, #0]
 8005068:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800506c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005070:	2301      	movs	r3, #1
 8005072:	e09d      	b.n	80051b0 <_printf_i+0x1e8>
 8005074:	6833      	ldr	r3, [r6, #0]
 8005076:	6820      	ldr	r0, [r4, #0]
 8005078:	1d19      	adds	r1, r3, #4
 800507a:	6031      	str	r1, [r6, #0]
 800507c:	0606      	lsls	r6, r0, #24
 800507e:	d501      	bpl.n	8005084 <_printf_i+0xbc>
 8005080:	681d      	ldr	r5, [r3, #0]
 8005082:	e003      	b.n	800508c <_printf_i+0xc4>
 8005084:	0645      	lsls	r5, r0, #25
 8005086:	d5fb      	bpl.n	8005080 <_printf_i+0xb8>
 8005088:	f9b3 5000 	ldrsh.w	r5, [r3]
 800508c:	2d00      	cmp	r5, #0
 800508e:	da03      	bge.n	8005098 <_printf_i+0xd0>
 8005090:	232d      	movs	r3, #45	@ 0x2d
 8005092:	426d      	negs	r5, r5
 8005094:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005098:	4859      	ldr	r0, [pc, #356]	@ (8005200 <_printf_i+0x238>)
 800509a:	230a      	movs	r3, #10
 800509c:	e011      	b.n	80050c2 <_printf_i+0xfa>
 800509e:	6821      	ldr	r1, [r4, #0]
 80050a0:	6833      	ldr	r3, [r6, #0]
 80050a2:	0608      	lsls	r0, r1, #24
 80050a4:	f853 5b04 	ldr.w	r5, [r3], #4
 80050a8:	d402      	bmi.n	80050b0 <_printf_i+0xe8>
 80050aa:	0649      	lsls	r1, r1, #25
 80050ac:	bf48      	it	mi
 80050ae:	b2ad      	uxthmi	r5, r5
 80050b0:	2f6f      	cmp	r7, #111	@ 0x6f
 80050b2:	4853      	ldr	r0, [pc, #332]	@ (8005200 <_printf_i+0x238>)
 80050b4:	6033      	str	r3, [r6, #0]
 80050b6:	bf14      	ite	ne
 80050b8:	230a      	movne	r3, #10
 80050ba:	2308      	moveq	r3, #8
 80050bc:	2100      	movs	r1, #0
 80050be:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80050c2:	6866      	ldr	r6, [r4, #4]
 80050c4:	60a6      	str	r6, [r4, #8]
 80050c6:	2e00      	cmp	r6, #0
 80050c8:	bfa2      	ittt	ge
 80050ca:	6821      	ldrge	r1, [r4, #0]
 80050cc:	f021 0104 	bicge.w	r1, r1, #4
 80050d0:	6021      	strge	r1, [r4, #0]
 80050d2:	b90d      	cbnz	r5, 80050d8 <_printf_i+0x110>
 80050d4:	2e00      	cmp	r6, #0
 80050d6:	d04b      	beq.n	8005170 <_printf_i+0x1a8>
 80050d8:	4616      	mov	r6, r2
 80050da:	fbb5 f1f3 	udiv	r1, r5, r3
 80050de:	fb03 5711 	mls	r7, r3, r1, r5
 80050e2:	5dc7      	ldrb	r7, [r0, r7]
 80050e4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80050e8:	462f      	mov	r7, r5
 80050ea:	42bb      	cmp	r3, r7
 80050ec:	460d      	mov	r5, r1
 80050ee:	d9f4      	bls.n	80050da <_printf_i+0x112>
 80050f0:	2b08      	cmp	r3, #8
 80050f2:	d10b      	bne.n	800510c <_printf_i+0x144>
 80050f4:	6823      	ldr	r3, [r4, #0]
 80050f6:	07df      	lsls	r7, r3, #31
 80050f8:	d508      	bpl.n	800510c <_printf_i+0x144>
 80050fa:	6923      	ldr	r3, [r4, #16]
 80050fc:	6861      	ldr	r1, [r4, #4]
 80050fe:	4299      	cmp	r1, r3
 8005100:	bfde      	ittt	le
 8005102:	2330      	movle	r3, #48	@ 0x30
 8005104:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005108:	f106 36ff 	addle.w	r6, r6, #4294967295
 800510c:	1b92      	subs	r2, r2, r6
 800510e:	6122      	str	r2, [r4, #16]
 8005110:	f8cd a000 	str.w	sl, [sp]
 8005114:	464b      	mov	r3, r9
 8005116:	aa03      	add	r2, sp, #12
 8005118:	4621      	mov	r1, r4
 800511a:	4640      	mov	r0, r8
 800511c:	f7ff fee6 	bl	8004eec <_printf_common>
 8005120:	3001      	adds	r0, #1
 8005122:	d14a      	bne.n	80051ba <_printf_i+0x1f2>
 8005124:	f04f 30ff 	mov.w	r0, #4294967295
 8005128:	b004      	add	sp, #16
 800512a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800512e:	6823      	ldr	r3, [r4, #0]
 8005130:	f043 0320 	orr.w	r3, r3, #32
 8005134:	6023      	str	r3, [r4, #0]
 8005136:	4833      	ldr	r0, [pc, #204]	@ (8005204 <_printf_i+0x23c>)
 8005138:	2778      	movs	r7, #120	@ 0x78
 800513a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800513e:	6823      	ldr	r3, [r4, #0]
 8005140:	6831      	ldr	r1, [r6, #0]
 8005142:	061f      	lsls	r7, r3, #24
 8005144:	f851 5b04 	ldr.w	r5, [r1], #4
 8005148:	d402      	bmi.n	8005150 <_printf_i+0x188>
 800514a:	065f      	lsls	r7, r3, #25
 800514c:	bf48      	it	mi
 800514e:	b2ad      	uxthmi	r5, r5
 8005150:	6031      	str	r1, [r6, #0]
 8005152:	07d9      	lsls	r1, r3, #31
 8005154:	bf44      	itt	mi
 8005156:	f043 0320 	orrmi.w	r3, r3, #32
 800515a:	6023      	strmi	r3, [r4, #0]
 800515c:	b11d      	cbz	r5, 8005166 <_printf_i+0x19e>
 800515e:	2310      	movs	r3, #16
 8005160:	e7ac      	b.n	80050bc <_printf_i+0xf4>
 8005162:	4827      	ldr	r0, [pc, #156]	@ (8005200 <_printf_i+0x238>)
 8005164:	e7e9      	b.n	800513a <_printf_i+0x172>
 8005166:	6823      	ldr	r3, [r4, #0]
 8005168:	f023 0320 	bic.w	r3, r3, #32
 800516c:	6023      	str	r3, [r4, #0]
 800516e:	e7f6      	b.n	800515e <_printf_i+0x196>
 8005170:	4616      	mov	r6, r2
 8005172:	e7bd      	b.n	80050f0 <_printf_i+0x128>
 8005174:	6833      	ldr	r3, [r6, #0]
 8005176:	6825      	ldr	r5, [r4, #0]
 8005178:	6961      	ldr	r1, [r4, #20]
 800517a:	1d18      	adds	r0, r3, #4
 800517c:	6030      	str	r0, [r6, #0]
 800517e:	062e      	lsls	r6, r5, #24
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	d501      	bpl.n	8005188 <_printf_i+0x1c0>
 8005184:	6019      	str	r1, [r3, #0]
 8005186:	e002      	b.n	800518e <_printf_i+0x1c6>
 8005188:	0668      	lsls	r0, r5, #25
 800518a:	d5fb      	bpl.n	8005184 <_printf_i+0x1bc>
 800518c:	8019      	strh	r1, [r3, #0]
 800518e:	2300      	movs	r3, #0
 8005190:	6123      	str	r3, [r4, #16]
 8005192:	4616      	mov	r6, r2
 8005194:	e7bc      	b.n	8005110 <_printf_i+0x148>
 8005196:	6833      	ldr	r3, [r6, #0]
 8005198:	1d1a      	adds	r2, r3, #4
 800519a:	6032      	str	r2, [r6, #0]
 800519c:	681e      	ldr	r6, [r3, #0]
 800519e:	6862      	ldr	r2, [r4, #4]
 80051a0:	2100      	movs	r1, #0
 80051a2:	4630      	mov	r0, r6
 80051a4:	f7fb f814 	bl	80001d0 <memchr>
 80051a8:	b108      	cbz	r0, 80051ae <_printf_i+0x1e6>
 80051aa:	1b80      	subs	r0, r0, r6
 80051ac:	6060      	str	r0, [r4, #4]
 80051ae:	6863      	ldr	r3, [r4, #4]
 80051b0:	6123      	str	r3, [r4, #16]
 80051b2:	2300      	movs	r3, #0
 80051b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80051b8:	e7aa      	b.n	8005110 <_printf_i+0x148>
 80051ba:	6923      	ldr	r3, [r4, #16]
 80051bc:	4632      	mov	r2, r6
 80051be:	4649      	mov	r1, r9
 80051c0:	4640      	mov	r0, r8
 80051c2:	47d0      	blx	sl
 80051c4:	3001      	adds	r0, #1
 80051c6:	d0ad      	beq.n	8005124 <_printf_i+0x15c>
 80051c8:	6823      	ldr	r3, [r4, #0]
 80051ca:	079b      	lsls	r3, r3, #30
 80051cc:	d413      	bmi.n	80051f6 <_printf_i+0x22e>
 80051ce:	68e0      	ldr	r0, [r4, #12]
 80051d0:	9b03      	ldr	r3, [sp, #12]
 80051d2:	4298      	cmp	r0, r3
 80051d4:	bfb8      	it	lt
 80051d6:	4618      	movlt	r0, r3
 80051d8:	e7a6      	b.n	8005128 <_printf_i+0x160>
 80051da:	2301      	movs	r3, #1
 80051dc:	4632      	mov	r2, r6
 80051de:	4649      	mov	r1, r9
 80051e0:	4640      	mov	r0, r8
 80051e2:	47d0      	blx	sl
 80051e4:	3001      	adds	r0, #1
 80051e6:	d09d      	beq.n	8005124 <_printf_i+0x15c>
 80051e8:	3501      	adds	r5, #1
 80051ea:	68e3      	ldr	r3, [r4, #12]
 80051ec:	9903      	ldr	r1, [sp, #12]
 80051ee:	1a5b      	subs	r3, r3, r1
 80051f0:	42ab      	cmp	r3, r5
 80051f2:	dcf2      	bgt.n	80051da <_printf_i+0x212>
 80051f4:	e7eb      	b.n	80051ce <_printf_i+0x206>
 80051f6:	2500      	movs	r5, #0
 80051f8:	f104 0619 	add.w	r6, r4, #25
 80051fc:	e7f5      	b.n	80051ea <_printf_i+0x222>
 80051fe:	bf00      	nop
 8005200:	08005349 	.word	0x08005349
 8005204:	0800535a 	.word	0x0800535a

08005208 <memmove>:
 8005208:	4288      	cmp	r0, r1
 800520a:	b510      	push	{r4, lr}
 800520c:	eb01 0402 	add.w	r4, r1, r2
 8005210:	d902      	bls.n	8005218 <memmove+0x10>
 8005212:	4284      	cmp	r4, r0
 8005214:	4623      	mov	r3, r4
 8005216:	d807      	bhi.n	8005228 <memmove+0x20>
 8005218:	1e43      	subs	r3, r0, #1
 800521a:	42a1      	cmp	r1, r4
 800521c:	d008      	beq.n	8005230 <memmove+0x28>
 800521e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005222:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005226:	e7f8      	b.n	800521a <memmove+0x12>
 8005228:	4402      	add	r2, r0
 800522a:	4601      	mov	r1, r0
 800522c:	428a      	cmp	r2, r1
 800522e:	d100      	bne.n	8005232 <memmove+0x2a>
 8005230:	bd10      	pop	{r4, pc}
 8005232:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005236:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800523a:	e7f7      	b.n	800522c <memmove+0x24>

0800523c <_sbrk_r>:
 800523c:	b538      	push	{r3, r4, r5, lr}
 800523e:	4d06      	ldr	r5, [pc, #24]	@ (8005258 <_sbrk_r+0x1c>)
 8005240:	2300      	movs	r3, #0
 8005242:	4604      	mov	r4, r0
 8005244:	4608      	mov	r0, r1
 8005246:	602b      	str	r3, [r5, #0]
 8005248:	f7fc fc5c 	bl	8001b04 <_sbrk>
 800524c:	1c43      	adds	r3, r0, #1
 800524e:	d102      	bne.n	8005256 <_sbrk_r+0x1a>
 8005250:	682b      	ldr	r3, [r5, #0]
 8005252:	b103      	cbz	r3, 8005256 <_sbrk_r+0x1a>
 8005254:	6023      	str	r3, [r4, #0]
 8005256:	bd38      	pop	{r3, r4, r5, pc}
 8005258:	200002c4 	.word	0x200002c4

0800525c <memcpy>:
 800525c:	440a      	add	r2, r1
 800525e:	4291      	cmp	r1, r2
 8005260:	f100 33ff 	add.w	r3, r0, #4294967295
 8005264:	d100      	bne.n	8005268 <memcpy+0xc>
 8005266:	4770      	bx	lr
 8005268:	b510      	push	{r4, lr}
 800526a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800526e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005272:	4291      	cmp	r1, r2
 8005274:	d1f9      	bne.n	800526a <memcpy+0xe>
 8005276:	bd10      	pop	{r4, pc}

08005278 <_realloc_r>:
 8005278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800527c:	4680      	mov	r8, r0
 800527e:	4615      	mov	r5, r2
 8005280:	460c      	mov	r4, r1
 8005282:	b921      	cbnz	r1, 800528e <_realloc_r+0x16>
 8005284:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005288:	4611      	mov	r1, r2
 800528a:	f7ff bc4b 	b.w	8004b24 <_malloc_r>
 800528e:	b92a      	cbnz	r2, 800529c <_realloc_r+0x24>
 8005290:	f7ff fbdc 	bl	8004a4c <_free_r>
 8005294:	2400      	movs	r4, #0
 8005296:	4620      	mov	r0, r4
 8005298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800529c:	f000 f81a 	bl	80052d4 <_malloc_usable_size_r>
 80052a0:	4285      	cmp	r5, r0
 80052a2:	4606      	mov	r6, r0
 80052a4:	d802      	bhi.n	80052ac <_realloc_r+0x34>
 80052a6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80052aa:	d8f4      	bhi.n	8005296 <_realloc_r+0x1e>
 80052ac:	4629      	mov	r1, r5
 80052ae:	4640      	mov	r0, r8
 80052b0:	f7ff fc38 	bl	8004b24 <_malloc_r>
 80052b4:	4607      	mov	r7, r0
 80052b6:	2800      	cmp	r0, #0
 80052b8:	d0ec      	beq.n	8005294 <_realloc_r+0x1c>
 80052ba:	42b5      	cmp	r5, r6
 80052bc:	462a      	mov	r2, r5
 80052be:	4621      	mov	r1, r4
 80052c0:	bf28      	it	cs
 80052c2:	4632      	movcs	r2, r6
 80052c4:	f7ff ffca 	bl	800525c <memcpy>
 80052c8:	4621      	mov	r1, r4
 80052ca:	4640      	mov	r0, r8
 80052cc:	f7ff fbbe 	bl	8004a4c <_free_r>
 80052d0:	463c      	mov	r4, r7
 80052d2:	e7e0      	b.n	8005296 <_realloc_r+0x1e>

080052d4 <_malloc_usable_size_r>:
 80052d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052d8:	1f18      	subs	r0, r3, #4
 80052da:	2b00      	cmp	r3, #0
 80052dc:	bfbc      	itt	lt
 80052de:	580b      	ldrlt	r3, [r1, r0]
 80052e0:	18c0      	addlt	r0, r0, r3
 80052e2:	4770      	bx	lr

080052e4 <_init>:
 80052e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052e6:	bf00      	nop
 80052e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052ea:	bc08      	pop	{r3}
 80052ec:	469e      	mov	lr, r3
 80052ee:	4770      	bx	lr

080052f0 <_fini>:
 80052f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052f2:	bf00      	nop
 80052f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052f6:	bc08      	pop	{r3}
 80052f8:	469e      	mov	lr, r3
 80052fa:	4770      	bx	lr
